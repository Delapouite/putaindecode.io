{"head":{"layout":"Post","comments":true,"date":"2015-12-01","title":"Avantages à diviser ses storyboards sur iOS/OS X","tags":["ios","os x","storyboard","swift","objective c","xcode"],"authors":["leoderbois"]},"body":"<p>Aujourd’hui, on va parler d’un sujet qui parle à tous les devs iOS : les\n<strong>storyboards</strong>.</p>\n<blockquote>\n<p>Pour faire court :  les storyboards sont les fichiers d’interface sous iOS/OS X.\nC’est là où vous placer vos <code>vues</code> dans vos <code>scenes</code>, vous les positionnez\nentre elles, vous pouvez créer des interactions entre les <code>scenes</code> pour passer\nde l’une à l’autre. C’est proche des XAML de Visual ou des Layouts d’Android,\nmais avec la notion de relation entre les <code>scenes</code> en plus. Ça permet de créer\ngraphiquement et simplement le workflow de l’application.</p>\n</blockquote>\n<h2 id=\"pourquoi-d-couper-son-storyboard\"><a class=\"markdownIt-Anchor\" href=\"#pourquoi-d-couper-son-storyboard\">#</a> Pourquoi découper son storyboard</h2>\n<p>Pouvoir relier aussi facilement toutes les <code>scenes</code> dans un même storyboard,\nc’est génial. Mais alors pourquoi les diviser ?</p>\n<h3 id=\"viter-des-conflits\"><a class=\"markdownIt-Anchor\" href=\"#viter-des-conflits\">#</a> Éviter des conflits</h3>\n<p>Si vous travaillez à plusieurs, vous avez sûrement déjà rencontré des\nconflits lors de merges où tout le monde a décidé d’éditer le <code>storyboard</code> en\nmême temps. Le storyboard est donc corrompu et le seul moyen de le récupérer\nest de prendre celui de quelqu’un et refaire les changements ou de corriger les\nsources en croisant les doigts. Accompagné de 4 L de café.<br>\nAvec plusieurs <code>storyboards</code> : chacun bosse sur sa partie graphique. Si <em>Bob</em>\ntravaille sur les <em>vues de comptes</em> et <em>Joe</em> sur les <em>settings</em> de l’app,\nchacun a un storyboard et ne change pas ceux des autres. Ça fait beaucoup moins\nde chance d’avoir des conflits, voire aucun si tout le monde se met d’accord !</p>\n<h3 id=\"les-gros-projets-plus-faciles-diter-comprendre\"><a class=\"markdownIt-Anchor\" href=\"#les-gros-projets-plus-faciles-diter-comprendre\">#</a> Les gros projets plus faciles à éditer/comprendre</h3>\n<p>Pour les gros projets, avec beaucoup de <code>scenes</code>, ranger ces <code>scenes</code> par\ngroupes dans différents <code>storyboards</code> peut être un bon moyen de s’y retrouver\nfacilement. Vous n’avez pas à dézoomer à chaque fois que vous voulez chercher\nune <code>scene</code> à l’autre bout du storyboard.</p>\n<h3 id=\"augmenter-la-vitesse-de-compilation\"><a class=\"markdownIt-Anchor\" href=\"#augmenter-la-vitesse-de-compilation\">#</a> Augmenter la vitesse de compilation</h3>\n<p>Recompiler tout le storyboard juste pour un label changé ça ne sert pas à\ngrand chose et certains <code>storyboards</code> peuvent être long à compiler. Donc moins\nd’éléments vous avez à recompiler, plus vite ça ira.</p>\n<h3 id=\"r-utilisation-de-code\"><a class=\"markdownIt-Anchor\" href=\"#r-utilisation-de-code\">#</a> Réutilisation de code</h3>\n<p>Imaginons que vous bossez dans une boîte qui fait souvent les mêmes apps\npour les clients, vous pouvez vous faire des petits storyboards que vous\nréutiliserez et customiserez grâce aux contrôleurs (couleur, font, etc). Ça peut\nfaire gagner du temps, mais aussi beaucoup en perdre si vous en abusez ⚠️.</p>\n<h2 id=\"comment-faire\"><a class=\"markdownIt-Anchor\" href=\"#comment-faire\">#</a> Comment faire</h2>\n<p>Rentrons dans le vif du sujet, le côté technique. En quelques lignes de code :</p>\n<pre><code class=\"language-swift\"><span class=\"hljs-comment\">// *** Swift ***</span>\n<span class=\"hljs-comment\">// Aller chercher le storyboard</span>\n<span class=\"hljs-keyword\">let</span> storyboardSettings = <span class=\"hljs-type\">UIStoryboard</span>(name: <span class=\"hljs-string\">\"settings\"</span>, bundle: <span class=\"hljs-literal\">nil</span>)\n<span class=\"hljs-comment\">// Aller chercher le contrôleur qui est dans le storybard</span>\n<span class=\"hljs-keyword\">let</span> controllerSettings =\nstoryboardSettings.instantiateViewControllerWithIdentifier(<span class=\"hljs-string\">\"settingsController\"</span>)\n<span class=\"hljs-comment\">// Présenter</span>\n<span class=\"hljs-keyword\">self</span>.presentViewController(controllerSettings,animated: <span class=\"hljs-literal\">true</span>, completion: <span class=\"hljs-literal\">nil</span>)</code></pre>\n<pre><code class=\"language-objc\"><span class=\"hljs-comment\">// *** Objective C ***</span>\n<span class=\"hljs-comment\">// Aller chercher le sotyboard</span>\n<span class=\"hljs-built_in\">UIStoryboard</span> * storyboardSettings = [<span class=\"hljs-built_in\">UIStoryboard</span> storyboardWithName:<span class=\"hljs-string\">@\"settings\"</span>\nbundle:<span class=\"hljs-literal\">nil</span>];\n<span class=\"hljs-comment\">// Aller chercher le contrôleur qui est dans le storybard</span>\n<span class=\"hljs-built_in\">UIViewController</span>* controllerSettings = [storyboardSettings\ninstantiateViewControllerWithIdentifier:<span class=\"hljs-string\">@\"settingsController\"</span>];\n<span class=\"hljs-comment\">// Présenter</span>\n[<span class=\"hljs-keyword\">self</span> presentViewController:controllerSettings animated:<span class=\"hljs-literal\">YES</span> completion:<span class=\"hljs-literal\">nil</span>];</code></pre>\n<p>Rien de plus simple ! Mais c’est bien connu, les développeurs iOS sont des\nfainéants, alors il y a encore plus simple, sans taper une seule ligne de code :</p>\n<ul>\n<li>créez un nouveau storyboard pour votre <em>secteur</em>\n(File→New→File→[OS]→User Interface),</li>\n<li>ajoutez une <code>scene</code> (<code>UIViewController</code>), mettre l’une en <code>vue initial</code>\n(sinon le compilateur n’aime pas),</li>\n<li>nommez les <code>storyboardID</code> de chacune de ces <code>scenes</code> dans le menu\n<code>Utilies&gt;Identity Inspector</code>,</li>\n<li>dans votre storyboard original, dans le menu <code>Utilies&gt;Object Library</code> cherchez\n<code>storyboard</code> et ajoutez une <strong><code>Storyboard References</code></strong>,</li>\n<li>sur la référence dans <code>Utilises&gt;Attributes Inspector</code> rentrez le nom dans\nvotre storyboard (dans <em>storyboard</em>) et remplissez <em>Reference ID</em> avec le\n<em>storyboardID</em> de la <code>scene</code>,</li>\n<li>pour finir, ajoutez une <code>segue</code>, à partir d’un bouton (par exemple) vers les\n<em>Storyboard Reference</em> voulus.</li>\n</ul>\n<p>Plus long à lire qu’à faire !</p>\n","rawBody":"Aujourd'hui, on va parler d'un sujet qui parle à tous les devs iOS : les\n**storyboards**.\n\n>Pour faire court :  les storyboards sont les fichiers d'interface sous iOS/OS X. \nC'est là où vous placer vos `vues` dans vos `scenes`, vous les positionnez\nentre elles, vous pouvez créer des interactions entre les `scenes` pour passer\nde l'une à l'autre. C'est proche des XAML de Visual ou des Layouts d'Android,\nmais avec la notion de relation entre les `scenes` en plus. Ça permet de créer\ngraphiquement et simplement le workflow de l'application.\n\n## Pourquoi découper son storyboard\n\nPouvoir relier aussi facilement toutes les `scenes` dans un même storyboard,\nc'est génial. Mais alors pourquoi les diviser ?\n\n### Éviter des conflits\n\nSi vous travaillez à plusieurs, vous avez sûrement déjà rencontré des\nconflits lors de merges où tout le monde a décidé d'éditer le `storyboard` en\nmême temps. Le storyboard est donc corrompu et le seul moyen de le récupérer\nest de prendre celui de quelqu'un et refaire les changements ou de corriger les\nsources en croisant les doigts. Accompagné de 4 L de café.  \nAvec plusieurs `storyboards` : chacun bosse sur sa partie graphique. Si *Bob*\ntravaille sur les *vues de comptes* et *Joe* sur les *settings* de l'app,\nchacun a un storyboard et ne change pas ceux des autres. Ça fait beaucoup moins\nde chance d'avoir des conflits, voire aucun si tout le monde se met d'accord !\n\n### Les gros projets plus faciles à éditer/comprendre\n\nPour les gros projets, avec beaucoup de `scenes`, ranger ces `scenes` par\ngroupes dans différents `storyboards` peut être un bon moyen de s'y retrouver\nfacilement. Vous n'avez pas à dézoomer à chaque fois que vous voulez chercher\nune `scene` à l'autre bout du storyboard.\n\n### Augmenter la vitesse de compilation\n\nRecompiler tout le storyboard juste pour un label changé ça ne sert pas à\ngrand chose et certains `storyboards` peuvent être long à compiler. Donc moins\nd'éléments vous avez à recompiler, plus vite ça ira.\n\n### Réutilisation de code\n\nImaginons que vous bossez dans une boîte qui fait souvent les mêmes apps\npour les clients, vous pouvez vous faire des petits storyboards que vous\nréutiliserez et customiserez grâce aux contrôleurs (couleur, font, etc). Ça peut\nfaire gagner du temps, mais aussi beaucoup en perdre si vous en abusez ⚠️.\n\n## Comment faire\n\nRentrons dans le vif du sujet, le côté technique. En quelques lignes de code :\n\n```swift\n// *** Swift ***\n// Aller chercher le storyboard\nlet storyboardSettings = UIStoryboard(name: \"settings\", bundle: nil)\n// Aller chercher le contrôleur qui est dans le storybard\nlet controllerSettings =\nstoryboardSettings.instantiateViewControllerWithIdentifier(\"settingsController\")\n// Présenter\nself.presentViewController(controllerSettings,animated: true, completion: nil)\n```\n\n```objc\n// *** Objective C ***\n// Aller chercher le sotyboard\nUIStoryboard * storyboardSettings = [UIStoryboard storyboardWithName:@\"settings\"\nbundle:nil];\n// Aller chercher le contrôleur qui est dans le storybard\nUIViewController* controllerSettings = [storyboardSettings\ninstantiateViewControllerWithIdentifier:@\"settingsController\"];\n// Présenter\n[self presentViewController:controllerSettings animated:YES completion:nil];\n```\n\nRien de plus simple ! Mais c'est bien connu, les développeurs iOS sont des\nfainéants, alors il y a encore plus simple, sans taper une seule ligne de code :\n\n- créez un nouveau storyboard pour votre *secteur*\n(File→New→File→[OS]→User Interface),\n- ajoutez une `scene` (`UIViewController`), mettre l'une en `vue initial`\n(sinon le compilateur n'aime pas),\n- nommez les `storyboardID` de chacune de ces `scenes` dans le menu\n`Utilies>Identity Inspector`,\n- dans votre storyboard original, dans le menu `Utilies>Object Library` cherchez\n`storyboard` et ajoutez une **`Storyboard References`**,\n- sur la référence dans `Utilises>Attributes Inspector` rentrez le nom dans\nvotre storyboard (dans *storyboard*) et remplissez *Reference ID* avec le\n*storyboardID* de la `scene`,\n- pour finir, ajoutez une `segue`, à partir d'un bouton (par exemple) vers les\n*Storyboard Reference* voulus.\n\nPlus long à lire qu'à faire !\n","raw":"---\ndate: \"2015-12-01\"\ntitle: Avantages à diviser ses storyboards sur iOS/OS X\ntags:\n  - ios\n  - os x\n  - storyboard\n  - swift\n  - objective c\n  - xcode\nauthors:\n  - leoderbois\n---\nAujourd'hui, on va parler d'un sujet qui parle à tous les devs iOS : les\n**storyboards**.\n\n>Pour faire court :  les storyboards sont les fichiers d'interface sous iOS/OS X. \nC'est là où vous placer vos `vues` dans vos `scenes`, vous les positionnez\nentre elles, vous pouvez créer des interactions entre les `scenes` pour passer\nde l'une à l'autre. C'est proche des XAML de Visual ou des Layouts d'Android,\nmais avec la notion de relation entre les `scenes` en plus. Ça permet de créer\ngraphiquement et simplement le workflow de l'application.\n\n## Pourquoi découper son storyboard\n\nPouvoir relier aussi facilement toutes les `scenes` dans un même storyboard,\nc'est génial. Mais alors pourquoi les diviser ?\n\n### Éviter des conflits\n\nSi vous travaillez à plusieurs, vous avez sûrement déjà rencontré des\nconflits lors de merges où tout le monde a décidé d'éditer le `storyboard` en\nmême temps. Le storyboard est donc corrompu et le seul moyen de le récupérer\nest de prendre celui de quelqu'un et refaire les changements ou de corriger les\nsources en croisant les doigts. Accompagné de 4 L de café.  \nAvec plusieurs `storyboards` : chacun bosse sur sa partie graphique. Si *Bob*\ntravaille sur les *vues de comptes* et *Joe* sur les *settings* de l'app,\nchacun a un storyboard et ne change pas ceux des autres. Ça fait beaucoup moins\nde chance d'avoir des conflits, voire aucun si tout le monde se met d'accord !\n\n### Les gros projets plus faciles à éditer/comprendre\n\nPour les gros projets, avec beaucoup de `scenes`, ranger ces `scenes` par\ngroupes dans différents `storyboards` peut être un bon moyen de s'y retrouver\nfacilement. Vous n'avez pas à dézoomer à chaque fois que vous voulez chercher\nune `scene` à l'autre bout du storyboard.\n\n### Augmenter la vitesse de compilation\n\nRecompiler tout le storyboard juste pour un label changé ça ne sert pas à\ngrand chose et certains `storyboards` peuvent être long à compiler. Donc moins\nd'éléments vous avez à recompiler, plus vite ça ira.\n\n### Réutilisation de code\n\nImaginons que vous bossez dans une boîte qui fait souvent les mêmes apps\npour les clients, vous pouvez vous faire des petits storyboards que vous\nréutiliserez et customiserez grâce aux contrôleurs (couleur, font, etc). Ça peut\nfaire gagner du temps, mais aussi beaucoup en perdre si vous en abusez ⚠️.\n\n## Comment faire\n\nRentrons dans le vif du sujet, le côté technique. En quelques lignes de code :\n\n```swift\n// *** Swift ***\n// Aller chercher le storyboard\nlet storyboardSettings = UIStoryboard(name: \"settings\", bundle: nil)\n// Aller chercher le contrôleur qui est dans le storybard\nlet controllerSettings =\nstoryboardSettings.instantiateViewControllerWithIdentifier(\"settingsController\")\n// Présenter\nself.presentViewController(controllerSettings,animated: true, completion: nil)\n```\n\n```objc\n// *** Objective C ***\n// Aller chercher le sotyboard\nUIStoryboard * storyboardSettings = [UIStoryboard storyboardWithName:@\"settings\"\nbundle:nil];\n// Aller chercher le contrôleur qui est dans le storybard\nUIViewController* controllerSettings = [storyboardSettings\ninstantiateViewControllerWithIdentifier:@\"settingsController\"];\n// Présenter\n[self presentViewController:controllerSettings animated:YES completion:nil];\n```\n\nRien de plus simple ! Mais c'est bien connu, les développeurs iOS sont des\nfainéants, alors il y a encore plus simple, sans taper une seule ligne de code :\n\n- créez un nouveau storyboard pour votre *secteur*\n(File→New→File→[OS]→User Interface),\n- ajoutez une `scene` (`UIViewController`), mettre l'une en `vue initial`\n(sinon le compilateur n'aime pas),\n- nommez les `storyboardID` de chacune de ces `scenes` dans le menu\n`Utilies>Identity Inspector`,\n- dans votre storyboard original, dans le menu `Utilies>Object Library` cherchez\n`storyboard` et ajoutez une **`Storyboard References`**,\n- sur la référence dans `Utilises>Attributes Inspector` rentrez le nom dans\nvotre storyboard (dans *storyboard*) et remplissez *Reference ID* avec le\n*storyboardID* de la `scene`,\n- pour finir, ajoutez une `segue`, à partir d'un bouton (par exemple) vers les\n*Storyboard Reference* voulus.\n\nPlus long à lire qu'à faire !\n","__filename":"fr/articles/xcode/storyboards/avantages-a-diviser-ses-storyboards/index.md","__url":"/fr/articles/xcode/storyboards/avantages-a-diviser-ses-storyboards/"}