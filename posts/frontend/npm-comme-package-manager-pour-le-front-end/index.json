{"head":{"layout":"Post","comments":true,"date":"2014-05-06","title":"NPM comme package manager pour le front-end","tags":["npm","package manager","javascript","css"],"authors":["kewah"]},"body":"<p>NPM, le package manager de Node.js, a grandement participé au succès de ce dernier.\nIl facilite la création, le partage et l’installation de modules.\nIl permet aux développeurs de suivre la <a href=\"http://www.faqs.org/docs/artu/ch01s06.html\">philosophie Unix</a>\noù chaque module fait une seule tâche (évite la complexité, facilite la réutilisation et les tests).</p>\n<p>Cependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c’est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.</p>\n<h2 id=\"module-javascript\"><a class=\"markdownIt-Anchor\" href=\"#module-javascript\">#</a> Module JavaScript</h2>\n<p>Si vous n’êtes pas familier(e) avec la création d’un module JavaScript, je vous\nconseille d’exécuter la commande <code>npm init</code> qui va vous aider à générer votre\n<code>package.json</code> (fichier de configuration utilisé par NPM). Le champ\n&quot;<a href=\"https://www.npmjs.org/doc/json.html#main\">main</a>&quot; définit le point d’entrée de\nvotre module.</p>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">name</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"putaindemodule\"</span></span>,\n  \"<span class=\"hljs-attribute\">version</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"0.0.1\"</span></span>,\n  \"<span class=\"hljs-attribute\">main</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"index.js\"</span>\n</span>}</code></pre>\n<p>Dans un article précédent, il vous a été présenté le développement d’une application\nautour de <a href=\"/posts/js/browserify-all-the-things/\">modules JavaScript avec Browserify</a>.</p>\n<h2 id=\"module-pour-tout-type-de-fichier\"><a class=\"markdownIt-Anchor\" href=\"#module-pour-tout-type-de-fichier\">#</a> Module pour tout type de fichier</h2>\n<p>C’est grâce au champ &quot;<a href=\"https://www.npmjs.org/doc/json.html#files\">files</a>&quot; que\nl’on peut définir la liste des fichiers que l’on va publier (autre que les fichiers JavaScript).\nVoici un exemple de <code>package.json</code> d’un module pour un système de grille CSS.</p>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">name</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"putaindegrid\"</span></span>,\n  \"<span class=\"hljs-attribute\">version</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"0.0.1\"</span></span>,\n  \"<span class=\"hljs-attribute\">files</span>\": <span class=\"hljs-value\">[\n    <span class=\"hljs-string\">\"grid.css\"</span>\n  ]\n</span>}</code></pre>\n<p>Il ne reste de plus qu’à le <a href=\"https://gist.github.com/coolaj86/1318304\">publier</a>\net à l’installer (<code>npm install putaindegrid --save</code>) dans vos différents projets\noù vous en aurez besoin. Votre fichier <code>grid.css</code> est accessible dans le dossier\n<code>node_modules/putaindegrid/grid.css</code>, vous pouvez donc l’inclure dans votre page\nHTML. (Ou l’<code>@import</code>er dans votre fichier Sass/Less principal.)</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">link</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"node_modules/putaindegrid/grid.css\"</span> <span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-value\">\"stylesheet\"</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text/css\"</span>&gt;</span></code></pre>\n<h2 id=\"pourquoi-npm-plut-t-qu-un-autre-package-manager\"><a class=\"markdownIt-Anchor\" href=\"#pourquoi-npm-plut-t-qu-un-autre-package-manager\">#</a> Pourquoi NPM plutôt qu’un autre package manager ?</h2>\n<ul>\n<li>Il a déjà fait ses preuves comme package manager pour Node.js.</li>\n<li>Pas besoin d’installer un nouvel outil, NPM étant installé avec Node.js, ce qui\névite un lot de bugs et de fichiers de configuration supplémentaires (un simple <code>package.json</code> suffit).</li>\n<li>Et surtout, toutes les dépendances de votre projet peuvent être gérées via NPM:\nvotre tasks runner et ses plugins (<a href=\"/posts/js/introduction-gulp/\">Gulp</a>, <a href=\"/posts/js/premiers-pas-avec-grunt/\">Grunt</a> &amp; co), vos <a href=\"/posts/js/browserify-all-the-things/\">modules JavaScript</a>, vos <a href=\"/posts/js/introduction-au-testing-js-front/\">tests</a>\net comme on vient de le voir, vos fichiers de style.</li>\n</ul>\n<p>Dans le cas où vous n’auriez pas envie de passer par l’étape de publication\n(<code>npm publish</code>) pour diverses raisons, sachez qu’il est possible\nd’<a href=\"https://www.npmjs.org/doc/cli/npm-install.html\">installer</a> des packages qui ne\nsont pas publiés. Mon alternative favorite étant l’utilisation du namespace Github\n<code>npm install user/repo --save</code>.<br>\nCependant, même si vous ne publiez pas votre module, lorsque vous en modifiez le\ncode n’oubliez jamais de mettre à jour sa version suivant la convention\n<a href=\"http://semver.org/\">semver</a>. Sinon vous serez susceptible d’inclure des bugs dans\nles projets qui l’utilisent. Ce qui implique :</p>\n<ul>\n<li>Mettre à jour le champ “version” de votre <code>package.json</code> (vous pouvez vous\naider des commandes <code>npm version patch</code>, <code>npm version minor</code> et <code>npm version major</code>).</li>\n<li>Ajouter un tag git (<code>git tag -a 0.1.0 -m &quot;Initial release&quot;</code>).</li>\n</ul>\n<p>NPM est une excellente solution pour gérer les dépendences de votre projet, aussi\nbien pour vos outils de build, que pour vos assets front-end. Je pense qu’il est\nimportant de garder les choses simples, en commençant par utiliser un seul\ngestionnaire de dépendances, dans le cas où celui-ci n’intègre pas d’autres\nfonctionnalités que le téléchargement de modules.</p>\n<p>Bye bye Bower!</p>\n<p>PS: vous avez besoin d’un module qui n’a pas de package.json ? Pas de problème, <a href=\"/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/\">napa est là pour ça</a></p>\n","rawBody":"\nNPM, le package manager de Node.js, a grandement participé au succès de ce dernier.\nIl facilite la création, le partage et l'installation de modules.\nIl permet aux développeurs de suivre la [philosophie Unix](http://www.faqs.org/docs/artu/ch01s06.html)\noù chaque module fait une seule tâche (évite la complexité, facilite la réutilisation et les tests).\n\nCependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c'est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.\n\n## Module JavaScript\n\nSi vous n'êtes pas familier(e) avec la création d'un module JavaScript, je vous\nconseille d'exécuter la commande `npm init` qui va vous aider à générer votre\n`package.json` (fichier de configuration utilisé par NPM). Le champ\n\"[main](https://www.npmjs.org/doc/json.html#main)\" définit le point d'entrée de\nvotre module.\n\n```json\n{\n  \"name\": \"putaindemodule\",\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\"\n}\n```\n\nDans un article précédent, il vous a été présenté le développement d'une application\nautour de [modules JavaScript avec Browserify](/posts/js/browserify-all-the-things/).\n\n## Module pour tout type de fichier\n\nC'est grâce au champ \"[files](https://www.npmjs.org/doc/json.html#files)\" que\nl'on peut définir la liste des fichiers que l'on va publier (autre que les fichiers JavaScript).\nVoici un exemple de `package.json` d'un module pour un système de grille CSS.\n\n```json\n{\n  \"name\": \"putaindegrid\",\n  \"version\": \"0.0.1\",\n  \"files\": [\n    \"grid.css\"\n  ]\n}\n```\n\nIl ne reste de plus qu'à le [publier](https://gist.github.com/coolaj86/1318304)\net à l'installer (`npm install putaindegrid --save`) dans vos différents projets\noù vous en aurez besoin. Votre fichier `grid.css` est accessible dans le dossier\n`node_modules/putaindegrid/grid.css`, vous pouvez donc l'inclure dans votre page\nHTML. (Ou l'`@import`er dans votre fichier Sass/Less principal.)\n\n```html\n<link href=\"node_modules/putaindegrid/grid.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n## Pourquoi NPM plutôt qu'un autre package manager ?\n\n- Il a déjà fait ses preuves comme package manager pour Node.js.\n- Pas besoin d'installer un nouvel outil, NPM étant installé avec Node.js, ce qui\névite un lot de bugs et de fichiers de configuration supplémentaires (un simple `package.json` suffit).\n- Et surtout, toutes les dépendances de votre projet peuvent être gérées via NPM:\nvotre tasks runner et ses plugins ([Gulp](/posts/js/introduction-gulp/), [Grunt](/posts/js/premiers-pas-avec-grunt/) & co), vos [modules JavaScript](/posts/js/browserify-all-the-things/), vos [tests](/posts/js/introduction-au-testing-js-front/)\net comme on vient de le voir, vos fichiers de style.\n\nDans le cas où vous n'auriez pas envie de passer par l'étape de publication\n(`npm publish`) pour diverses raisons, sachez qu'il est possible\nd'[installer](https://www.npmjs.org/doc/cli/npm-install.html) des packages qui ne\nsont pas publiés. Mon alternative favorite étant l'utilisation du namespace Github\n`npm install user/repo --save`.  \nCependant, même si vous ne publiez pas votre module, lorsque vous en modifiez le\ncode n'oubliez jamais de mettre à jour sa version suivant la convention\n[semver](http://semver.org/). Sinon vous serez susceptible d'inclure des bugs dans\nles projets qui l'utilisent. Ce qui implique :\n\n- Mettre à jour le champ \"version\" de votre `package.json` (vous pouvez vous\n  aider des commandes `npm version patch`, `npm version minor` et `npm version major`).\n- Ajouter un tag git (`git tag -a 0.1.0 -m \"Initial release\"`).\n\nNPM est une excellente solution pour gérer les dépendences de votre projet, aussi\nbien pour vos outils de build, que pour vos assets front-end. Je pense qu'il est\nimportant de garder les choses simples, en commençant par utiliser un seul\ngestionnaire de dépendances, dans le cas où celui-ci n'intègre pas d'autres\nfonctionnalités que le téléchargement de modules.  \n\nBye bye Bower!\n\nPS: vous avez besoin d'un module qui n'a pas de package.json ? Pas de problème, [napa est là pour ça](/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/)\n","raw":"---\ndate: \"2014-05-06\"\ntitle: NPM comme package manager pour le front-end\ntags:\n  - npm\n  - package manager\n  - javascript\n  - css\nauthors:\n  - kewah\n---\n\nNPM, le package manager de Node.js, a grandement participé au succès de ce dernier.\nIl facilite la création, le partage et l'installation de modules.\nIl permet aux développeurs de suivre la [philosophie Unix](http://www.faqs.org/docs/artu/ch01s06.html)\noù chaque module fait une seule tâche (évite la complexité, facilite la réutilisation et les tests).\n\nCependant NPM ne se limite pas aux modules JavaScript. Il est en effet possible\nde publier tout type de fichier et c'est là que ça devient intéressant pour nos\nmodules front-end, qui peuvent aussi être CSS, HTML, fonts, etc.\n\n## Module JavaScript\n\nSi vous n'êtes pas familier(e) avec la création d'un module JavaScript, je vous\nconseille d'exécuter la commande `npm init` qui va vous aider à générer votre\n`package.json` (fichier de configuration utilisé par NPM). Le champ\n\"[main](https://www.npmjs.org/doc/json.html#main)\" définit le point d'entrée de\nvotre module.\n\n```json\n{\n  \"name\": \"putaindemodule\",\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\"\n}\n```\n\nDans un article précédent, il vous a été présenté le développement d'une application\nautour de [modules JavaScript avec Browserify](/posts/js/browserify-all-the-things/).\n\n## Module pour tout type de fichier\n\nC'est grâce au champ \"[files](https://www.npmjs.org/doc/json.html#files)\" que\nl'on peut définir la liste des fichiers que l'on va publier (autre que les fichiers JavaScript).\nVoici un exemple de `package.json` d'un module pour un système de grille CSS.\n\n```json\n{\n  \"name\": \"putaindegrid\",\n  \"version\": \"0.0.1\",\n  \"files\": [\n    \"grid.css\"\n  ]\n}\n```\n\nIl ne reste de plus qu'à le [publier](https://gist.github.com/coolaj86/1318304)\net à l'installer (`npm install putaindegrid --save`) dans vos différents projets\noù vous en aurez besoin. Votre fichier `grid.css` est accessible dans le dossier\n`node_modules/putaindegrid/grid.css`, vous pouvez donc l'inclure dans votre page\nHTML. (Ou l'`@import`er dans votre fichier Sass/Less principal.)\n\n```html\n<link href=\"node_modules/putaindegrid/grid.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n## Pourquoi NPM plutôt qu'un autre package manager ?\n\n- Il a déjà fait ses preuves comme package manager pour Node.js.\n- Pas besoin d'installer un nouvel outil, NPM étant installé avec Node.js, ce qui\névite un lot de bugs et de fichiers de configuration supplémentaires (un simple `package.json` suffit).\n- Et surtout, toutes les dépendances de votre projet peuvent être gérées via NPM:\nvotre tasks runner et ses plugins ([Gulp](/posts/js/introduction-gulp/), [Grunt](/posts/js/premiers-pas-avec-grunt/) & co), vos [modules JavaScript](/posts/js/browserify-all-the-things/), vos [tests](/posts/js/introduction-au-testing-js-front/)\net comme on vient de le voir, vos fichiers de style.\n\nDans le cas où vous n'auriez pas envie de passer par l'étape de publication\n(`npm publish`) pour diverses raisons, sachez qu'il est possible\nd'[installer](https://www.npmjs.org/doc/cli/npm-install.html) des packages qui ne\nsont pas publiés. Mon alternative favorite étant l'utilisation du namespace Github\n`npm install user/repo --save`.  \nCependant, même si vous ne publiez pas votre module, lorsque vous en modifiez le\ncode n'oubliez jamais de mettre à jour sa version suivant la convention\n[semver](http://semver.org/). Sinon vous serez susceptible d'inclure des bugs dans\nles projets qui l'utilisent. Ce qui implique :\n\n- Mettre à jour le champ \"version\" de votre `package.json` (vous pouvez vous\n  aider des commandes `npm version patch`, `npm version minor` et `npm version major`).\n- Ajouter un tag git (`git tag -a 0.1.0 -m \"Initial release\"`).\n\nNPM est une excellente solution pour gérer les dépendences de votre projet, aussi\nbien pour vos outils de build, que pour vos assets front-end. Je pense qu'il est\nimportant de garder les choses simples, en commençant par utiliser un seul\ngestionnaire de dépendances, dans le cas où celui-ci n'intègre pas d'autres\nfonctionnalités que le téléchargement de modules.  \n\nBye bye Bower!\n\nPS: vous avez besoin d'un module qui n'a pas de package.json ? Pas de problème, [napa est là pour ça](/posts/nodejs/napa-ou-comment-telecharger-package-napa-package-json/)\n","__filename":"posts/frontend/npm-comme-package-manager-pour-le-front-end/index.md","__url":"/posts/frontend/npm-comme-package-manager-pour-le-front-end/"}