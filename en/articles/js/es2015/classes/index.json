{"head":{"layout":"Post","comments":true,"date":"2015-12-05","title":"ES6, ES2015 : Classes","tags":["javascript","ES6","ES2015"],"authors":["magsout"],"translators":["MoOx"]},"body":"<p>Classes introduced by ES2015 are just some syntax sugar.\nThey don’t really bring anything.\nThat said, this can helps to improve code readability and make the code more\naccessible.</p>\n<h2 id=\"class-declaration\"><a class=\"markdownIt-Anchor\" href=\"#class-declaration\">#</a> Class declaration</h2>\n<p>Forget functions and prototypes, semantic is taking the relay as you will see in\nthe following example :</p>\n<pre><code class=\"language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  constructor(firstname, lastname) {\n    <span class=\"hljs-keyword\">this</span>.firstname = firstname;\n    <span class=\"hljs-keyword\">this</span>.lastname = lastname;\n  }\n\n  sayName() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${this.firstname}</span> <span class=\"hljs-subst\">${this.lastname}</span>`</span>\n  }\n}\n\n<span class=\"hljs-comment\">// instanciation</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-string\">\"Doe\"</span>)\n\n<span class=\"hljs-comment\">// call of the method sayName()</span>\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()) <span class=\"hljs-comment\">// John Doe</span></code></pre>\n<p>As a reminder, here is one\n<a href=\"https://gist.github.com/magsout/a876b2fa8240a987e523\">way to code</a>\nthis class in <code>es5</code> :</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">firstname, lastname</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!(<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">instanceof</span> User)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">\"Class constructors cannot be invoked without 'new'\"</span>)\n  }\n  <span class=\"hljs-keyword\">this</span>.firstname = firstname\n  <span class=\"hljs-keyword\">this</span>.lastname = lastname\n}\n\nUser.prototype.sayName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstname + <span class=\"hljs-string\">\" \"</span> + <span class=\"hljs-keyword\">this</span>.lastname\n}\n\n<span class=\"hljs-comment\">// instanciation</span>\n<span class=\"hljs-keyword\">var</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-string\">\"Doe\"</span>)\n\n<span class=\"hljs-comment\">// call of the method sayName()</span>\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()) <span class=\"hljs-comment\">// John Doe</span></code></pre>\n<h2 id=\"classes-expressions\"><a class=\"markdownIt-Anchor\" href=\"#classes-expressions\">#</a> Classes expressions</h2>\n<p>All methods should be written as simple function inside the class.\nYou might denote the nice way to write getter and setter :</p>\n<pre><code class=\"language-JS\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\n  constructor(firstname, lastname, type) {\n    <span class=\"hljs-keyword\">this</span>.firstname = firstname\n    <span class=\"hljs-keyword\">this</span>.lastname = lastname\n    <span class=\"hljs-keyword\">this</span>.type = type\n  }\n\n  <span class=\"hljs-comment\">// method</span>\n  sayName() {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${this.firstname}</span>  <span class=\"hljs-subst\">${this.lastname}</span>`</span>\n  }\n\n  <span class=\"hljs-comment\">// getter</span>\n  get role() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.type\n  }\n\n  <span class=\"hljs-comment\">// setter</span>\n  set role(value) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.type = value\n  }\n}\n\n<span class=\"hljs-comment\">// the `new` is mandatory to instanciate a class</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-string\">\"Doe\"</span>, <span class=\"hljs-string\">\"Contributor\"</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(user.sayName()) <span class=\"hljs-comment\">// John Doe</span>\n<span class=\"hljs-built_in\">console</span>.log(user.role) <span class=\"hljs-comment\">// Contributor</span>\nuser.role = <span class=\"hljs-string\">\"owner\"</span>\n<span class=\"hljs-built_in\">console</span>.log(user.role) <span class=\"hljs-comment\">// Owner</span></code></pre>\n<h2 id=\"inheritance\"><a class=\"markdownIt-Anchor\" href=\"#inheritance\">#</a> Inheritance</h2>\n<p>In order to have a class that inherite from another, we have the <code>extends</code>\nkeyword.</p>\n<p>Here is the an example :</p>\n<pre><code class=\"language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contributor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">User</span> </span>{\n  constructor(firstname, lastname, numberCommit) {\n\n    <span class=\"hljs-comment\">// keyword `super` is used to call the constructor of the parent class</span>\n    <span class=\"hljs-keyword\">super</span>(firstname, lastname)\n    <span class=\"hljs-keyword\">this</span>.numberCommit = numberCommit\n  }\n\n  sayNameWithCommit() {\n    <span class=\"hljs-comment\">// we can can also use `super` to call a method of the parent class</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">super</span>.sayName() + <span class=\"hljs-string\">\" \"</span> + <span class=\"hljs-keyword\">this</span>.sayNumberCommit()\n  }\n\n  sayNumberCommit() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.numberCommit\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> contributor = <span class=\"hljs-keyword\">new</span> Contributor(<span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-string\">'Smith'</span>, <span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(contributor.sayName())\n<span class=\"hljs-built_in\">console</span>.log(contributor.sayNumberCommit())</code></pre>\n<p><strong>Reminder: <a href=\"https://www.youtube.com/watch?v=wfMtDGfHWpA\">prefer inheritance to composition</a>.</strong></p>\n<h2 id=\"that-s-it\"><a class=\"markdownIt-Anchor\" href=\"#that-s-it\">#</a> That’s it</h2>\n<p>As you saw, all what you can do know was already possible\n<a href=\"https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1\">before</a>.</p>\n<p>We just have a more readable code that should be more easily maintainable.</p>\n<p>For now, you will need to use a transpiler like <a href=\"https://babeljs.io/\">babel</a>\nto be able to use classes.</p>\n<p>One last thing: when you are in a class context,\n<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>\nis enabled automatically.</p>\n","rawBody":"\nClasses introduced by ES2015 are just some syntax sugar.\nThey don't really bring anything.\nThat said, this can helps to improve code readability and make the code more\naccessible.\n\n## Class declaration\n\nForget functions and prototypes, semantic is taking the relay as you will see in\nthe following example :\n\n```js\nclass User {\n  constructor(firstname, lastname) {\n    this.firstname = firstname;\n    this.lastname = lastname;\n  }\n\n  sayName() {\n    return `${this.firstname} ${this.lastname}`\n  }\n}\n\n// instanciation\nconst user = new User(\"John\", \"Doe\")\n\n// call of the method sayName()\nconsole.log(user.sayName()) // John Doe\n```\n\nAs a reminder, here is one\n[way to code](https://gist.github.com/magsout/a876b2fa8240a987e523)\nthis class in `es5` :\n\n```js\nfunction User(firstname, lastname) {\n  if(!(this instanceof User)) {\n    throw new TypeError(\"Class constructors cannot be invoked without 'new'\")\n  }\n  this.firstname = firstname\n  this.lastname = lastname\n}\n\nUser.prototype.sayName = function() {\n  return this.firstname + \" \" + this.lastname\n}\n\n// instanciation\nvar user = new User(\"John\", \"Doe\")\n\n// call of the method sayName()\nconsole.log(user.sayName()) // John Doe\n```\n\n## Classes expressions\n\nAll methods should be written as simple function inside the class.\nYou might denote the nice way to write getter and setter :\n\n```JS\nclass User {\n  constructor(firstname, lastname, type) {\n    this.firstname = firstname\n    this.lastname = lastname\n    this.type = type\n  }\n\n  // method\n  sayName() {\n   return `${this.firstname}  ${this.lastname}`\n  }\n\n  // getter\n  get role() {\n    return this.type\n  }\n\n  // setter\n  set role(value) {\n    return this.type = value\n  }\n}\n\n// the `new` is mandatory to instanciate a class\nconst user = new User(\"John\", \"Doe\", \"Contributor\")\n\nconsole.log(user.sayName()) // John Doe\nconsole.log(user.role) // Contributor\nuser.role = \"owner\"\nconsole.log(user.role) // Owner\n```\n\n## Inheritance\n\nIn order to have a class that inherite from another, we have the `extends`\nkeyword.\n\nHere is the an example :\n\n```js\nclass Contributor extends User {\n  constructor(firstname, lastname, numberCommit) {\n\n    // keyword `super` is used to call the constructor of the parent class\n    super(firstname, lastname)\n    this.numberCommit = numberCommit\n  }\n\n  sayNameWithCommit() {\n    // we can can also use `super` to call a method of the parent class\n    return super.sayName() + \" \" + this.sayNumberCommit()\n  }\n\n  sayNumberCommit() {\n    return this.numberCommit\n  }\n}\n\nconst contributor = new Contributor('Jane', 'Smith', 10)\n\nconsole.log(contributor.sayName())\nconsole.log(contributor.sayNumberCommit())\n\n```\n\n**Reminder: [prefer inheritance to composition](https://www.youtube.com/watch?v=wfMtDGfHWpA).**\n\n## That's it\n\nAs you saw, all what you can do know was already possible\n[before](https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1).\n\nWe just have a more readable code that should be more easily maintainable.\n\nFor now, you will need to use a transpiler like [babel](https://babeljs.io/)\nto be able to use classes.\n\nOne last thing: when you are in a class context,\n[strict mode](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode)\nis enabled automatically.\n","raw":"---\ndate: \"2015-12-05\"\ntitle: \"ES6, ES2015 : Classes\"\ntags:\n  - javascript\n  - ES6\n  - ES2015\nauthors:\n  - magsout\ntranslators:\n  - MoOx\n---\n\nClasses introduced by ES2015 are just some syntax sugar.\nThey don't really bring anything.\nThat said, this can helps to improve code readability and make the code more\naccessible.\n\n## Class declaration\n\nForget functions and prototypes, semantic is taking the relay as you will see in\nthe following example :\n\n```js\nclass User {\n  constructor(firstname, lastname) {\n    this.firstname = firstname;\n    this.lastname = lastname;\n  }\n\n  sayName() {\n    return `${this.firstname} ${this.lastname}`\n  }\n}\n\n// instanciation\nconst user = new User(\"John\", \"Doe\")\n\n// call of the method sayName()\nconsole.log(user.sayName()) // John Doe\n```\n\nAs a reminder, here is one\n[way to code](https://gist.github.com/magsout/a876b2fa8240a987e523)\nthis class in `es5` :\n\n```js\nfunction User(firstname, lastname) {\n  if(!(this instanceof User)) {\n    throw new TypeError(\"Class constructors cannot be invoked without 'new'\")\n  }\n  this.firstname = firstname\n  this.lastname = lastname\n}\n\nUser.prototype.sayName = function() {\n  return this.firstname + \" \" + this.lastname\n}\n\n// instanciation\nvar user = new User(\"John\", \"Doe\")\n\n// call of the method sayName()\nconsole.log(user.sayName()) // John Doe\n```\n\n## Classes expressions\n\nAll methods should be written as simple function inside the class.\nYou might denote the nice way to write getter and setter :\n\n```JS\nclass User {\n  constructor(firstname, lastname, type) {\n    this.firstname = firstname\n    this.lastname = lastname\n    this.type = type\n  }\n\n  // method\n  sayName() {\n   return `${this.firstname}  ${this.lastname}`\n  }\n\n  // getter\n  get role() {\n    return this.type\n  }\n\n  // setter\n  set role(value) {\n    return this.type = value\n  }\n}\n\n// the `new` is mandatory to instanciate a class\nconst user = new User(\"John\", \"Doe\", \"Contributor\")\n\nconsole.log(user.sayName()) // John Doe\nconsole.log(user.role) // Contributor\nuser.role = \"owner\"\nconsole.log(user.role) // Owner\n```\n\n## Inheritance\n\nIn order to have a class that inherite from another, we have the `extends`\nkeyword.\n\nHere is the an example :\n\n```js\nclass Contributor extends User {\n  constructor(firstname, lastname, numberCommit) {\n\n    // keyword `super` is used to call the constructor of the parent class\n    super(firstname, lastname)\n    this.numberCommit = numberCommit\n  }\n\n  sayNameWithCommit() {\n    // we can can also use `super` to call a method of the parent class\n    return super.sayName() + \" \" + this.sayNumberCommit()\n  }\n\n  sayNumberCommit() {\n    return this.numberCommit\n  }\n}\n\nconst contributor = new Contributor('Jane', 'Smith', 10)\n\nconsole.log(contributor.sayName())\nconsole.log(contributor.sayNumberCommit())\n\n```\n\n**Reminder: [prefer inheritance to composition](https://www.youtube.com/watch?v=wfMtDGfHWpA).**\n\n## That's it\n\nAs you saw, all what you can do know was already possible\n[before](https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1).\n\nWe just have a more readable code that should be more easily maintainable.\n\nFor now, you will need to use a transpiler like [babel](https://babeljs.io/)\nto be able to use classes.\n\nOne last thing: when you are in a class context,\n[strict mode](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode)\nis enabled automatically.\n","__filename":"en/articles/js/es2015/classes.md","__url":"/en/articles/js/es2015/classes/"}