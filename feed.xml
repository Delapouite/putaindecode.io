<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Putain de code !]]></title>
        <description><![CDATA[Putain de code !]]></description>
        <link>http://putaindecode.fr</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 12 May 2015 05:42:24 GMT</lastBuildDate>
        <atom:link href="http://putaindecode.fr/feed.xml" rel="self" type="application/rss+xml"/>
        <language><![CDATA[fr]]></language>
        <category><![CDATA[code]]></category>
        <item>
            <title><![CDATA[Les utilitaires en ligne de commande]]></title>
            <description><![CDATA[<p>Avoir accès à ses utilitaires en ligne de commande (<a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a>) est un quotidien dans nos métiers et un avantage indéniable. Ce n’est pas nouveau et cela existe depuis la nuit des temps. Tout utilisateur
d’Unix voue un culte particulier à son terminal.</p>
<p>J’ai récemment eu à développer un utilitaire en Node.js/iojs, j’ai donc voulu avec cet article déblayer un peu le terrain
et présenter quelques utilitaires très pratiques.</p>
<p>Deux postulats avant de commencer :</p>
<ul>
<li>Pourquoi JavaScript ? En cohérence avec le workflow que j’utilise.</li>
<li>Cet article n’a pas pour but d’apprendre à écrire du JavaScript avec Node.js/iojs.</li>
</ul>
<h2 id="hello-world">
      <a class="putainde-Title-anchor" href="#hello-world">#</a>
      Hello world
    </h2><p>Avant de commencer à coder, il va tout d’abord falloir créer deux fichiers qui seront nécessaires et obligatoires :</p>
<pre><code class="lang-console"><span class="hljs-comment">// création du dossier</span>
$ <span class="hljs-keyword">mkdir</span> putaindecode-<span class="hljs-keyword">cli</span> &amp;&amp; <span class="hljs-keyword">cd</span> putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// création de index.js</span>
$ touch index.js

<span class="hljs-comment">// création de package.json</span>
$ touch package.json
</code></pre>
<p>Le fichier <code>index.js</code> va se présenter comme ceci :</p>
<pre><code><span class="hljs-shebang">#!/usr/bin/env node</span>
<span class="hljs-comment">// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`</span>

<span class="hljs-comment">// notre fameux hello world</span>
console.log(<span class="hljs-string">"Hello world"</span>)
</code></pre><p>Pour notre fichier <code>package.json</code>, deux méthodes possibles pour l’écrire, soit en faisant <code>npm init</code> puis suivre les instructions, soit adapter ce JSON :</p>
<pre><code class="lang-console">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"putaindecode-cli"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.1.0"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Putaindecode cli"</span></span>,
  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[
    <span class="hljs-string">"cli"</span>,
    <span class="hljs-string">"npm"</span>
  ]</span>,
  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"magsout"</span></span>,
  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"MIT"</span></span>,
  "<span class="hljs-attribute">repository</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"git"</span></span>,
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode/putaindecode-cli.git"</span>
  </span>}</span>,
  "<span class="hljs-attribute">engines</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">node</span>": <span class="hljs-value"><span class="hljs-string">"&gt;=0.10"</span>
  </span>}</span>,
  "<span class="hljs-attribute">homepage</span>":<span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli"</span>
  <span class="hljs-string">"bugs"</span>: {
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli/issues"</span>
  </span>}</span>,
  "<span class="hljs-attribute">files</span>": <span class="hljs-value">[
    <span class="hljs-string">"index.js"</span>
  ]</span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">devDependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">bin</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">putaindecode</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span>
  </span>}
</span>}
</code></pre>
<p>La ligne importante à ne surtout pas oublier :</p>
<pre><code class="lang-console"><span class="hljs-string">"bin"</span>: {
  <span class="hljs-string">"putaindecode-cli"</span>: <span class="hljs-string">"index.js"</span>
}
</code></pre>
<p>Elle permettra de déterminer le script à exécuter lorsque la commande <code>putaindecode-cli</code> sera lancée.</p>
<p>Si on vulgarise un peu le principe, en installant le script, le fichier <code>index.js</code> sera renommé en <code>putaindecode-cli.js</code> et sera copié dans le répertoire adéquat (cela dépend de l’OS).</p>
<p>Lorsque la commande <code>putaindecode-cli</code> sera exécutée, le shell va chercher le fichier exécutable en utilisant les répertoires listés dans la variable PATH.</p>
<p>Si on suit ce raisonnement, l’installation d’un script écrasera automatiquement l’ancienne version ou tout script de même nom.</p>
<p>Pour s’assurer qu’il n’existe pas d’autres commandes portant le même nom, il est conseillé d’utiliser la commande : <code>which putaindecode-cli</code> qui ne retournera rien s’il n’y a aucun résultat :</p>
<pre><code class="lang-console">#putaindecode-<span class="hljs-keyword">cli</span> ne retourne aucun résultat
$ <span class="hljs-keyword">which</span> putaindecode-<span class="hljs-keyword">cli</span>

#node <span class="hljs-keyword">est</span> installé et accessible au path suivant
$ <span class="hljs-keyword">which</span> node
  /usr/<span class="hljs-keyword">local</span>/bin/node
</code></pre>
<h2 id="installation-du-script">
      <a class="putainde-Title-anchor" href="#installation-du-script">#</a>
      Installation du script
    </h2><p>Afin de vérifier que le script fonctionne correctement, il suffit tout simplement d’exécuter dans le répertoire la commande : <code>./index.js</code>.</p>
<p>Une erreur de droit ? Un petit chmod pour arranger ça : <code>chmod +x index.js</code>.</p>
<p>À ce stade, si tout fonctionne bien, <code>Hello World</code> va s’afficher.</p>
<p>Par contre, exécuter notre script de la sorte n’est pas très pratique, d’autant plus qu’il sera nécessaire de connaître à chaque fois le chemin vers le fichier.</p>
<p>Il serait beaucoup plus simple de pouvoir exécuter le script comme une commande. Comme pour tout package npm, cela se fait avec <code>npm install</code>.</p>
<pre><code class="lang-console"><span class="hljs-comment">// installation en global du script</span>
$ npm install -<span class="hljs-keyword">g</span>

<span class="hljs-comment">// exécution de la commande</span>
$ putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// résultat de la commande</span>
Hello world
</code></pre>
<p>Le script est maintenant accessible partout sur l’OS grâce à la commande <code>putaindecode-cli</code>. L’installation en global n’est pas absolument pas nécessaire, tout dépend de l’intérêt de votre script. Il est d’ailleurs souvent préférable de l’installer en local dans un projet avec <code>--save</code> ou <code>--save-dev</code>.</p>
<h2 id="installation-des-scripts-de-base">
      <a class="putainde-Title-anchor" href="#installation-des-scripts-de-base">#</a>
      Installation des scripts de base
    </h2><p>La puissance de <code>NPM</code> provient de son nombre impressionnant de packages mis à disposition.</p>
<p>Pour gagner du temps et éviter d’avoir à recoder la roue. Le script <code>putaindecode-cli</code> va avoir besoin de trois choses :</p>
<ul>
<li>une gestion des commandes (commande, argument, aide)</li>
<li>une gestion des couleurs (notice, error, warning)</li>
<li>une capacité à stopper proprement notre code.</li>
</ul>
<h3 id="commander">
      <a class="putainde-Title-anchor" href="#commander">#</a>
      <code>commander</code>
    </h3><p>Pour les commandes avec en prime la gestion des arguments et de l’aide, <a href="https://github.com/tj/commander">commander</a> est tout a fait adapté et répondra pratiquement à tous nos besoins.</p>
<p>Il est simple d’utilisation et très bien maintenu.</p>
<p>Voici un exemple de ce qu’on peut faire :</p>
<pre><code class="lang-js"><span class="hljs-comment">/* Default */</span>
program
  .version(pkg.version)

<span class="hljs-comment">/* command */</span>
program
  .command(<span class="hljs-string">"command"</span>)
  .alias(<span class="hljs-string">'c'</span>)
  .description(<span class="hljs-string">"   command does something"</span>)
  .option(<span class="hljs-string">"-v, --verbose"</span>, <span class="hljs-string">"Verbose"</span>)
  .option(<span class="hljs-string">"-f, --force"</span>, <span class="hljs-string">"Force installation"</span>)
  .action(commandAction)
  .on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Example:"</span>)
    <span class="hljs-built_in">console</span>.log();
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command does something"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  });

<span class="hljs-comment">/* help */</span>
program.on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Examples:"</span>)
  <span class="hljs-built_in">console</span>.log();
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command do something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     Force command does something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command -f"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
});

program.parse(process.argv)

<span class="hljs-comment">/* help by default */</span>
<span class="hljs-keyword">if</span> (!program.args.length) program.help()
</code></pre>
<h3 id="chalk">
      <a class="putainde-Title-anchor" href="#chalk">#</a>
      <code>chalk</code>
    </h3><p><em>Null</em> besoin de faire un cours sur les couleurs, mais l’affichage d’une notice est bien plus pertinent avec sa couleur associée. C’est à ce moment qu’entre en jeu <a href="https://github.com/sindresorhus/chalk">chalk</a>. Relativement simple à mettre en place et à utiliser :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chalk'</span>)

<span class="hljs-comment">/* var */</span>
<span class="hljs-keyword">var</span> error   = chalk.bold.red
<span class="hljs-keyword">var</span> warn    = chalk.yellow
<span class="hljs-keyword">var</span> success = chalk.green
<span class="hljs-keyword">var</span> notice  = chalk.blue

<span class="hljs-comment">/* code */</span>
<span class="hljs-built_in">console</span>.log(warn(<span class="hljs-string">'No command'</span>))
<span class="hljs-built_in">console</span>.log(notice(<span class="hljs-string">"file modified !"</span>))
</code></pre>
<h3 id="exit">
      <a class="putainde-Title-anchor" href="#exit">#</a>
      <code>exit</code>
    </h3><p>Peu importe comment s’exécute son code, il est important de bien savoir maitriser l’arrêt de son script. Pour ça, <code>process.exit()</code> nous sera bien utile.</p>
<p>Dans le cas d’une erreur, la valeur de <code>exit</code> doit systématiquement être supérieure à 0, et donc bien naturellement en cas de succès, elle doit être égale à 0.</p>
<p>Voici une <a href="http://www.virtsync.com/c-error-codes-include-errno">liste des valeurs</a> de <code>exit</code> et de leurs correspondances.</p>
<h2 id="thanks-god-for-our-terminal">
      <a class="putainde-Title-anchor" href="#thanks-god-for-our-terminal">#</a>
      Thanks god for our terminal
    </h2><p>Si vous souhaitez voir quelques exemples de projets avec des commandes et des mises en situations intéressantes, allez faire un tour sur ces projets :</p>
<ul>
<li><a href="https://github.com/cssnext/cssnext/blob/master/bin/cssnext.js">cssnext</a></li>
<li><a href="https://github.com/sindresorhus/trash/blob/master/cli.js">trash</a></li>
</ul>
<p>Je vous invite également à visionner la <a href="http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html">vidéo</a> de <a href="https://twitter.com/clementd">Clement Delafargue</a> qui a fait une présentation sur le sujet en début d’année.</p>
<p>À partir de là on dispose d’une bonne base pour refaire le monde et accroître la flemme du développeur que l’on est en automatisant tout plein de tâches.</p>
]]></description>
            <link>http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/</guid>
            <pubDate>Tue, 12 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Utiliser React en moteur de templates]]></title>
            <description><![CDATA[<p>Vous connaissez probablement tous des moteurs de templates.
En JavaScript nous avons Handlebars, Jade, EJS, Slim…
Tous ces projets partent de bonnes intentions mais à l’utilisation,
on peut sentir des limitations et donc de l’insatisfaction.</p>
<p>Utiliser Handlebars par exemple, c’est un peu devoir coder tout un tas de helpers
pour gérer une partie de votre affichage, ça peut vite devenir lourd.
Être restreint à une syntaxe limitée par choix est un peu frustrant.
Quand c’est pas ça, c’est la syntaxe du moteur qui va être lourde.</p>
<p>On peut en venir à regretter PHP. Faut avouer que ce langage était plutôt simple
à utiliser en tant que moteur de template.
Efficace et pas de restrictions. On trouve même parfois des <code>mysql_query()</code>
dans des templates…</p>
<p>Blague à part, nous cherchions des langages pour refaire une partie de notre site
puisque nous n’étions pas vraiment satisfaits du processus actuel
(anciennement Handlebars, puis Jade).</p>
<p>Mais finalement, pourquoi ne pas rester avec du JavaScript, purement et simplement ?</p>
<p>C’est ce que nous avons fait avec React et JSX qui sont de plus en plus utilisés.
La syntaxe est plutôt libératrice.</p>
<p>Pour ceux qui ne connaissent pas JSX, il s’agit d’un superset de JavaScript qui
supporte une syntaxe XML transformé en appel de fonctions JavaScript.
Il faut dire que le XML a beau être verbeux, pour définir des
éléments ayant des propriétés et des enfants, on a pas vraiment fait plus
lisible et clair sur ce point. Le HTML est plutôt simple à prendre en main c’est
certain. Les méthodes de rendu de React (ce qui va nous intéresser) sont très proches
de l’HTML.</p>
<p>Ceux qui ont utilisé JSX (bien qu’ayant pu avoir des nausées au premier contact)
avouent souvent qu’ils ont fini par aimer cette petite syntaxe créée par Facebook qui
fonctionne très bien avec React.</p>
<p>Du coup, si on utilisait ça pour faire de simple templates et non pas des composants
d’interface utilisateur dynamiques ? Qui peut le plus peut le moins (quoi qu’en
fait, des templates, c’est un peu des composants d’interface).</p>
<h2 id="exemple-de-template-react-jsx">
      <a class="putainde-Title-anchor" href="#exemple-de-template-react-jsx">#</a>
      Exemple de template React/JSX
    </h2><p>Si vous ne savez pas trop ce qu’est React, nous vous recommandons de lire
notre <a href="/posts/js/introduction-a-reactjs/">introduction à React</a>.</p>
<p>Dans notre cas, on ne va pas spécialement bénéficier de certaines de ses forces,
mais ça fera très bien le job pour notre besoin.</p>
<p>Nous n’aborderons pas dans le détail la syntaxe React/JSX, ni ES6, pour rester
focalisés sur la finalité (on a prévu des articles à ce propos, en attendant
  <a href="http://babeljs.io/docs/learn-es6/">voici de quoi vous occuper avec ES6</a>).</p>
<p><em>Attention, pour ceux qui sont encore sur des plugins jQuery, ça risque de vous
piquer les yeux</em> 😭.</p>
<p><a name="es6-class"></a></p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

export default class PostTemplate extends Component {

  static displayName = <span class="hljs-string">"PostTemplate"</span>

  render() {
    return (
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;{this.props.pageTitle}&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;article className=<span class="hljs-string">"org-Post"</span>&gt;
            &lt;header className=<span class="hljs-string">"org-Post-header"</span>&gt;
              &lt;h1&gt;{this.props.pageTitle}&lt;/h1&gt;
            &lt;/header&gt;
            &lt;div
              className=<span class="hljs-string">"org-Post-content"</span>
              dangerouslySetInnerHTML={{__html: this.props.pageContent}}
            /&gt;
          &lt;/article&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    )
  }
}
</code></pre>
<p>Ce que vous voyez c’est bien du JavaScript. Un peu amélioré via JSX, on ne va
pas le nier (dans notre cas, on gère tout ça de manière transparente avec
<a href="http://babeljs.io/">babel(-node)</a>).</p>
<p>Ça ressemble drôlement à de l’HTML et c’est ça qui est appréciable pour nous.
Vous noterez que l’attribut pour définir une classe HTML est <code>className</code> puisque
React est en JavaScript et que le mot <code>class</code> est réservé
(cf. <a href="#es6-class">la définition en ES6 de la classe</a>).</p>
<p>En même temps ce qui est cool, c’est qu’on reste dans du JavaScript.</p>
<p>On peut donc utiliser toutes nos bibliothèques préférées via <em>npm</em> pour l’affichage
(exemple : <code>momentjs</code>), ou simplement des boucles via les méthodes de parcours de
tableau tel que <code>forEach()</code> ou <code>map()</code> en appelant d’autres composants.</p>
<p>Ci-dessous vous trouverez un exemple plus complexe avec une page pour la liste
des posts et quelques composants.
Les balises qui ressemblent à du HTML et qui commencent par une majuscule sont liées à des
composants qui doivent être définis (dans notre cas importés).
C’est une particularité de React.</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">import</span> Html <span class="hljs-keyword">from</span> <span class="hljs-string">"../Html"</span>
<span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">"../Head"</span>
<span class="hljs-keyword">import</span> Body <span class="hljs-keyword">from</span> <span class="hljs-string">"../Body"</span>
<span class="hljs-keyword">import</span> PostsList <span class="hljs-keyword">from</span> <span class="hljs-string">"../PostsList"</span>

export default class Posts extends Component {

  static displayName = <span class="hljs-string">"Posts"</span>

  render() {
    return (
      &lt;Html&gt;
        &lt;Head title={this.props.file.title} /&gt;
        &lt;Body&gt;
          &lt;h1&gt;{this.props.file.title}&lt;/h1&gt;
          &lt;PostsList
            posts={
              this.props.collections.posts
                .filter((item) =&gt; {
                  /*
                    ce que vous voulez pour filtrer votre collection
                    eg:
                    return !item.draft
                  */
                }
              }
          /&gt;
        &lt;/Body&gt;
      &lt;/Html&gt;
    )
  }
}
</code></pre>
<p>Voici deux exemples de composants utilisés ci-dessus :</p>
<h3 id="head">
      <a class="putainde-Title-anchor" href="#head">#</a>
      Head
    </h3><pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

export default class Head extends Component {

  static displayName = <span class="hljs-string">"Head"</span>

  render() {
    return (
      &lt;head&gt;
        &lt;meta charSet=<span class="hljs-string">"utf-8"</span> /&gt;
        &lt;meta httpEquiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"IE=Edge"</span> /&gt;
        &lt;meta
          name=<span class="hljs-string">"viewport"</span>
          content=<span class="hljs-string">"width=device-width, initial-scale=1.0, minimal-ui"</span>
        /&gt;
        &lt;title&gt;{this.props.title}&lt;/title&gt;
        &lt;link
          rel=<span class="hljs-string">"stylesheet"</span>
          href=<span class="hljs-string">"/index.css"</span>
        /&gt;
        &lt;link
          rel=<span class="hljs-string">"alternate"</span>
          href=<span class="hljs-string">"/feed.xml"</span>
          title={this.props.title}
          type=<span class="hljs-string">"application/atom+xml"</span>
        /&gt;
        {this.props.children}
      &lt;/head&gt;
    )
  }
}
</code></pre>
<h3 id="body">
      <a class="putainde-Title-anchor" href="#body">#</a>
      Body
    </h3><pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component, PropTypes} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"../Header"</span>
<span class="hljs-keyword">import</span> Footer <span class="hljs-keyword">from</span> <span class="hljs-string">"../Footer"</span>
<span class="hljs-keyword">import</span> GoogleAnalytics <span class="hljs-keyword">from</span> <span class="hljs-string">"../Analytics"</span>

export default class Body extends Component {

  static displayName = <span class="hljs-string">"Body"</span>

  render() {
    return (
      &lt;body&gt;

        &lt;Header /&gt;

        &lt;div className=<span class="hljs-string">"Main"</span>&gt;
          {this.props.children}
        &lt;/div&gt;

        &lt;Footer /&gt;

        &lt;script src={<span class="hljs-string">"/index.js"</span>}&gt;&lt;/script&gt;

        &lt;GoogleAnalytics /&gt;

      &lt;/body&gt;
    )
  }
}
</code></pre>
<p>Bon c’est bien beau mais comment je gère l’affichage du composant initial
finalement (le parent) ?</p>
<h2 id="comment-utiliser-un-template-react-jsx">
      <a class="putainde-Title-anchor" href="#comment-utiliser-un-template-react-jsx">#</a>
      Comment utiliser un template React/JSX ?
    </h2><p>C’est bien simple. Dans notre cas, pas besoin de React côté client. On doit gérer
ça côté « serveur » (je mets ça entre guillemets puisque dans notre cas précis, c’est
pour générer un site statique, et c’est donc sur une machine quelconque que la
génération se fait).</p>
<p>Voilà de quoi effectuer le rendu de nos composants vers du bon vieux HTML (car c’est la finalité
d’un <em>moteur de template</em>).</p>
<pre><code class="lang-js">import react from &quot;react&quot;
import markdownify from &quot;./markdown-parser&quot;
// je vous conseille marked pour rendre du markdown
// c&#39;est ce que nous utilisons pour rendre nos pages à l&#39;heure où j&#39;écris ce post

const reactClass = require(&quot;./template/PostTemplate&quot;)
const component = new (react.createFactory(reactClass))({
  // ici on passe nos &quot;props&quot; react
  pageTitle: &quot;Test&quot;,
  pageContent: markdownify(&quot;Imaginons du **markdown** parsé&quot;),
  // vous pouvez bien entendu rajouter d&#39;autres choses
  collections: {
    posts: [
      //...
    ]
  }
})

let html
try {
  html = react.renderToStaticMarkup(component)
}
catch (err) {
  // Vous devrez gérer votre exception selon votre environnement
  // si c&#39;est pour un test on peut simplement ne pas utiliser
  // try/catch, ça nous pètera à la gueule et c&#39;est tant mieux
  throw err
}

// maintenant vous faites ce que vous voulez de votre string html !
// ex: require(&quot;fs&quot;).writeFile(...)
</code></pre>
<p>La méthode intéressante de React est dans notre cas <code>renderToStaticMarkup()</code> qui
va nous générer un HTML qui va bien.</p>
<p>Pour aller plus loin on pourrait décider d’utiliser <code>renderToString()</code> plutôt que
<code>renderToStaticMarkup()</code> afin de pouvoir faire prendre le relais à ReactJS côté client
mais là <a href="/posts/js/reactjs-et-rendu-serverside/">le niveau de complexité est différent</a>.</p>
<p>Pour la petite anecdote, notre site utilise actuellement <a href="http://www.metalsmith.io/">metalsmith</a>,
une petite bibliothèque simple mais qui permet par son API de faire des choses sympas.</p>
<p>J’ai donc codé <a href="https://github.com/search?q=user%3AMoOx+metalsmith">quelques plugins metalsmith</a>
dont un <a href="https://github.com/MoOx/metalsmith-react">metalsmith-react</a> à l’occasion.</p>
<p>N’hésitez pas à consulter
<a href="https://github.com/putaindecode/putaindecode.fr">le code source de notre site</a>
pour faire des découvertes sympas.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/</guid>
            <pubDate>Thu, 07 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Implémenter Flux]]></title>
            <description><![CDATA[<p>Si vous n’avez pas encore lu
<a href="http://putaindecode.fr/posts/js/flux-qu-est-ce-c-est/">l’introduction à flux</a>,
n’hésitez pas à jeter un œil avant de lire ce post.</p>
<p>Une des choses importantes avec Flux, et pourtant pas évidentes après lecture
<a href="https://github.com/facebook/flux/tree/master/examples/">des exemples officiels</a>,
c’est que les stores doivent être des instances, et non des singletons que
les composants récupèrent en dépendance directe.</p>
<p>La raison de cette nécessité, c’est la possibilité de servir une page
pre-rendue sur le serveur. En soi, vous devez impérativement amorcer votre
dispatcher et vos stores dans le scope de la requête, ou vos utilisateurs
se retrouveront avec des stores remplis de data ne leur appartenant pas.</p>
<p>Puisque l’intérêt d’une solution comme react dans le cadre du server-side
rendering est d’utiliser les mêmes composants que sur le client, il faut
que notre approche soit convenable sur nos deux environements.</p>
<p>La question dès lors est «comment passer les stores à nos composants react
maintenant qu’ils ne sont plus des dépendances directes ?».</p>
<p>On va les passer via les <code>props</code> de parent à enfant ? lolnope.
La plupart de nos composants n’auront pas conscience de la présence de ces
stores, et seront utilisés dans différents contextes. Et c’est justement
l’API <code>context</code> que nous allons utiliser.</p>
<p>Cette API est assez simple, en soi, le <code>context</code> d’un composant est construit
au fur et à mesure que ses ancêtres décident d’y ajouter de la data.</p>
<p>Exemple simple :</p>
<pre><code class="lang-javascript">import React, {Component, PropTypes} from "react"

class App extends Component {

  // on définit les types de ce que l'on souhaite passer dans
  // le contexte
  static childContextTypes = {
    foo: PropTypes.string,
  }

  // on crée une méthode qui retourne ce contexte
  getChildContext() {
    return {
      foo: this.props.foo,
    }
  }

  render() {
    return (
      &lt;div className="putainde-App"&gt;
        &lt;Container /&gt;
      &lt;/div&gt;
    )
  }
}

class Container extends Component {

  // les contextes sont *merged*, ce qui nous permet de le construire
  // sans se soucier du niveau auquel sera notre composant.
  static childContextTypes = {
    bar: PropTypes.string,
  }

  getChildContext() {
    return {
      bar: "oh hai",
    }
  }

  render() {
    return (
      &lt;div className="putainde-Container"&gt;
        &lt;IntermediaryComponent /&gt;
      &lt;/div&gt;
    )
  }

}

// ce composant n'a pas besoin de savoir que ses enfants on besoin
// de certaines propriétés du contexte
class IntermediaryComponent extends Component {
  render() {
    return (
      &lt;Content /&gt;
    )
  }
}

class Content extends Component {

  // pour chaque composant utilisant des propriétés du contexte,
  // on stipule ce dont on a besoin
  static contextTypes = {
    foo: PropTypes.string,
    bar: PropTypes.string,
  }

  render() {
    return (
      &lt;div className="putainde-Content"&gt;
        &lt;div className="putainde-Content-line"&gt;
          &lt;strong&gt;foo&lt;/strong&gt;: {this.context.foo}
        &lt;/div&gt;
        &lt;div className="putainde-Content-line"&gt;
          &lt;strong&gt;bar&lt;/strong&gt;: {this.context.bar}
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }

}

React.render(
  &lt;App foo={Date.now()} /&gt;,
  document.getElementById("App")
)
</code></pre>
<p>Cela nous donne cet output :
<a href="http://jsbin.com/zitohibaze/1/">http://jsbin.com/zitohibaze/1/</a></p>
<p>Grâce à cette API, on peut créer des composants isolés, et dont les
composants parents n’auront pas nécessairement besoin de connaître le
contexte.</p>
<p>L’idée, pour en revenir à Flux, c’est de passer notre dispatcher dans
ce contexte, et de placer les stores dans le dispatcher au moment de
l’amorce de l’app.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> dispatcher = <span class="hljs-keyword">new</span> Dispatcher()

dispatcher.registerStore(<span class="hljs-keyword">new</span> SomeStore())
dispatcher.registerStore(<span class="hljs-keyword">new</span> SomeOtherStore())

React.render(
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> <span class="hljs-attribute">dispatcher</span>=<span class="hljs-value">{dispatcher}</span> /&gt;</span>,
  document.getElementById("App")
)</span>
</code></pre>
<p>Désormais, pour avoir une API décente pour récuperer les données des stores,
on a deux principales solutions:</p>
<ul>
<li>utiliser un mixin</li>
<li>utiliser un higher-order component</li>
</ul>
<p>Puisque la direction que prend l’API de React, à terme, est de ne plus
fournir de mixins, et de laisser au TC39 le temps de prendre la bonne
décision sur la façon dont JavaScript traitera la composition ; il semble
plus adéquat d’utiliser un higher-order component. Cela aura en plus
l’avantage de rendre le composant récupérant les données <em>stateless</em>.</p>
<p>Ce genre d’API ressemble à ça :</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComponentWithData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  static stores = {
    <span class="hljs-comment">// nom du store: nom de la prop souhaitée</span>
    MyStore: <span class="hljs-string">"my_store"</span>,
  }

  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
        {/* la data est passée via les props*/}
        {this.props.my_store.foo}
      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    )</span>
  }
}

<span class="hljs-comment">// storeReceiver wrap `ComponentWithData` dans un higher-order component</span>
<span class="hljs-comment">// et se charge de récupérer le store dans le contexte pour les passer</span>
<span class="hljs-comment">// dans les props de `ComponentWithData`</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> storeReceiver(ComponentWithData)
</code></pre>
<p>Enfin, avec cette approche, les action creators que l’on voit dans les
exemples de flux ne peuvent plus garder la même forme, puisqu’il ne doivent
plus avoir le dispatcher comme dépendance directe (ce dernier étant une
instance). Du coup, ce sont désormais des fonctions pures :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> PostActions = {
  getPost(slug) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_GET,
      slug: slug,
    }
  },
  receivePost(res) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_RECEIVE,
      res,
    }
  },
  error(res) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_ERROR,
      res,
    }
  },
}
</code></pre>
<p>et nos composants utilisent :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React, {Component, PropTypes} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> PostActions <span class="hljs-keyword">from</span> <span class="hljs-string">"actions/PostActions"</span>

class MyComponent extends Component {

  static contextTypes = {
    dispatcher: PropTypes.object,
  }

  static propTypes = {
    slug: PropTypes.string,
    title: PropTypes.title,
  }

  handleClick() {
    this.context.dispatcher.dispatch(
      PostActions.getPost(this.props.slug)
    )
  }

  render() {
    return (
      &lt;button
        onClick={() =&gt; this.handleClick()}&gt;
        {this.props.title}
      &lt;/button&gt;
    )
  }
}
</code></pre>
<p>Pour résumer, les avantages de cette approche sont :</p>
<ul>
<li>un meilleur découplage</li>
<li>une isolation solide des composants</li>
<li>la possibilité de pre-render sur le serveur</li>
<li>une testabilité accrue, puisqu’il est simple d’utiliser un mock ou des
instances crées pour le test dans le contexte de nos composants.</li>
</ul>
<p>Bisous bisous.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/implementer-flux/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/implementer-flux/</guid>
            <pubDate>Fri, 01 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[HATEOAS, le Graal des développeurs d'API]]></title>
            <description><![CDATA[<p>Nous vivons aujourd’hui dans un monde où tout devient service. Twitter, Facebook, Google Drive, GitHub, tout le monde y va de sa petite API pour que nous, geeks, puissions profiter pleinement des moult fonctionnalités offertes par ces plateformes. Qu’entend-on par service ? Comment les rendre disponibles facilement et intelligemment ? On va essayer d’y répondre ! </p>
<h2 id="les-webservices">
      <a class="putainde-Title-anchor" href="#les-webservices">#</a>
      Les webservices
    </h2><p>Rappelons juste, pour mettre tout le monde d’accord, ce qui se passe pendant une simple navigation web.</p>
<ol>
<li>Tu tapes l’adresse de ton site préféré</li>
<li>Le navigateur envoie la requête</li>
<li>Le navigateur reçoit du code HTML et l’interprète, pour voir s’il faut charger d’autres choses</li>
<li>Le navigateur relance les requêtes pour charger les images, scripts et CSS</li>
<li>Le navigateur reçoit toutes les ressources et te les affiche dans sa fenêtre.</li>
</ol>
<p>On parle donc de contenu qu’il faut afficher pour les êtres humains, avec des images, des styles et des comportements qui facilitent l’ergonomie et te permettent de dire <em>“wouaouw, ce site est vraiment beau, cool et pratique !”</em></p>
<p>Imaginons maintenant la même chose, mais à destination des programmes, qui ne consomment que de l’information brute et structurée, on ne va donc plus s’encombrer avec les CSS, les JS, et autres gifs animés (oui, les gifs animés, ça les fait pas marrer les machines…) ! On va se concentrer sur le contenu échangé et sur les moyens utilisés pour optimiser ces échanges.</p>
<h3 id="la-premiere-ecole-soap">
      <a class="putainde-Title-anchor" href="#la-premiere-ecole-soap">#</a>
      La première école : SOAP
    </h3><p>Imaginons deux programmes qui veulent discuter en passant par le web. Dans les années 90, des mecs super brillants se sont dit : <em>“On va se baser sur le XML pour faire communiquer nos programmes sur le web”</em>.
L’approche est assez logique et ingénieuse. Tout d’abord, les deux parties (le client et le serveur) se partagent une notice d’utilisation : la WSDL (Web Service Description Language), qui est un document XML décrivant toutes les méthodes qui peuvent être appelées par le client sur le serveur, avec les structures de données disponibles pour ces échanges.
Le client prépare donc sa demande et l’enveloppe dans une grosse structure XML contenant toutes les métadonnées (méthode appelée, signature numérique, etc.). Une fois que le serveur a reçu cette demande, il la traite et répond aussi dans une grosse enveloppe XML.</p>
<p>Tu viens de comprendre le SOAP (Service Oriented Application Protocol), aucun rapport avec une quelconque savonnette du coup. Cette méthode a fait ses preuves puisqu’elle fait tourner encore aujourd’hui des milliers de systèmes très complexes et très fiables.</p>
<h3 id="la-maison-d-en-face-rest">
      <a class="putainde-Title-anchor" href="#la-maison-d-en-face-rest">#</a>
      La maison d’en face : REST
    </h3><p>Plusieurs années ont passées et les esprits ont évolué. On a commencé à entendre des grandes déclarations comme : <em>“Le SOAP c’est vraiment lourdingue !”</em>, <em>“Le protocole HTTP est sous-exploité !”</em> ou encore <em>“Les enveloppes XML et les WSDL ? Merci bien !”</em> et c’est à ce moment-là qu’on a donné un acronyme bidon pour décrire le protocole HTTP sans vraiment le nommer : REST (REpresentational State Transfert). Pour l’anecdote, tout le monde s’accorde à dire que cet acronyme ne veut rien dire ;)</p>
<p>Le but du jeu est donc d’utiliser au maximum les possibilités du protocole HTTP, les verbes, les URL et les codes retours pour décrire des API de la manière la plus fidèle possible. On a donc gagné en simplicité et la communication entre machines se veut désormais à la portée de tous. Je reviendrai en détail sur le protocole HTTP un peu plus tard.</p>
<h3 id="un-partout-balle-au-centre">
      <a class="putainde-Title-anchor" href="#un-partout-balle-au-centre">#</a>
      Un partout : balle au centre
    </h3><p>Je tiens à remettre les choses au clair. On entend beaucoup trop souvent : <em>“Fais du REST, SOAP c’est nul”</em>. Il y a en effet clairement un effet de mode ! Les API REST pullulent et sont vraiment très pratiques. Toutefois, dans les gros systèmes nécessitant du RPC ou encore de la signature numérique, pour les échanges de données médicales par exemple, le contrat WSDL et la rigueur du XML sont clairement des alliés ! </p>
<h2 id="alors-comme-ca-http-ca-fait-tout">
      <a class="putainde-Title-anchor" href="#alors-comme-ca-http-ca-fait-tout">#</a>
      Alors comme ça, HTTP ça fait tout ?
    </h2><p>Il y a un type qui s’appelle Leonard Richardson et qui a mis en place un <a href="http://martinfowler.com/articles/richardsonMaturityModel.html">modèle de maturité</a> pour qualifier les API webservice.</p>
<h3 id="niveau-0">
      <a class="putainde-Title-anchor" href="#niveau-0">#</a>
      Niveau 0
    </h3><p>C’est le minimum acceptable dans la communication HTTP :</p>
<ul>
<li>Toutes les requêtes sont envoyées à la même URL, quelle que soit la demande.</li>
<li>Toutes les requêtes sont envoyées avec le verbe POST.</li>
<li>Quel que soit le type de retour (donnée ou erreur), le code HTTP retourné par le serveur sera toujours 200 (OK, tout s’est bien passé).</li>
<li>Le contenu échangé est majoritairement du XML (pour les enveloppes notamment).</li>
</ul>
<p>Quand on fait du webservice avec SOAP, c’est ce niveau qui est utilisé lors de la communication HTTP.</p>
<h3 id="niveau-1">
      <a class="putainde-Title-anchor" href="#niveau-1">#</a>
      Niveau 1
    </h3><p>Avec ce premier niveau, on essaye d’enrichir un peu plus l’utilisation. On ajoute la notion de <em>ressource</em>, en fonction de la donnée métier manipulée, l’URL de la requête sera différente. La preuve par l’exemple :</p>
<ul>
<li><strong><em>POST /agenda</em></strong> : permet de travailler avec les données de l’agenda de l’application</li>
<li><strong><em>POST /customers</em></strong> : permet de travailler avec le registre des clients  </li>
</ul>
<p>On profite aussi de la vue hiérarchique que nous proposent les URL :</p>
<ul>
<li><strong><em>POST /customers/42</em></strong> : permet de travailler avec le client qui possède l’identifiant 42</li>
</ul>
<p>Rien qu’en traçant les URL appelées sur le serveur, on peut comprendre ce que le client HTTP cherche à faire… pas dégueu, non ?</p>
<h3 id="niveau-2">
      <a class="putainde-Title-anchor" href="#niveau-2">#</a>
      Niveau 2
    </h3><p>Le protocole HTTP utilise des verbes pour les requêtes et des codes numériques pour les retours. Ce sont ces deux mécanismes qui seront utilisés en complément du niveau 1.</p>
<p>Les principaux verbes HTTP que l’on utilise sont GET, POST, PUT et DELETE. Leur nom est déjà très évocateur.</p>
<ul>
<li><strong><em>GET /customers/42</em></strong> pour récupérer les informations du client 42</li>
<li><strong><em>PUT /customers</em></strong> <em>(+ corps de la requête)</em> pour enregistrer un nouveau client</li>
<li><strong><em>POST /customers/42</em></strong> <em>(+ corps de la requête)</em> pour mettre à jour les informations du client 42</li>
<li><strong><em>DELETE /customers/42</em></strong> pour supprimer le client 42</li>
</ul>
<p>Facile, non ? La réponse du serveur devient tout aussi logique grâce aux codes HTTP.
Ces codes sont juste des nombres de 3 chiffres respectant cette logique :</p>
<ul>
<li><strong><em>1xx</em></strong> : <em>“Je suis en train de bosser, attends encore un peu.”</em></li>
<li><strong><em>2xx</em></strong> : <em>“Voilà le résultat, ça s’est bien passé.”</em></li>
<li><strong><em>3xx</em></strong> : <em>“Le contenu est déplacé, va voir ailleurs (cf. en-tête location).”</em></li>
<li><strong><em>4xx</em></strong> : <em>“Tu me demandes n’importe quoi, tu as merdé.”</em></li>
<li><strong><em>5xx</em></strong> : <em>“J’ai merdé…”</em></li>
</ul>
<p>Parmi les plus connus, on a donc 404 (<em>“tu me demandes quelque chose qui n’existe pas”</em>), 403 (<em>“accès interdit”</em>), 304 (<em>“pas la peine de m’emmerder, la donnée est dans ton cache”</em>) et bien sûr 200 (<em>“OK, tout va bien”</em>).</p>
<p>Et si les codes HTTP sont ta nouvelle passion, je te suggère de te documenter sur le code <a href="http://fr.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol">418</a> !</p>
<h3 id="niveau-3-hateoas">
      <a class="putainde-Title-anchor" href="#niveau-3-hateoas">#</a>
      Niveau 3 : HATEOAS
    </h3><p>Alors on a les verbes HTTP et les codes retours. À quoi peut ressembler le Graal des API REST alors ? Si on réfléchit un peu, on peut se dire qu’il faudrait, pour toutes les URL, donner un code retour HTTP cohérent pour chaque verbe, logique non ? De cette manière, on peut entamer un véritable dialogue avec le serveur HTTP, entièrement basé sur REST. Voilà une bonne nouvelle pour ceux qui veulent tailler une bavette ailleurs que sur Google Hangouts !</p>
<p>Un petit exemple de dialogue : </p>
<pre><code>&gt; <span class="hljs-type">GET</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">200</span> <span class="hljs-type">OK</span>

&gt; <span class="hljs-type">PUT</span> /customers/<span class="hljs-number">42</span> <span class="hljs-decorator">{...}</span>
<span class="hljs-number">409</span> <span class="hljs-type">Conflict</span>

&gt; <span class="hljs-type">DELETE</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">204</span> <span class="hljs-type">No</span> <span class="hljs-type">Content</span>

&gt; <span class="hljs-type">GET</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">404</span> <span class="hljs-type">Not</span> <span class="hljs-type">Found</span>
</code></pre><p>C’est un bon début, mais ce niveau 3 va quand même un peu plus loin ! N’as-tu jamais trouvé génial qu’avec de simples liens dans les pages web, tu pouvais naviguer des heures et des heures ? </p>
<p>Pourquoi ne pas ajouter des liens dans les ressources retournées via REST ? Nous venons de mettre le doigt sur HATEOAS (<em>Hypermedia As The Engine Of Application State</em>). On peut désormais imaginer un tas de choses comme :</p>
<ul>
<li>Quand on renvoie un tableau json par exemple, dans chaque item, <ul>
<li>on peut ajouter les liens qui permettent de le mettre à jour ;</li>
<li>on peut ajouter les liens qui permettent de récupérer des données liées comme l’auteur d’un livre, les mentions d’un tweet, etc. ;</li>
<li>on peut ajouter l’URL de putaindecode.fr.</li>
</ul>
</li>
</ul>
<p>Voici un exemple de trame JSON avec les informations HATEOAS. Pour information, il s’agit d’un webservice qui permet de lister des conférences.</p>
<pre><code><span class="hljs-collection">[
  <span class="hljs-collection">{
    <span class="hljs-string">"conference"</span>: <span class="hljs-collection">{
      <span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>,
      <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
        <span class="hljs-collection">{
          <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
          <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/conferences/"</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
          <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/conferences/1"</span>
        }</span>
      ]</span>,
      <span class="hljs-string">"name"</span>: <span class="hljs-string">"Take Off Conf 2013"</span>,
      <span class="hljs-string">"startDate"</span>: <span class="hljs-string">"2013-01-17T00:00:00+01:00"</span>,
      <span class="hljs-string">"endDate"</span>: <span class="hljs-string">"2013-01-18T00:00:00+01:00"</span>,
      <span class="hljs-string">"talks"</span>: <span class="hljs-collection">[
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Jakob Mattsson"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"You are not service oriented enough!"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/1"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">2</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Olivier Lacan"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Science-based development"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/2"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">3</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Xavier Coulon"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Build your website with awestruct and publish..."</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/3"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">4</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Rémi Parmentier"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Design for developers"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/4"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>
      ]</span>
    }</span>
  }</span>,<span class="hljs-collection">{
  ...
  }</span> 
]</span>
</code></pre><p>Dans cette trame, tu auras remarqué les objets dans les tableaux nommés “links”, ce sont les liens disponibles pour chacun des objets renvoyés ! On peut imaginer qu’en fonction des droits de l’utilisateur courant, il y ait plus ou moins de liens.</p>
<h2 id="est-ce-que-c-est-standard">
      <a class="putainde-Title-anchor" href="#est-ce-que-c-est-standard">#</a>
      Est-ce que c’est standard ?
    </h2><p>Eh bien non ! Il n’y a pas vraiment de convention pour l’écriture des liens dans les trames renvoyées. Cela dépend du format renvoyé dans un premier temps. Comment formaliser un standard si on renvoie en JSON, XML et YML en fonction des en-têtes HTTP du client ?</p>
<p>De la même manière, tu auras remarqué que l’on ne précise pas le verbe HTTP à utiliser sur les URL. C’est la raison pour laquelle il faut implémenter un retour cohérent pour tous les verbes HTTP courants !</p>
<p>Et pour finir, comment connaître le format du document JSON accepté avec les requêtes POST par exemple ? Il n’y a pas non plus de règle ! On pourrait imaginer par exemple un document “type” qui serait renvoyé après une requête “OPTION” sur l’URL.</p>
<p>Il y a toutefois quelques expérimentations comme <a href="http://en.wikipedia.org/wiki/Hypertext_Application_Language">HAL</a> ou encore <a href="http://jsonapi.org/">JSON API</a> qui tentent de normaliser un peu ce flou artistique.</p>
<p>Tu fais ta petite popote ! Tu fais comme tu veux ! Ça a du bon aussi !</p>
<h2 id="bon-ok-je-fais-comment-pour-le-mettre-en-place-maintenant">
      <a class="putainde-Title-anchor" href="#bon-ok-je-fais-comment-pour-le-mettre-en-place-maintenant">#</a>
      “Bon ok, je fais comment pour le mettre en place maintenant ?”
    </h2><p>Tu remontes tes manches et tu te démerdes !</p>
<p>Il y a quelques frameworks qui vont te donner un coup de main. Dans le monde Java par exemple, il existe <a href="http://docs.jboss.org/resteasy/docs/2.0.0.GA/userguide/html/LinkHeader.html">Resteasy-links</a> (avec un exemple d’utilisation <a href="https://github.com/awillemant/hateoas-example">sur mon repo GitHub</a>), ou encore <a href="http://projects.spring.io/spring-hateoas/">Spring HATEOAS</a></p>
<p>Pour les <em>Nodistes</em>, une simple recherche sur <a href="https://www.npmjs.com/search?q=hateoas">npmjs</a> renverra un tas d’outils ! </p>
<h2 id="references">
      <a class="putainde-Title-anchor" href="#references">#</a>
      Références
    </h2><p>Oui, parce qu’il y a des gens bien plus brillants que moi pour vous convaincre sur l’Hypermedia !</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/HATEOAS">Wikipédia</a></li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Blog de Martin Fowler</a></li>
<li>Les travaux de Steve Klabnik, Rubyiste reconnu (ex : <a href="https://www.youtube.com/watch?v=g4sqydY3hHU">Designing Hypermedia APIs</a>)</li>
<li>Ori Pekelman : <a href="https://www.youtube.com/watch?v=ZZxOaCP8vyg">son talk à la Take Off Conf 2014</a></li>
<li><a href="http://blog.xebia.fr/2014/03/17/post-vs-put-la-confusion/">Un excellent article de Xebia sur la bonne utilisation de POST et PUT</a></li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/api/hateoas/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/api/hateoas/</guid>
            <pubDate>Thu, 12 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Du CSS évolutif]]></title>
            <description><![CDATA[<p>Modulaire, maintenable, réutilisable, accessible. Ces termes sont au cœur de nos métiers et on nous les rabâche toute la journée.</p>
<p>Malgré la grossièreté de ces mots pour certains d’entre vous, il est tout à fait possible de pondre du CSS en utilisant tous ces principes.</p>
<h2 id="maintenable">
      <a class="putainde-Title-anchor" href="#maintenable">#</a>
      Maintenable
    </h2><p>L’un des trucs les plus chiants du CSS c’est bien la cascade, qui, malgré sa bonne volonté, n’apporte pas que des solutions. Pour pallier aux problèmes que l’on peut vite créer, <a href="http://putaindecode.fr/posts/css/petite-definition-bem/">la méthodologie BEM</a> a vu le jour avec son <a href="http://blog.kaelig.fr/post/48196348743/fifty-shades-of-bem">lot de variantes</a>.</p>
<p>La grande majorité des membres de p! utilisent cette convention :</p>
<pre><code class="lang-css"><span class="hljs-class">.MyComponent</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent</span><span class="hljs-class">.is-state</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent--modifier</span> <span class="hljs-rules">{}</span>

<span class="hljs-class">.MyComponent-element</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent-anotherElement</span> <span class="hljs-rules">{}</span>
</code></pre>
<p>D’un coup d’œil, on devine la structure <code>HTML</code> qui en découle et l’utilité de chaque élément. Les états sont toujours les mêmes et clairement identifiables car commençant par <code>is-*</code>, de même que les éléments définis par <code>-</code> ainsi que les modificateurs <code>--</code>.</p>
<p>Avec cette méthodologie rares sont les sélecteurs dépassant :</p>
<pre><code class="lang-css"><span class="hljs-class">.MyComponent-element</span> <span class="hljs-class">.MyComponent-anotherElement</span> <span class="hljs-rules">{}</span>
</code></pre>
<p>L’intérêt ? Apporter de la sémantique à notre code CSS, en utilisant des classes, des classes et des classes afin de clairement s’abstraire de la cascade. Finis les <code>!important</code>, on évite ainsi les problèmes d’éléments et les soudains changements de structure HTML qui te forcent à réécrire tes sélecteurs.</p>
<p>Cette méthode est d’ailleurs, entre autres, utilisée par <a href="http://twitter.com">Twitter</a> via <a href="http://suitcss.github.io/">SUIT CSS</a>.</p>
<h2 id="modulaire">
      <a class="putainde-Title-anchor" href="#modulaire">#</a>
      Modulaire
    </h2><p>Partant de notre méthodologie, on va développer notre site web comme un gros Lego. Chaque partie graphique de notre projet sera un composant, une brique.</p>
<p>On pourrait imaginer des éléments comme <code>NavBar</code>, <code>Pagination</code>, <code>Article</code> que l’on va assembler au fur et à mesure de notre développement. Notre site sera composé de plusieurs dizaines de fichiers (<code>Composant</code>), mais aucun n’excèdera quelques centaines de lignes, grand maximum. Beaucoup plus facile à débugger et donc sur le long terme plus maintenable.</p>
<p>Il va de soi qu’on utilisera son outil préféré pour concaténer et minimiser le tout en un seul fichier, sinon on risque d’avoir quelques problèmes de <em>webperf</em>.</p>
<h2 id="accessible">
      <a class="putainde-Title-anchor" href="#accessible">#</a>
      Accessible
    </h2><p>Pour obtenir un design adaptatif ou accessible, il est nécessaire d’utiliser des unités dites relatives. C’est à ce moment qu’interviennent les unités stars du moment que sont <code>em</code> et <code>rem</code>.</p>
<p>Mais voilà que <code>em</code> rencontre un inconvénient majeur, encore et toujours notre fameuse cascade. Chaque élément dépend de son propre <code>font-size</code> ou de celui de son parent. Alors, vous imaginez l’élément de l’élément de l’élément. On peut vite perdre les pédales. Je vous vois venir avec l’unité <code>rem</code>. Effectivement on résout complètement le problème de la cascade, mais on perd en modularité.</p>
<p>Prenons notre exemple de <code>NavBar</code>, voici comment on pourrait commencer ce composant :</p>
<pre><code class="lang-css"><span class="hljs-class">.NavBar</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
}</span>
  <span class="hljs-class">.NavBar-item</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> .<span class="hljs-number">875em</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">1em</span></span></span>;
  }</span>
</code></pre>
<p>Notre classe principale étant définie en <code>rem</code>, il devient alors très facile de calculer l’ensemble de ces <code>-item</code> en <code>em</code>.
On diminue ainsi de nouveau les problèmes de cascade. De plus, on peut très facilement augmenter la taille générale de notre composant, en augmentant la taille de son <code>font-size</code> dans sa classe principale.
On atteint alors un double d’objectif : en plus d’être accessible en supprimant les pixels, on rend notre composant réutilisable sur d’autres projets en s’adaptant très facilement à son contexte.</p>
<h2 id="namespace">
      <a class="putainde-Title-anchor" href="#namespace">#</a>
      Namespace
    </h2><p>On utilise tous des scripts <code>vendors</code>. Pour éviter les collisions avec ceux-ci et encore une fois à cause de cette maudite cascade, voici un petit truc qui vous évitera de modifier vos classes : l’ajout d’un namespace à nos composants.</p>
<p>On va utiliser notre exemple de tout à l’heure avec <code>NavBar</code> :</p>
<pre><code class="lang-css"><span class="hljs-class">.putainde-NavBar</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
}</span>
  <span class="hljs-class">.putainde-NavBar-item</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> .<span class="hljs-number">875em</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">1em</span></span></span>;
  }</span>
</code></pre>
<h2 id="pour-finir">
      <a class="putainde-Title-anchor" href="#pour-finir">#</a>
      Pour finir
    </h2><p>C’est verbeux, on ne peut pas le nier. Par moment, on peut se dire qu’écrire une classe seulement pour une propriété, est-ce si pertinent que ça ? Sauf qu’au moment ou vous écrivez votre <code>css</code> vous ne pouvez pas dire qu’à la prochaine mise à jour, il vous faudra peut-être en rajouter 5, et donc votre classe sera finalement bien utile.</p>
<p>Toutes ces méthodes m’ont fait abandonner <code>Sass</code> et son framework <code>Compass</code>. Ce qu’apporte un langage comme <code>Sass</code> (au-delà de l’aspect programmation, mais c’est une autre histoire) vient principalement de ses features telles que  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_rules">nested</a> et <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend">@extend</a>. Et franchement, une bonne indentation, un bon nommage de classes et une utilisation intelligente de <code>BEM</code> vous feront vite oublier <code>Sass</code> sans regarder en arrière.</p>
<p>Sur l’ensemble de mes projets, je n’écris plus que ce qu’on appelle communément du <code>Vanilla CSS</code>. Petit bémol quand même, histoire de pouvoir utiliser des spécifications pas forcément encore compatibles sur tous les navigateurs, j’ai ajouté dans mon workflow l’outil <a href="https://github.com/postcss/postcss">PostCSS</a>, le tout contrôlé par <a href="http://cssnext.github.io/">cssnext</a> dont voici quelques exemples d’<a href="https://cssnext.github.io/cssnext-playground/">utilisation</a>.</p>
<p>Je vous encourage vivement à tester ces deux outils (<a href="https://github.com/postcss/postcss">PostCSS</a> ou <a href="http://cssnext.github.io/">cssnext</a>) qui vous apporteront variables, manipulation des couleurs, etc, ainsi que concaténation des <code>@import</code> tout en conservant du CSS valide (selon les spécifications).</p>
<h2 id="le-truc-du-moment">
      <a class="putainde-Title-anchor" href="#le-truc-du-moment">#</a>
      Le truc du moment
    </h2><p>Avant de terminer cet article, je voulais mentionner l’idée/concept qui commence à faire son petit bout de chemin à savoir le <code>style inline</code>.</p>
<p>Cela revient tout simplement à écrire directement le CSS dans son code <code>HTML</code></p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-size:1rem"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-size:.875em; padding:1em"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Avant d’hurler au blasphème ou au scandale, il est nécessaire de mettre en adéquation cette idée avec les contraintes rencontrées lors du développement d’une application utilisant principalement du <code>JavaScript</code>.</p>
<p>Si vous souhaitez un peu plus d’informations sur le sujet, je vous invite à lire la <a href="https://speakerdeck.com/vjeux/react-css-in-js">présentation</a> de <a href="https://twitter.com/Vjeux">@Vjeux</a>, front-end engineer chez Facebook. Il explique les problèmes rencontrés avec le <code>CSS</code> et les solutions mises en place par les développeurs de Facebook ou plus exactement de <code>ReactJS</code>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/css/du-css-evolutif/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/css/du-css-evolutif/</guid>
            <pubDate>Tue, 10 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Il démarre Vim par erreur, ce qui se passe ensuite est tout simplement bluffant]]></title>
            <description><![CDATA[<blockquote>
<p>À première vue, vous allez éprouver de la tristesse, mais ce qui se passe ensuite est tout simplement incroyable…</p>
<p>Alors qu’il était en train d’effectuer une mise en production,
ce développeur s’est confronté à une situation qui aurait pu complètement déraper.
Une intervention directement sur le serveur de production était obligatoire afin d’éditer la base de données au format .txt.</p>
<p>Après avoir passé plusieurs heures pour se connecter à distance via une connexion sécurisée,
Maxime est tombé nez à nez avec une console d’administration en ligne de commande !
Il était complètement désemparé par l’absence de fenêtre.</p>
<p>Ce qui s’est passé ensuite est tout simplement incroyable :
fort de sa persévérance, Maxime décide tout de même de se rapprocher du clavier !
Après une rapide recherche sur les Internets,
il tape la première commande qu’il trouve :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>vim
</code></pre>
<p>Alors qu’on pourrait imaginer un drame, comme il arrive souvent quand <a href="https://duckduckgo.com/?q=I+am+stuck+in+VIM">une personne tombe dans ce piège</a>,
Maxime ne s’est pas laissé abattre et a persisté dans sa démarche…</p>
</blockquote>
<p>Bon, assez plaisanté.</p>
<h2 id="pourquoi-j-essayerais-vim">
      <a class="putainde-Title-anchor" href="#pourquoi-j-essayerais-vim">#</a>
      <em>Pourquoi j’essayerais Vim ?</em>
    </h2><p>J’ai commencé par Eclipse. Qu’il fallait réinstaller assez souvent sans quoi on perdait 10 minutes de sa vie à chaque ouverture d’autocomplete.
Je suis passé par NetBeans, WebStorm… Sans être convaincu. Plus récemment, j’étais assez content sous Sublime Text avant d’essayer Atom
(car en gros Atom est quasiment la même chose, en technologie web, open source et fait par GitHub).
Mais j’ai toujours eu envie de me la péter devant 2 écrans tout noir,
en ligne de commande, comme dans les super productions américaines.</p>
<p>Plus sérieusement, je passe de plus en plus de temps devant ma console…
Enfin vous savez, le terminal, pas l’autre truc un peu plus fun (et encore que).</p>
<p>J’ai toujours eu envie de comprendre pourquoi autant de gens (car mine de rien il y en a un paquet) utilisaient Vim,
et se moquaient un bon coup à chaque sortie d’un nouvel éditeur.
Car bon faut avouer, se moquer c’est facile.
Du coup un jour, j’ai démarré Vim.</p>
<h2 id="pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouve-dans-vim">
      <a class="putainde-Title-anchor" href="#pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouve-dans-vim">#</a>
      <em>Pourquoi j’ai rien compris quand je me suis retrouvé dans Vim ?</em>
    </h2><p>Le truc le plus déroutant dans Vim, c’est les modes.
Et quand on ouvre Vim, on ne se retrouve pas dans le mode le plus logique (à première vue).</p>
<p>En fait, ce qu’on dit pas trop, c’est que Vim est toujours utilisé aujourd’hui car on peut l’utiliser uniquement au clavier.
Vous allez me répondre qu’on peut en faire de même avec tous les éditeurs de texte.</p>
<p>Mais <strong>Vim a clairement été développé pour minimiser les déplacements des mains</strong>.</p>
<p>C’est pour moi la chose la plus importante à retenir. Et la chose la plus attractive.
Les bons développeurs ont tous une bonne flemme au fond d’eux, c’est bien connu.</p>
<p>Pour un peu plus sur l’histoire de Vim, direction <a href="https://fr.wikipedia.org/wiki/Vim">wikipedia.org/wiki/Vim</a>.</p>
<h2 id="commencer-avec-vim">
      <a class="putainde-Title-anchor" href="#commencer-avec-vim">#</a>
      Commencer avec Vim
    </h2><p>Du coup, quand je suis dans Vim, comment ça se passe ?</p>
<p>Je passerai plus tard assez rapidement sur les différents points, vu que d’autres ressources,
dont notamment le livre <a href="https://vimebook.com/">Vim pour les humains</a>, le font très bien en douceur.</p>
<p>C’est d’ailleur grâce à ce livre que je me suis lancé.
Je tiens donc à remercier <a href="http://viserlalune.com/">Vincent Jousse</a> pour avoir pris le temps d’écrire cet ouvrage.</p>
<p>Profitez de cet ouvrage, en plus <a href="http://ploum.net/le-prix-libre-une-impossible-utopie/">le prix est libre</a>.
Et puis quand on pense au prix des licences de certains IDE…</p>
<p>Ce livre est fait pour n’importe qui, débutant ou pas.
Vraiment, mangez-en si vous souhaitez essayer Vim (oui je sais, manger un e-book comme ça, ça paraît pas évident).</p>
<p>J’ai essayé plusieurs fois sans trop savoir où commencer, sans succès.
Ce livre m’a aidé et se dévore en quelques dizaines de minutes (deux ou trois heures grand max),
clavier sous les mains (bah oui rien de mieux pour se lancer).</p>
<p>J’ai essayé et me voilà conquis, une fois que j’ai compris sa valeur ajoutée.</p>
<p>Pour bien s’y prendre, forcez-vous à travailler avec Vim au moins une journée en suivant les conseils que vous trouverez dans cet ouvrage.
Cela a fonctionné pour moi : je gagne déjà du temps au bout de quelques semaines d’utilisation.</p>
<p>Pourquoi pas vous ?</p>
<h2 id="pour-apprendre-vim">
      <a class="putainde-Title-anchor" href="#pour-apprendre-vim">#</a>
      Pour apprendre Vim
    </h2><p>Vous pouvez donc :</p>
<ul>
<li>lire l’e-book <a href="http://vimebook.com">Vim pour les humains</a></li>
<li>lancer la commande <code>vimtutor</code></li>
<li>jouer à <a href="http://vim-adventures.com/">Vim Adventures</a></li>
<li>vous entraîner sur des exemples concrets avec <a href="http://vimgolf.com/">VimGolf</a></li>
</ul>
<p>Voici aussi un cheatsheet indispensable qui permet de bien mémoriser le pourquoi des touches
(b = begin, w = word, e = end, r = replace, i = insert, a = append, o = open, ctrl f = forward, ctrl b = backward, etc).</p>
<p><img src="../vim-cheatsheet.gif" alt="cheatsheet VIM"></p>
<p>Vous remarquerez que souvent les commandes en majuscules font la même chose mais dans le sens inverse (f/F, o/O), ou de manière plus catégorique (d/D, y/Y).</p>
<h2 id="passer-a-vim-est-un-investissement">
      <a class="putainde-Title-anchor" href="#passer-a-vim-est-un-investissement">#</a>
      Passer à Vim est un investissement
    </h2><p>Point important : il faut avoir envie.
Il ne s’agit pas de changer simplement d’éditeur, car on doit complètement changer ses habitudes.
Plus aucun raccourci clavier que vous avez l’habitude d’utiliser ne va fonctionner.
Je me répète mais il faut se forcer un minimum avant d’imaginer les possibilités de cet éditeur.</p>
<p>Cela dit, on peut rapidement voir la puissance de Vim après quelques heures d’utilisation
(même si on peut aussi un peu rager en cherchant des commandes simples qu’on arrive pas à faire).</p>
<p>Sachez aussi que beaucoup d’éditeurs ont des modes Vim (Sublime Text, Atom et d’autres). Il doit bien y avoir une raison, non ?
Notez aussi que Vim est installé par défaut sur beaucoup d’environnement de type Unix.</p>
<p>Vim est configurable à souhait (via le fichier <code>.vimrc</code>) et possède même son propre language de scripts (Vim Script ou viml)
ce qui permet de créer de nouvelles fonctionnalités simplement. Et même du coup d’en faire des “plugins”.</p>
<p>Je vous prépare un prochain post pour vous faire un petit mémo condensé de ce qu’on peut faire avec, et surtout comment.</p>
<blockquote>
<p>:q^C:wq</p>
</blockquote>
]]></description>
            <link>http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</guid>
            <pubDate>Tue, 03 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Quelques retours sur React et le rendu serveur]]></title>
            <description><![CDATA[<p>On entend souvent parler d’applications JavaScript isomorphiques, et même si le 
nom ne <a href="https://news.ycombinator.com/item?id=8237449">fait</a> <a href="https://twitter.com/wycats/status/566857009836724224">pas</a> 
<a href="https://medium.com/the-thinkmill/making-the-case-for-progressive-javascript-a98dfa82b9d7">l’unanimité</a>, 
ce qu’il y a derrière, le concept de <em>server side rendered JavaScript</em> est en 
passe de devenir  un sujet plutôt tendance pour 2015 grâce à la monté en puissance 
de <a href="http://facebook.github.io/react/">Reactjs</a>.  Faire du rendu d’application 
JavaScript coté serveur permet de réconcilier enfin le développeur de 
<em>Single Page App</em> (SPA) avec l’amélioration progressive, l’accessibilité et le 
SEO&nbsp;; quoique Google comme les lecteurs d’écran ont plutôt bien évolué sur
ce point. L’autre avantage non négligeable à mon sens, est qu’on améliore les 
performances perçues par rapport
 à une SPA classique puisque&nbsp;:</p>
<ul>
<li>On supprime une requête <em>ajax</em> au démarrage pour récupérer le contenu
initial. </li>
<li>On améliore la vitesse de rendu initial de page. </li>
<li>On bénéficie de la fluidité de navigation d’une SPA.</li>
</ul>
<p>Pour plus d’info sur les avantages, il y a <a href="http://tech.m6web.fr/isomorphic-single-page-app-parfaite-react-flux/">cet article</a> sur le blog de M6Tech.</p>
<p>Afin de me familiariser avec React et son écosystème, rien de mieux que mettre 
les mains dedans&nbsp;! C’est un peu pour toutes ces raisons que j’ai décidé de 
l’utiliser pour mon site web (un site statique). </p>
<p><strong>Inutile et donc totalement justifié pour le développeur que je suis</strong>. 
Une des premières briques que j’ai mises en place a été le routeur.</p>
<h2 id="react-router">
      <a class="putainde-Title-anchor" href="#react-router">#</a>
      react-router
    </h2><p>Pour une fois dans la communauté JavaScript, il y a une bibliothèque de référence 
et c’est celle là : <a href="https://github.com/rackt/react-router">react-router</a>. 
Le routeur est fortement inspiré par celui d’Ember au sens où les URL et leurs routes 
sont au cœur du dispositif. Le routeur se présente sous forme de composant React 
et ça donne ça.</p>
<pre><code class="lang-jsx">//routes.js

var <span class="hljs-variable">React =</span> require(<span class="hljs-string">"react"</span>);
var <span class="hljs-variable">Router =</span> require(<span class="hljs-string">"react-router"</span>);

var <span class="hljs-variable">Route =</span> Router.Route;
var <span class="hljs-variable">DefaultRoute =</span> Router.DefaultRoute;
var <span class="hljs-variable">NotFoundRoute =</span> Router.NotFoundRoute;

var <span class="hljs-variable">App =</span> require(<span class="hljs-string">"./app"</span>);
var <span class="hljs-variable">Home =</span> require(<span class="hljs-string">"./home/homePage"</span>);
var <span class="hljs-variable">Project =</span> require(<span class="hljs-string">"./project/projectPage"</span>);
var <span class="hljs-variable">NotFound =</span> require(<span class="hljs-string">"./notFound"</span>);

var <span class="hljs-variable">routes =</span> (
  &lt;Route <span class="hljs-variable">path=</span><span class="hljs-string">"/"</span> <span class="hljs-variable">handler=</span>{App}&gt;
    &lt;DefaultRoute <span class="hljs-variable">name=</span><span class="hljs-string">"index"</span> <span class="hljs-variable">handler=</span>{Home} /&gt;
    &lt;Route <span class="hljs-variable">name=</span><span class="hljs-string">"project"</span> <span class="hljs-variable">path=</span><span class="hljs-string">"/projects/:url"</span> <span class="hljs-variable">handler=</span>{Project} /&gt;
    &lt;NotFoundRoute <span class="hljs-variable">name=</span><span class="hljs-string">"404"</span> <span class="hljs-variable">handler=</span>{NotFound} /&gt;
  &lt;/Route&gt;
);

module.<span class="hljs-variable">exports =</span> routes;
</code></pre>
<p>À mon sens, l’aspect déclaratif apporte de la clarté et améliore la compréhension 
du système. On voit rapidement quel composant est utilisé en fonction de l’URL. 
L’autre avantage du déclaratif, c’est qu’il permet de manière assez simple, 
d’imbriquer les routes en imbriquant les nœuds <code>&lt;Route&gt;</code>.</p>
<p>En plus des composants, on a aussi à disposition des <em>mixins</em> pour naviguer 
programmatiquement ou accéder aux infos du routeur (chemin, paramètres, …)</p>
<p>Et le gros plus de cette bibliothèque : elle peut aussi s’utiliser coté serveur, 
pour la génération des vues et éviter ainsi de dupliquer du code puisqu’on va 
pouvoir carrément utiliser tel quel le fichier précédent. Plutôt cool&nbsp;!
Voici un exemple de <em>middleware</em> pour faire marcher ça dans Express&nbsp;:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react"</span>);
<span class="hljs-keyword">var</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react-router"</span>);

<span class="hljs-comment">// notre fichier routes.js</span>
<span class="hljs-keyword">var</span> routes = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./src/routes"</span>);
<span class="hljs-comment">// notre template de page html</span>
<span class="hljs-keyword">var</span> Html = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./src/html"</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactView</span><span class="hljs-params">(req, res, next)</span> </span>{
  Router.run(routes, req.url, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Handler, state)</span> </span>{
    <span class="hljs-comment">// on récupère les données pour cette vue en fonction de la requête.</span>
    <span class="hljs-keyword">var</span> data = getViewData(req);

    <span class="hljs-comment">// on génère la soupe au tag avec nos données dedans</span>
    <span class="hljs-keyword">var</span> markup = React.renderToString(React.createElement(Handler), data);

    <span class="hljs-comment">// on utilise React comme moteur de template</span>
    <span class="hljs-keyword">var</span> HtmlElement = React.createElement(Html, {markup: markup});  
    res.send(<span class="hljs-string">"&lt;!DOCTYPE html&gt;"</span> +  React.renderToStaticMarkup(HtmlElement));
  });
}
</code></pre>
<p>Et voici le composant <code>Html.jsx</code> que l’on utilise comme <em>template</em> pour notre page principale.</p>
<pre><code class="lang-jsx">var React = require('react');

var Html = React.createClass({
  render: function() {
    return (
      <span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charSet</span>=<span class="hljs-value">"utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">meta</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Mon site perso<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/app.js"</span> /&gt;</span><span class="handlebars"><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"react-app"</span> <span class="hljs-attribute">dangerouslySetInnerHTML</span>=</span></span><span class="hljs-expression">{{__<span class="hljs-variable">html</span>: <span class="hljs-variable">this.props.markup</span>}}</span><span class="xml"><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
    );
  }

});

module.exports = Html;</span></span>
</code></pre>
<p>Une fois que le code HTML a été généré via<code>React.renderToString(React.createElement(Handler), data);</code>, 
on pourrait utiliser n’importe quel moteur de template (lodash.template, handlebars, ejs, jade, PHP…) 
pour générer le HTML de la page à renvoyer. Dans un souci de rationalisation des outils, 
j’ai préféré utiliser React. </p>
<p>Vous avez dû vous apercevoir qu’on utilise 2 méthodes différentes pour générer 
du HTML avec React&nbsp;:</p>
<ul>
<li><code>React.renderToString(React.createElement(Handler), data);</code></li>
<li><code>React.renderToStaticMarkup(React.createElement(Handler), data);</code></li>
</ul>
<p>La différence entre les deux méthodes est simple. Dans la première, React annote 
les nœuds HTML avec des <code>data-reactid</code> dans le but de pouvoir ensuite reprendre 
la main lorsque votre l’application s’exécutera dans le navigateur. De cette manière, 
React sait que vous l’initialisez avec un contenu généré depuis le serveur. 
Et si il détecte une différence entre le code existant et celui qu’il génère, 
vous aurez droit à un <a href="https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/browser/ui/__tests__/ReactRenderDocument-test.js#L205-L215">petit warning</a>. 
La deuxième méthode permet de générer du code HTML sans annotations, 
comme n’importe quel moteur de <em>template</em>.</p>
<p>Les plus attentifs auront remarqué qu’on passe les données initiales lors de 
la création de l’application via des <em>props</em> React. Quid de l’utilisation 
de flux dans tout ça ?</p>
<h2 id="flux-et-le-rendu-serveur">
      <a class="putainde-Title-anchor" href="#flux-et-le-rendu-serveur">#</a>
      Flux et le rendu serveur
    </h2><p>Avec <a href="http://facebook.github.io/flux/">Flux</a>, ce sont les stores qui maintiennent 
l’état de notre application. Si l’on ne veut pas afficher notre application 
sans aucune données, nous allons devoir préalablement peupler nos stores 
avant d’appeler <code>React.renderToString()</code>. </p>
<p>Là où ça se corse un peu, c’est qu’il va falloir remplir nos stores avant de démarrer 
notre application sous peine de voir le message d’alerte dont je parlais plus haut. 
Le plus simple alors est de passer ces données au moteur de template, 
en plus du markup (par exemple sous la forme d’un nœud <code>&lt;script type=&quot;application/json&quot;&gt;JSON DATA&lt;/script&gt;</code>.
Il ne reste plus qu’a récupérer ces données avant d’appeler <code>React.render( Application, document.getElementById(&quot;react-app&quot;))</code></p>
<p>Par exemple&nbsp;: </p>
<pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"DOMContentLoaded"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> </span>{
  <span class="hljs-comment">// getData() va récuperer et parser le contenu du tag script </span>
  <span class="hljs-comment">// qui contient nos données</span>
  <span class="hljs-keyword">var</span> storeData= getData(); 

  <span class="hljs-comment">// on déclenche une actions</span>
  actions.init( storeData);

  <span class="hljs-comment">// on lance le rendu</span>
  React.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> /&gt;</span>, document.getElementById("react-app"));
});</span>
</code></pre>
<h2 id="le-mot-de-la-fin">
      <a class="putainde-Title-anchor" href="#le-mot-de-la-fin">#</a>
      Le mot de la fin
    </h2><p>Penser son application React pour qu’elle puisse être rendue coté serveur 
introduit de nouvelles problématiques, notamment avec l’ajout du <em>pattern</em> Flux. 
En fonction des pages que l’on souhaite afficher, on devra initialiser différents <em>stores</em>. 
À nous de déterminer, en fonction de l’URL et du composant à afficher, 
lequel initialiser, et cela, que l’on soit sur le client ou le serveur. 
De la même manière, il faudra être capable de charger nos données, indépendamment 
de l’environnement d’exécution (coucou XHR).</p>
<p>Un début de réponse se trouve dans les exemples fournis avec react-router. 
L’idée est de passer par une propriété <code>statics</code> lors de la création des composants React 
qui seront associés à une <code>&lt;Route/&gt;</code>.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">var</span> ProjectPage = React.createClass({ 
  statics: {
    fetchData: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(params)</span></span>{
      <span class="hljs-keyword">return</span> api.getPageData(params.url)
        .then( actions.initProject)
        .<span class="hljs-keyword">catch</span>( actions.loadProjectError);
    }
  }
 ...
 });
</code></pre>
<p>Dans ce bloc <code>statics</code>, on définit une fonction qui servira à récupérer les données 
pour ce composant mais on pourrait très bien imaginer retourner la liste d’actions 
à lancer ou encore les <em>stores</em> à initialiser voire même un descripteur des données nécessaires 
à la vue (<a href="https://www.youtube.com/watch?v=9sc8Pyc51uU">cf Relay / GraphQL</a>) </p>
<p>Ensuite, lorsque le callback fourni à <code>Router.run()</code> est appelé, il suffit de parcourir 
les <em>Handler</em> pour récupérer les informations contenues dans les blocs <code>statics</code>, 
les traiter et enfin faire <code>React.render()</code>.</p>
<pre><code class="lang-Javascript">// On renvoie une promesse qui sera résolue lorsque que toutes les données démandées via fetchData seront reçues.
Router.run(routes, Router.HistoryLocation, function (Handler, <span class="hljs-keyword">state</span>) {
  var p = Promise.<span class="hljs-literal">all</span>(<span class="hljs-keyword">state</span>.routes
    .filter(route =&gt; route.handler.fetchData)  // définit fetchData
    .map(route =&gt; {
      return route.handler.fetchData(<span class="hljs-keyword">state</span>.params);
    })
  );
  p.then( x =&gt; {
    React.render(<span class="hljs-variable">&lt;Handler {...state} /&gt;</span>, document.getElementById(<span class="hljs-string">"react-app"</span>))
  });
});
</code></pre>
<p>Le principe est simple et peut être facilement encapsulé dans un module pour 
être partagé entre le client et le serveur.  J’espère que cet article vous a permis 
d’appréhender un peu mieux le rendu coté serveur d’une application React. 
N’hésitez pas à laisser des commentaires si vous avez des questions où 
si vous souhaitez partager vos expériences dans ce domaine. </p>
<p>Et quelques liens vidéo des sessions de la #reactjsconf :</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=XZfvW1a8Xac">React.js Conf 2015 - react-router increases your productivity </a> </li>
<li><a href="https://www.youtube.com/watch?v=z5e7kWSHWTg">React.js Conf 2015 - Hype!</a> : un aperçu des possibilités de react-router</li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/</guid>
            <pubDate>Mon, 23 Feb 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript modulaire pour le front-end : les bases]]></title>
            <description><![CDATA[<p>Quand on réalise des applications en JS pour les navigateurs web, on ne peut plus se contenter de mettre des tags <code>script</code> dans le bon ordre pour charger les bibliothèques tierces que l’on utilise comme pour un site web. C’est pourquoi il existe des outils pour permettre d’écrire du JavaScript modulaire et réutiliser plus facilement les innombrables bibliothèques publiées par la communauté JS.</p>
<p>Cependant, ce principe d’écriture modulaire et de publication de code n’étant pas intégré dans le langage lui-même, de très nombreuses solutions existent plus ou moins compatibles les unes avec les autres et aboutissant à une forte fragmentation de la communauté.
Donc quand on décide de se mettre au JavaScript modulaire, on trouve tout un tas d’articles (en anglais) parfois trop vieux (“une étape de build n’est pas adaptée au navigateur”), parfois trop subjectifs (“J’aime pas la syntaxe AMD”), parfois confus (“utiliser les modules pour de l’injection de dépendances”), parfois simplistes (“AMD vs CommonJS”).</p>
<p>C’est pourquoi j’ai voulu partager mon expérience, en essayant d’abord de reposer les bases du problème, puis en vous faisant part de ce que j’estime être la solution la plus satisfaisante actuellement.</p>
<p>D’abord, il faut faire la distinction entre 3 aspects du problème :</p>
<ul>
<li>le format d’écriture des modules (“module authoring format”)</li>
<li>le système de gestion des packages (“package management”)</li>
<li>la convention de résolution des dépendances de module</li>
</ul>
<h1 id="format-d-ecriture-des-modules">
      <a class="putainde-Title-anchor" href="#format-d-ecriture-des-modules">#</a>
      Format d’écriture des modules
    </h1><p>Le module est la brique de base pour décomposer un gros fichier JS en plusieurs fichiers plus petits et focalisés sur une fonctionnalité précise. La plupart du temps un module est un fichier JS qui fournit une fonction, un constructeur ou un objet de valeur. Et comme, pour fournir cette fonctionnalité, un module peut avoir besoin d’autres modules, il existe un mécanisme pour déclarer ses dépendances.</p>
<p>Actuellement, 2 standards principaux existent pour écrire ces modules : <strong>AMD</strong> et <strong>CommonJS</strong>.
Il est également possible d’utiliser la <a href="http://www.2ality.com/2014/09/es6-modules-final.html">syntaxe retenue par ES6</a> (qui j’espère va enfin devenir le standard unique) mais pour l’instant, ça demande encore une étape de “transpilation” en AMD ou CJS.</p>
<p>Le format AMD (dans sa forme la plus courante) est :</p>
<pre><code class="lang-js">define([<span class="hljs-string">'moduleA'</span>, <span class="hljs-string">'moduleB'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, b)</span> </span>{
  <span class="hljs-comment">// j'utilise a et b</span>
  <span class="hljs-keyword">return</span> maFonctionTresUtile;
});
</code></pre>
<p>Le format CommonJS (dans sa forme la plus courante) est :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">'moduleA'</span>);
<span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">'moduleB'</span>);
<span class="hljs-comment">// j'utilise a et b</span>
<span class="hljs-built_in">module</span>.exports = maFonctionTresUtile;
</code></pre>
<p>Ca n’est pas très différent dans l’esprit : tous les 2 permettent de décrire des dépendances et d’exporter une valeur.
La différence principale réside dans le fait que :</p>
<ul>
<li>CommonJS prévoit une évaluation en une passe dans laquelle il faut résoudre les dépendances au fur et à mesure</li>
<li>alors que AMD prévoit une évaluation en 2 passes :<ul>
<li>une première pour récupérer uniquement la liste des dépendances</li>
<li>et une seconde où on exécute le callback (le corps du module) avec les dépendances résolues.
C’est pourquoi on parle de format “synchrone” dans le premier cas et “asynchrone” dans le second car on peut résoudre les dépendances de façon asynchrone en AMD.</li>
</ul>
</li>
</ul>
<p>Dans les 2 cas, par contre, il y a besoin d’une <em>résolution des dépendances</em>, c’est à dire qu’un module ne peut pas être exécuté tel quel dans un navigateur en le chargeant via un tag <code>script</code>. Non, il faut un <em>loader</em>, c’est à dire un outil qui va charger le module qu’on lui demande et va résoudre les dépendances en cascade. Mais contrairement à ce que l’on pourrait croire, les règles de résolution des dépendances n’ont rien à voir avec le format du module (on verra ça plus tard).</p>
<h1 id="package-management">
      <a class="putainde-Title-anchor" href="#package-management">#</a>
      Package management
    </h1><p>Parlons maintenant des packages. En effet, pouvoir découper du code en modules, c’est bien ; mais ce qui est encore mieux c’est de pouvoir le partager avec d’autres pour qu’il soit facilement réutilisable et arrêter le syndrôme de :</p>
<blockquote>
<p>“je recode un event emitter dans ma bibliothèque comme ça je n’ai pas de
dépendance et c’est plus facile à consommer par mes utilisateurs”</p>
</blockquote>
<p> C’est le problème n°1 des bibliothèques front qui présentent souvent comme un argument de ne pas avoir de dépendances. Sauf que, si on y réfléchit, ça veut dire que : soit c’est une bibliothèque très bas niveau, soit le mec a recodé des trucs qui existent déjà au lieu de s’occuper de son sujet principal.</p>
<p>C’est là qu’entre en jeu la notion de <em>package</em> (que je ne traduirai pas en français, car ça ne servirait qu’à apporter de la confusion). Un package est un ensemble de fichiers (pas forcément des fichiers JS d’ailleurs) avec des métadonnées associées pour décrire principalement :</p>
<ul>
<li>où est stocké le package,</li>
<li>qui est l’auteur,</li>
<li>quelle est la licence,</li>
<li>quelle est la version,</li>
<li>et … quelles sont les dépendances et leurs versions !</li>
</ul>
<p>Ici les dépendances sont des dépendances entre packages, <a href="http://fr.slideshare.net/domenicdenicola/client-side-packages">ce qui n’a rien à voir avec les dépendances entre modules</a>.</p>
<p>Pour faciliter l’utilisation des packages, on utilise un <em>package manager</em>, dont le rôle principal est, à partir d’un id de module (et éventuellement d’un numéro de version), de trouver l’adresse où se trouve les fichiers, les télécharger et les installer localement… et ceci de façon récursive pour les dépendances, ce qui est le gros avantage par rapport à le faire à la mano. Mais sinon, ça n’est pas plus compliqué que ça dans le principe, et ça reste valable pour des fichiers JS ou non, front-end ou non.</p>
<p>Les principaux package managers pour le front-end sont <a href="https://www.npmjs.com/">npm</a> et <a href="http://bower.io">bower</a>.
La grande différence entre les deux est que <strong>npm installe les dépendances de façon relative</strong> : pour chaque package, les dépendances sont installées dans un sous-dossier (node_modules).</p>
<ul>
<li>mon-projet-avec-nmp<ul>
<li>app.js</li>
<li>node_modules<ul>
<li>une-dependance<ul>
<li>main.js</li>
<li>nodes_modules<ul>
<li>une-dependance-indirecte<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>une-autre-dependance<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Alors que <strong>bower prend le parti d’installer les dépendances à plat</strong> : le package et ses dépendances et les dépendances des dépendances sont toutes installées au même niveau dans le même dossier.</p>
<ul>
<li>mon-projet-avec-bower<ul>
<li>app.js</li>
<li>bower_components<ul>
<li>une-dependance<ul>
<li>main.js</li>
</ul>
</li>
<li>une-autre-dependance<ul>
<li>main.js</li>
</ul>
</li>
<li>une-dependance-indirecte<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>L’approche bower semble être une bonne idée car si 2 packages ont la même dépendance (ou des dépendances compatibles semver), une seule est installée. Alors qu’avec npm chaque package installe sa propre dépendance.</p>
<p>Cependant, s’il y a une incompatibilité de versions :</p>
<blockquote>
<p>le package A déclare une dépendance sur X en version 1
le package B déclare une dépendance sur X mais en version 2</p>
</blockquote>
<p>Avec bower, on est coincé : on ne peut installer qu’une seule version. Lors du <code>bower install</code>, il faudra choisir quelle version on garde : soit A devra utiliser X2, soit B devra utiliser X1.</p>
<ul>
<li>mon-app-avec-bower<ul>
<li>bower_components<ul>
<li>package-A</li>
<li>package-B</li>
<li>package-X<ul>
<li>main.js // v1 ou v2 mais pas les 2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Bower appelle cela de la <em>résolution de conflits</em>. Mais concrêtement, cela veut dire qu’on force une dépendance qui n’est pas supportée officiellement par le package en question. Donc on se retrouve responsable de vérifier que le package B fonctionne correctement avec X1. Pas cool :-(</p>
<p>Alors qu’avec npm les versions des dépendances sont respectées, il n’y a pas de question à se poser.</p>
<ul>
<li>mon-app-avec-npm<ul>
<li>node_modules<ul>
<li>package-A<ul>
<li>node_modules<ul>
<li>package-X<ul>
<li>main.js // v1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>package-B<ul>
<li>node_modules<ul>
<li>package-X<ul>
<li>main.js // v2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="resolution-des-dependances-de-module">
      <a class="putainde-Title-anchor" href="#resolution-des-dependances-de-module">#</a>
      Résolution des dépendances de module
    </h1><p>La question est alors :</p>
<blockquote>
<p>“Pourquoi existe-t-il des package managers spécifiquement pour le web front-end ?”</p>
</blockquote>
<p>Réponse :</p>
<blockquote>
<p> “Pour faciliter l’utilisation de modules publiés dans des packages dans le contexte du front-end”</p>
</blockquote>
<p>Super ! Mais concrêtement ?</p>
<p>Et bien, venons en au coeur du problème : <em>la résolution des module-id en fichier</em>. Comme on l’a vu, pour charger un module dans le navigateur, il faut utiliser un loader. Et une de ses tâches est de <em>résoudre</em> les <code>module_id</code> en adresse de fichier.</p>
<p>Au pire il faudrait explicitement dire au loader pour chaque <code>module_id</code> où est le fichier correspondant. Heureusement, ce n’est pas le cas, ni avec requireJS, ni avec les loaders compatibles npm.</p>
<h2 id="amd">
      <a class="putainde-Title-anchor" href="#amd">#</a>
      AMD
    </h2><p>RequireJS et les autres loaders AMD vont assez loin en  matière de <a href="http://requirejs.org/docs/api.html#config">configuration</a> mais souvent , ça revient à décrire des règles du style <em>tous les modules id qui commencent par <code>mon-package</code> sont à chercher dans le dossier <code>./mon-package</code></em>.</p>
<p>En fait, ça n’est pas tout à fait vrai qu’il faille systématiquement configurer les règles de résolution avec RequireJS : il y a une règle par défaut qui stipule que les module_id sont résolus par rapport à une “baseURL” (qui par défaut est celle du fichier html). Donc si on installe tous les packages au même niveau, ça marche par défaut.
C’est pour cela que bower est souvent utilisé pour les packages front-end en AMD car il installe les fichiers à plat et de cette façon on limite le besoin de configuration.</p>
<h2 id="npm">
      <a class="putainde-Title-anchor" href="#npm">#</a>
      NPM
    </h2><p>A l’opposé de cette approche très flexible, il y a nodeJS avec une <a href="https://github.com/substack/browserify-handbook#how-node_modules-works">convention simple et statique</a>, qui dit en gros :</p>
<ul>
<li>si c’est une référence relative, il suffit de suivre le chemin</li>
<li>si c’est une référence absolue, il faut chercher dans le dossier <code>node_modules</code> et ceci de façon récursive jusqu’à arriver à la racine</li>
</ul>
<p>Et donc zéro config, puisque ça n’est pas configurable. Ca peut paraître être une limitation mais c’est une force.</p>
<h1 id="conclusion">
      <a class="putainde-Title-anchor" href="#conclusion">#</a>
      Conclusion
    </h1><p>Si tous les packages en AMD utilisaient la règle de résolution par défaut et que l’on utilisait bower pour les installer, on n’aurait rien à configurer. Mais dans la pratique, ça n’est pas le cas et on se retrouve à devoir configurer les règles de résolution non seulement pour ses propres dépendances (<em>pourquoi pas</em>) mais également pour les dépendances de ses dépendances (<em>et là ça ne va plus</em>).
Et il reste toujours le problème des conflits de version liés à l’approche de mettre les dépendances à plat.</p>
<p>D’un autre côté, il y a la convention nodeJS qui impose des règles simples, non modifiables et qui n’a pas de problème de conflit de versions. C’est à dire qu’il suffit de faire <code>npm install mon-package</code> et ça marche. Une convention qui fait l’unanimité pour le backend JS.</p>
<p>Côté front, on lui reproche de charger les dépendances sans les dédoublonner et de le faire en synchrone, ce qui n’est pas adapté quand le chargement des fichiers se fait via un réseau en http et pas directement depuis un disque local comme sur un serveur.</p>
<p>C’est pourquoi a été inventé <a href="http://http://browserify.org/">browserify</a> qui apporte actuellement <a href="http://putaindecode.fr/posts/js/browserify-all-the-things/">le meilleur des 2 mondes</a> : toujours zéro config selon la convention nodeJS et un système de bundle/build (via une analyse syntaxique du code JS pour détecter les dépendances) afin d’assembler tous les modules en un seul fichier adapté au navigateur.
On peut lui reprocher la nécessité d’une étape de build et le fait que le code source en débug est en un seul fichier mais :</p>
<ol>
<li>de toute façon pour la prod, il y aura une étape de build et en dév, avec un outillage adapté (par exemple <code>watchify</code> qui rebuild en incrémental) ça n’est pas la mer à boire</li>
<li>avec le support des sources-map dans les navigateurs, on peut maintenant retrouver en debug les mêmes noms de fichiers et les mêmes numéro de ligne que dans les fichiers d’origine et les points d’arrêt fonctionnent.</li>
</ol>
<p>Au final, ça en devient même un avantage, car le code que l’on exécute en dev dans le navigateur est très proche de ce que l’on aura en prod, en tout cas plus proche qu’avec requireJS pour lequel on développe sans build et pour lequel il faut écrire à nouveau une config de build pour la mise en prod.</p>
<h1 id="conclusion-de-la-conclusion">
      <a class="putainde-Title-anchor" href="#conclusion-de-la-conclusion">#</a>
      Conclusion de la conclusion
    </h1><p>Ma conclusion est que le point crucial pour faciliter la réutilisation de modules, c’est de <strong>minimiser les contraintes sur les utilisateurs</strong> et donc de se rapprocher d’un usage <em>plug and play</em>. Pour cela il faut une convention forte entre le package manager et le loader/builder de modules, afin d’éviter à l’utilisateur de devoir écrire des configs … la plupart du temps.
Bien sûr, la recherche du “zéro config” n’est pas une fin et c’est particulièrement vrai côté front où les contraintes de chargement de fichiers sont fortes. Et si vous voulez diviser votre bundle en plusieurs fichiers ou si vous voulez des règles d’optimisation complexes pour votre build, il est normal de devoir mettre les mains dans le cambouis.
Mais si au moins le cas d’usage le plus fréquent (compiler son appli en un seul fichier qui sera chargé via un tag <code>script</code>) est simplifié au maximum, alors on pourra sûrement voir côté front, le même état d’esprit que côté back. Et je suis plutôt optimiste, <a href="https://medium.com/@trek/last-week-i-had-a-small-meltdown-on-twitter-about-npms-future-plans-around-front-end-packaging-b424dd8d367a">contrairement à certains</a>.</p>
<p>Utilisateur de la première heure d’<code>AMD</code> et de <code>Dojo loader</code>, puis de <code>bower</code>, je me suis rendu compte de leurs limites et surtout j’ai été régulièrement gêné par la complexité de la configuration… surtout lorsqu’il fallait passer au build. Cela freine la réutilisation de modules tiers et c’est dommage.
Ce n’est pas un problème intrinsèque au format de module et toutes les discussions sur “moi j’aime / j’aime pas la syntaxe AMD” sont secondaires (d’ailleurs <a href="https://www.npmjs.com/package/deamdify">browserify peut fonctionner avec des bibliothèques en AMD</a>).
Mais dans la pratique, nous migrons vers la solution <code>npm + browserify</code> et c’est vraiment moins compliqué.</p>
<p>J’espère que cet article vous permettra d’y voir plus clair, de dépasser les querelles sur les préférences personnelles de chacun, et de vous aider à faire votre choix.
Je n’estime pas être un expert du sujet, il y a sûrement beaucoup de choses à compléter ou préciser, donc n’hésitez pas à réagir.</p>
<p>Pour aller plus loin et regarder vers le futur que nous amène ES6, il y a cet <a href="https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0">excellent article</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/</guid>
            <pubDate>Mon, 15 Dec 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Première application Ember. Suite et fin.]]></title>
            <description><![CDATA[<p>L’<a href="/posts/js/premiere-app-ember">article précédent</a> vous a accompagné pour la création d’une première application <a href="http://emberjs.com">Ember</a>. 
Mais il faut bien reconnaître que l’exemple était très simple et que, du coup, le mérite est faible. 
Pour se  rattraper, on va complexifier un peu les choses.</p>
<p>Tout comme dans l’article précédent, nous détaillerons régulièrement les concepts mis en œuvre. Parce que vous le valez bien.</p>
<h2 id="sommaire">
      <a class="putainde-Title-anchor" href="#sommaire">#</a>
      Sommaire
    </h2><ul>
<li><a href="#edition-d-une-serie">Édition d’une série</a><ul>
<li><a href="#routes-imbriquees">Routes imbriquées</a></li>
<li><a href="#-code-outlets-code-">Outlets</a></li>
<li><a href="#liens-entre-routes">Liens entre routes</a></li>
<li><a href="#enregistrement-des-modifications">Enregistrement des modifications</a></li>
<li><a href="#actions-sur-les-transitions">Actions sur les transitions</a></li>
</ul>
</li>
<li><a href="#relations-avec-ember-data">Relations avec Ember Data</a></li>
<li><a href="#insertion-d-un-gabarit">Insertion d’un gabarit</a></li>
<li><a href="#creation-d-une-nouvelle-serie">Création d’une nouvelle série</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="edition-d-une-serie">
      <a class="putainde-Title-anchor" href="#edition-d-une-serie">#</a>
      Édition d’une série
    </h2><p>On veut pouvoir basculer depuis la fiche d’une série vers son édition en mode <em>in place</em>. C’est-à-dire
en <strong>remplaçant</strong> la zone de visualisation de cette fiche par sa zone d’édition.</p>
<p>On accède à la fiche en mode visualisation à l’URL <code>/series/{id}/</code> et en mode édition à l’URL <code>/series/{id}/edit</code>. Évidemment, 
on reconstruit uniquement la zone de la fiche et non l’application entière (et donc ni l’en-tête ni la liste des séries).</p>
<h3 id="routes-imbriquees">
      <a class="putainde-Title-anchor" href="#routes-imbriquees">#</a>
      Routes imbriquées
    </h3><p>Commençons par définir une nouvelle route <code>edit</code>, sous-route de <code>seriesItem</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'series'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'seriesItem'</span>, { path: <span class="hljs-string">'/:seriesItem_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
    });
  });
});
</code></pre>
<p>Pour que notre nouvelle route affiche la fiche en mode édition, on doit - <a href="/posts/js/debuter-avec-ember/#les-fondamentaux">rappelez-vous</a> - impérativement suivre les 
<a href="http://emberjs.com/guides/concepts/naming-conventions/">conventions de nommage</a> et créer un gabarit <code>edit.hbs</code> dans le 
répertoire <code>/app/templates/series/series-item/</code> :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/edit.hbs` --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"cancel"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cancel"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"title"</span>&gt;</span>{{input id="title" type="text" value=title}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Series's first album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"scriptwriter"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"scriptwriter"</span>&gt;</span>Scriptwriter<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="scriptwriter" type="text" value=scriptwriter required="required"}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"illustrator"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"illustrator"</span>&gt;</span>Illustrator<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="illustrator" type="text" value=illustrator}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"publisher"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"publisher"</span>&gt;</span>Publisher<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="publisher" type="text" value=publisher}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"summary"</span>&gt;</span>{{textarea value=summary rows="10"}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
</code></pre>
<p>À ce stade, naviguer sur <code>/series/{@id}/edit</code> ne lève pas d’erreur mais n’a aucun effet. En effet, on a
défini une route imbriquée mais conservé le gabarit <code>/app/templates/series/series-item.hbs</code> inchangé. L’activation de la route <code>series.seriesItem</code> 
affiche donc toujours ce gabarit, même dans le cas d’une sous-route telle que <code>series.seriesItem.edit</code>. </p>
<h3 id="outlets">
      <a class="putainde-Title-anchor" href="#outlets">#</a>
      <code>outlets</code>
    </h3><p>La solution est à aller chercher du côté du concept d’<code>{{outlet}}</code> défini dans l’<a href="/posts/js/premiere-app-ember/#-code-outlet-code-et-routes-imbriquees">article précédent</a>.
Un <code>{{outlet}}</code> est nécessaire <strong>à chaque fois qu’on définit un niveau d’imbrication.</strong> Mais comme on veut quand même continuer à afficher la série à 
l’URL <code>/series/{@id}/</code>, on va utiliser la <strong>route implicite</strong> <code>series.seriesItem.index</code> (cf. <a href="/posts/js/premiere-app-ember/#routes-et-controleurs-implicites">article précédent</a>) 
et son gabarit, dans lequel on va copier l’ancien contenu de <code>series-item.hbs</code>.</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/index.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Series's first album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dl</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>scriptwriter<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{scriptwriter}} <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>illustrator<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{illustrator}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>publisher<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{publisher}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">p</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"summary"</span>&gt;</span>
      {{summary}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Le gabarit <code>series-item.hbs</code> est quant à lui modifié car il doit changer en fonction de la sous-route activée.
Et puisqu’on ne veut rien afficher de plus, son contenu se résume à un <code>{{outlet}}</code> :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series-item.hbs --&gt;</span>
{{outlet}}
</code></pre>
<p>Et voilà ! L’affichage de l’URL <code>/series/{@id}/</code> est inchangé alors que l’URL <code>/series/{@id}/edit</code> 
affiche désormais le formulaire d’édition.</p>
<h3 id="liens-entre-routes">
      <a class="putainde-Title-anchor" href="#liens-entre-routes">#</a>
      Liens entre routes
    </h3><p>Pour pouvoir plus facilement basculer en mode édition, on ajoute un lien vers la route correspondante grâce à <code>link-to</code> 
(cf. <a href="http://emberjs.com/guides/templates/links/">doc officielle</a>).</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/index.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    {{#link-to 'series.seriesItem.edit' id class="edit"}}edit{{/link-to}}
    <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
    ...
</code></pre>
<p>On note que la route vers laquelle le lien pointe est préfixée par <code>series</code> parce qu’on a défini une route et non une resource.
En effet, une ressource réinitialise l’espace de nommage et permet donc des noms de routes plus courts. Pour pouvoir pointer vers <code>seriesItem.edit</code> on aurait donc dû
remplacer <code>this.route(&#39;seriesItem&#39;, ...</code> par <code>this.resource(&#39;seriesItem&#39;, ...</code>.</p>
<p>On peut désormais éditer notre série. On remarque au passage que la modification du titre de la série le met également à jour en temps réel dans la liste des séries grâce
au <em>binding</em> (cf. <a href="/posts/js/premiere-app-ember/#-em-bindings-em-et-mise-a-jour-des-gabarits">article précédent</a>).</p>
<h3 id="enregistrement-des-modifications">
      <a class="putainde-Title-anchor" href="#enregistrement-des-modifications">#</a>
      Enregistrement des modifications
    </h3><p>Nous allons maintenant rendre opérationnels nos deux boutons d’édition <em>annuler</em> et <em>valider</em>. Pour cela, on commence par associer des actions à nos boutons :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/edit.hbs` --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">submit</span>"}} <span class="hljs-attribute">class</span>=<span class="hljs-value">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reset"</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">cancel</span>"}} <span class="hljs-attribute">class</span>=<span class="hljs-value">"cancel"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
...
</code></pre>
<p>Comme il s’agit de manipulations sur le modèle et de transitions entre routes, les actions correspondantes seront traitées par la route.</p>
<pre><code class="lang-js"><span class="hljs-comment">// app/routes/series/series-item/edit.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
  model: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem'</span>);
  },
  actions: {
    submit: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).save().then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>);
      }.bind(<span class="hljs-keyword">this</span>));
    },

    cancel: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).rollback();
      <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>);
    }
  }
});
</code></pre>
<p>Quelques mots sur ces quelques lignes : </p>
<ul>
<li>Dans une <code>route</code>, le modèle courant est récupéré via <code>this.modelFor(&#39;nomRoute&#39;)</code>. Ici, on récupère explicitement le modèle chargé automatiquement 
(par convention) par la route mère <code>seriesItem</code>. Notez qu’on aurait pu omettre la récupération du modèle complètement car la route mère s’en occupe pour nous.</li>
<li>Une fois le modèle récupéré, on peut invoquer les méthodes apportées par <a href="https://github.com/emberjs/data">Ember Data</a>.</li>
<li>Pour un <code>cancel</code>, on invoque <code>rollback()</code> : toutes les modifications effectuées sont annulées et le modèle est réinitialisé.</li>
<li>Pour un <code>submit</code>, on invoque un <code>save()</code> qui enregistre les modifications apportées au modèle dans le <em>magasin</em> 
(<a href="http://emberjs.com/api/data/classes/DS.Store.html">Store</a>) d’<a href="https://github.com/emberjs/data">Ember Data</a>.</li>
<li>Les opérations effectuées sur les modèles sont bien souvent asynchrones puisque, dans le cas nominal, elles font 
intervenir des API REST pour enregistrer ou mettre à jour les données depuis un serveur. Dans le cas où l’on souhaite
attendre la fin du traitement pour effectuer une action (comme ici dans le cas du <code>save</code>), il est nécessaire d’utiliser
les <em>promesses</em> (<code>promises</code>) qu’<a href="https://github.com/emberjs/data">Ember Data</a> renvoie (<code>.then(...)</code>). Dans le cas contraire, le code serait
exécuté avant la fin du traitement et ne permettrait pas de proposer un retour utilisateur propre (gestion des cas d’erreurs notamment).</li>
<li>Les transitions entre routes sont possibles via <code>this.transitionTo(&#39;nomRoute&#39;)</code>.</li>
</ul>
<h3 id="actions-sur-les-transitions">
      <a class="putainde-Title-anchor" href="#actions-sur-les-transitions">#</a>
      Actions sur les transitions
    </h3><p>Mais je voudrais encore ajouter une dernière petite cerise sur ce gâteau : annuler automatiquement toutes les modifications effectuées
sur la série dès que l’on quitte la route. <a href="http://emberjs.com">Ember</a> prévoit en effet des mécanismes avancés pour travailler sur les transitions entre 
routes (cf. <a href="http://emberjs.com/guides/routing/preventing-and-retrying-transitions/">doc officielle</a>). En particulier <code>willTransition</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// app/routes/series/series-item/edit.js</span>
  actions: {
    ...
    willTransition: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).rollback();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
  }
</code></pre>
<p>L’action est très simple ici mais on imagine facilement comment on pourrait ajouter une confirmation et déterminer, en fonction
de la réponse, si l’on doit continuer la transition ou l’abandonner.</p>
<h2 id="relations-avec-ember-data">
      <a class="putainde-Title-anchor" href="#relations-avec-ember-data">#</a>
      Relations avec <a href="https://github.com/emberjs/data">Ember Data</a>
    </h2><p><a href="https://github.com/emberjs/data">Ember Data</a> permet de définir des relations entre nos modèles. Ajoutons donc des albums à nos séries :</p>
<p>On définit d’abord une nouvelle entité <code>Album</code> et ses propriétés et on indique que cet album était associé à une série via la propriété <code>series</code> 
et à la méthode <code>DS.belongsTo</code> (cf. <a href="http://emberjs.com/api/data/#method_belongsTo">doc officielle</a>). 
Ce qui se traduit plus loin, dans l’initialisation des données par <code>series: 1</code> où 1 est l’identifiant de la 
série en question.</p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/models/album.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">var</span> Album = DS.Model.extend({
  title               : DS.attr(<span class="hljs-string">'string'</span>),
  publicationDate     : DS.attr(<span class="hljs-string">'date'</span>),
  number              : DS.attr(<span class="hljs-string">'number'</span>),
  coverName           : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'default.jpg'</span>}),
  series              : DS.belongsTo(<span class="hljs-string">'seriesItem'</span>),
  coverUrl: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">'/assets/images/albums/covers/'</span> + <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'coverName'</span>);
  }.property(<span class="hljs-string">'coverName'</span>)
});

Album.reopenClass({
  FIXTURES: [{
    id: <span class="hljs-number">1</span>,
    title: <span class="hljs-string">'Somewhere Within the Shadows'</span>,
    publicationDate: <span class="hljs-string">'Nov 2000'</span>,
    number: <span class="hljs-number">1</span>,
    coverName: <span class="hljs-string">'blacksad-1.jpg'</span>,
    series: <span class="hljs-number">1</span>
  }, {
    id: <span class="hljs-number">2</span>,
    title: <span class="hljs-string">'Arctic-Nation'</span>,
    publicationDate: <span class="hljs-string">'Mar 2003'</span>,
    number: <span class="hljs-number">2</span>,
    coverName: <span class="hljs-string">'blacksad-2.jpg'</span>,
    series: <span class="hljs-number">1</span>
  }]
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Album;
</code></pre>
<p>On modifie ensuite le modèle <code>SeriesItem</code> pour indiquer une relation inverse grâce à la propriété <code>albums</code> et à 
la méthode <code>DS.hasMany</code> (cf. <a href="http://emberjs.com/api/data/#method_hasMany">doc officielle</a>) puis affecter la liste des 
identifiants des albums à la série via <code>albums: [1, 2]</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/models/series-item.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">var</span> SeriesItem = DS.Model.extend({
    title               : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'New Series'</span>}),
    ...
    albums              : DS.hasMany(<span class="hljs-string">'album'</span>, {async: <span class="hljs-literal">true</span>})
});

SeriesItem.reopenClass({
    FIXTURES: [{
    id: <span class="hljs-number">1</span>,
    ...
    albums: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
    }, ...
]});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> SeriesItem;
</code></pre>
<h2 id="insertion-d-un-gabarit">
      <a class="putainde-Title-anchor" href="#insertion-d-un-gabarit">#</a>
      Insertion d’un gabarit
    </h2><p>Maintenant qu’on a des albums pour nos séries, on serait bien intéressé de les voir s’afficher. Seulement voilà, on veut juste les
afficher à côté de la visualisation d’une série. On ne veut rien proposer d’autre pour ces albums que le <em>binding</em> des propriétés et
leur affichage. Pas besoin de route ou de contrôleur. On va pour cela utiliser un outil particulier permettant simplement
d’insérer (d’afficher) un gabarit au sein d’une route existante via le <em>helper</em> : <code>render</code> (cf. 
<a href="http://emberjs.com/guides/templates/rendering-with-helpers/#toc_the-code-view-code-helper">doc officielle</a>).</p>
<p>On modifie donc le gabarit <code>/series/series-item.hbs</code> pour qu’à côté de la fiche d’une série soit affichée la liste de ses albums : </p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item.hbs --&gt;</span>

{{outlet}}

<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-albums"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span>&gt;</span>
        {{#each album in albums}}
            {{render 'partials/albumItem' album}}
        {{/each}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/partials/album-item.hbs --&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"album"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>volume<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{number}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>date<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{publicationDate}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
</code></pre>
<h2 id="creation-d-une-nouvelle-serie">
      <a class="putainde-Title-anchor" href="#creation-d-une-nouvelle-serie">#</a>
      Création d’une nouvelle série
    </h2><p>Histoire de terminer en beauté on va ajouter vite fait la création d’une série.</p>
<p>Comme on commence à avoir l’habitude, on fait ça en deux coups de cuillère à pot : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'series'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'seriesItem'</span>, { path: <span class="hljs-string">'/:seriesItem_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
    });
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'create'</span>);
  });
});
</code></pre>
<pre><code class="lang-js"><span class="hljs-comment">// /app/routes/series/create.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
  model: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.createRecord(<span class="hljs-string">'seriesItem'</span>);
  },

  renderTemplate: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.render(<span class="hljs-string">'series.seriesItem.edit'</span>);
  },

  actions: {
    submit: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).save().then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>, <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>));
      }.bind(<span class="hljs-keyword">this</span>));
    },

    cancel: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).rollback();
      <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series'</span>);
    },

    willTransition: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).rollback();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
  }
});
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
    ...
      {{/each}}
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-item"</span>&gt;</span>
          {{#link-to 'series.create' class="add"}}add{{/link-to}}
        <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    ...
</code></pre>
<p>Les points importants à noter : </p>
<ul>
<li>Le modèle est, cette fois-ci, créé à l’activation de la route via <code>this.store.createRecord(...)</code>.</li>
<li>Comme on ne souhaite pas proposer de gabarit propre pour cette route, on utilise <code>renderTemplate</code> pour indiquer à <a href="http://emberjs.com">Ember</a> quel
gabarit il doit utiliser. </li>
<li>Les actions <code>submit</code>, <code>cancel</code> et <code>willTransition</code> sont sensiblement les mêmes que pour l’édition mais travaillent sur un modèle différent et 
renvoient vers d’autres routes.</li>
<li>On note le passage du modèle lors de la transition en cas de <code>submit</code>.</li>
<li>Il serait légitime de se poser la question de réutilisation de code entre ces deux routes, compte tenu des similarités. Ce n’est pas l’objet 
de l’article mais pourrait être envisagé à l’aide d’un <code>mixin</code> partagé (cf. <a href="http://emberjs.com/api/classes/Ember.Mixin.html">doc officielle</a>).  </li>
</ul>
<h2 id="conclusion">
      <a class="putainde-Title-anchor" href="#conclusion">#</a>
      Conclusion
    </h2><p>Au travers de cet article et des précédents, j’espère vous avoir donné un aperçu du modèle de développement que propose
<a href="http://emberjs.com">Ember</a>. Vous avez compris, j’espère, qu’<a href="http://emberjs.com">Ember</a> est un véritable framework avec des opinions fortes et qu’il doit être pris comme
tel ou laissé de côté pour une solution plus légère selon vos besoins.</p>
<p>Mais j’ai également essayé d’aller plus en profondeur sur certains aspects et de montrer des cas d’utilisation concrets. 
Ce dernier article montre qu’il est également possible de fournir à <a href="http://emberjs.com">Ember</a> 
des configurations explicites afin d’aller plus loin que les conventions par défaut.</p>
<p>Maintenant, vous n’avez plus d’excuses… Vous ne pourrez pas dire que vous ne connaissiez pas. </p>
<p><em>Note: les sources de l’application exemple sont <a href="https://github.com/bmeurant/ember-articles/tree/premiere-app-ember-suite">disponibles sur github</a>.</em></p>
]]></description>
            <link>http://putaindecode.fr/posts/js/premiere-app-ember-suite/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/premiere-app-ember-suite/</guid>
            <pubDate>Tue, 09 Dec 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[L'injection de dépendances en PHP]]></title>
            <description><![CDATA[<p>Salutations ! Aujourd’hui, je suis venu te parler de PHP (sisi), et notamment du mécanisme d’injection de dépendances avec lequel tu n’es peut-être pas familier. Au menu, des objets, des usines et des conteneurs, alors enfile ton bonnet et tes gants, on va bouger du bordel !</p>
<h2 id="l-injection-de-dependances-c-est-quoi-ce-truc">
      <a class="putainde-Title-anchor" href="#l-injection-de-dependances-c-est-quoi-ce-truc">#</a>
      L’injection de dépendances ? C’est quoi ce truc ?
    </h2><p>Si tu fais de la programmation orientée objet, il est fort probable que ce terme ne te soit pas totalement inconnu. En PHP, on a principalement commencé à nous en rebattre les oreilles avec l’avènement de Symfony, qui est aujourd’hui le framework web majeur pour ce langage. Fabien Potencier, créateur et <em>lead developer</em> de Symfony, cite en exemple sur <a href="http://fabien.potencier.org/article/11/what-is-dependency-injection">son blog</a> cette définition :</p>
<blockquote>
<p><em>Dependency Injection is where components are given their dependencies through their constructors, methods, or directly into fields.</em></p>
<p>Quelqu’un</p>
</blockquote>
<p>C’est clair, non ? Non ? Bon. Imaginons un bout d’appli PHP, où l’on désire gérer des personnes qui ont chacune une adresse postale. Si tu n’as pas trop dormi à la fac le vendredi matin après ta cuite du jeudi soir, tu devrais pouvoir déterminer tout seul qu’on va avoir besoin d’une classe <code>Person</code> et d’une classe <code>Address</code> :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$number</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$street</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$zipcode</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$city</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;number = <span class="hljs-variable">$number</span>;
        <span class="hljs-variable">$this</span>-&gt;street = <span class="hljs-variable">$street</span>;
        <span class="hljs-variable">$this</span>-&gt;zipcode = <span class="hljs-variable">$zipcode</span>;
        <span class="hljs-variable">$this</span>-&gt;city = <span class="hljs-variable">$city</span>;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;
}
</code></pre>
<p>Tu noteras que je n’ai pas encore écrit le constructeur de la classe <code>Person</code>. Justement. Le développeur naïf procédera de la façon suivante :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-keyword">new</span> Address(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>);
    }
}

<span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">5</span>, <span class="hljs-string">'Allée des Rosiers'</span>, <span class="hljs-number">78670</span>, <span class="hljs-string">'Villennes-sur-Seine'</span>);
</code></pre>
<p>Alors oui, hein, ça marche, et on peut instancier une personne et son adresse en une ligne de code. Le problème est qu’en procédant ainsi, les classes <code>Person</code> et <code>Address</code> deviennent <strong>étroitement couplées</strong> : la classe <code>Person</code> est inutilisable sans la classe <code>Address</code>, et pire, le code interne de la première serait impacté par un changement sur la seconde.</p>
<p>Pas convaincu ? Qu’est-ce qui se passera le jour où on lèvera 10 millions de dollars pour internationaliser l’appli ?</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$country</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>)</span>
    </span>{
        <span class="hljs-comment">// ...</span>
        <span class="hljs-variable">$this</span>-&gt;country = <span class="hljs-variable">$country</span>;
    }
}
</code></pre>
<p>Ah bah mince, il faut aussi modifier le constructeur de la classe <code>Person</code> pour y ajouter le nouveau paramètre <code>$country</code> de manière symétrique. C’est ballot.</p>
<p>Dans l’idéal, la classe <code>Person</code> devrait se foutre royalement de la façon dont la classe <code>Address</code> fonctionne. Une personne a toujours besoin d’une adresse, mais ça n’implique certainement pas que ce soit le rôle de cette classe de la forger. Alors, on fait comment ? C’est très simple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Address <span class="hljs-variable">$address</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-variable">$address</span>;
    }
}
</code></pre>
<p>L’injection de dépendances, c’est précisément ça. Si une classe a besoin d’une instance d’une autre classe, que ce soit dans son constructeur ou dans une autre méthode (un <em>setter</em> par exemple), alors elle prend cette instance directement en paramètre et ne s’occupe certainement pas de l’instancier elle-même. Procéder ainsi permet d’écrire du code <strong>découplé</strong>, évitant toute interdépendance entre ses différents composants, ce qui les rend <strong>réutilisables</strong> sans devoir embarquer toute la smala au passage, mais également beaucoup plus <strong>maintenables</strong> puisque chaque classe s’occupe de ses fesses et pas de celles des autres. En PHP, on tire également parti du <em>type hinting</em> d’objets, qui permet de s’assurer d’emblée que notre paramètre est une instance de la classe voulue et non pas n’importe quoi.</p>
<p>Alors oui, je t’entends déjà grommeler :</p>
<blockquote>
<p>Ouais mais du coup je dois instancier une adresse moi-même à chaque fois que je crée une personne, c’est relou ton truc</p>
</blockquote>
<p>Si telle est ton opinion, <del>tu ne mérites pas de vivre</del> je t’invite à poursuivre la lecture de cet article avec l’entrain qui te caractérise.</p>
<h2 id="l-usine-a-la-rescousse">
      <a class="putainde-Title-anchor" href="#l-usine-a-la-rescousse">#</a>
      L’usine à la rescousse
    </h2><p>Je ne sais pas si tu sais, mais il existe un <em>design pattern</em> assez répandu en programmation orientée objet que l’on nomme <strong>factory</strong> (usine en français, d’où le titre pourrave de cette partie).</p>
<p>En gros, le principe est de créer une classe dont le rôle est d’instancier d’autres classes, précisément dans le cas où une telle tâche demande plusieurs lignes de code, afin justement d’éviter de répéter celles-ci. Pour reprendre notre exemple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>)</span>
    </span>{
        <span class="hljs-variable">$address</span> = <span class="hljs-keyword">new</span> Address(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>);

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-variable">$address</span>);
    }
}
</code></pre>
<p>Pour le coup, tu te dis peut-être que je te prends allègrement pour un idiot : pourquoi se prendre le chou à créer une classe qui fait exactement ce qu’on faisait directement dans <code>Person</code> au départ ? Parce que tu n’as pas bien écouté, <del>petit c</del> jeune padawan. L’objectif en utilisant l’injection de dépendances, c’est que nos classes ne soient pas dépendantes (justement) les unes des autres si ce n’est pas justifié. Une personne a beau avoir besoin d’une adresse, on pourrait fort bien imaginer les utiliser l’une sans l’autre (tu comprendras à la partie suivante). Dans le cas de <code>PersonFactory</code>, notre objectif est justement de créer une personne à partir des différents composants d’une adresse en une ligne de code, pour conserver la simplicité du code métier qui te tient tant à coeur (et tu as bien raison, au fond). Seulement, <code>Person</code> et <code>Address</code> restent utilisables avec ou sans <code>PersonFactory</code> : l’objectif est atteint, petit navire.</p>
<p>Tant qu’on en est à se simplifier la vie :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getZipcodeFromDistrict</span><span class="hljs-params">(<span class="hljs-variable">$district</span>)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-number">75000</span> + <span class="hljs-variable">$district</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createParigot</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$district</span>)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;createPerson(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$this</span>-&gt;getZipcodeFromDistrict(<span class="hljs-variable">$district</span>), <span class="hljs-string">'Paris'</span>, <span class="hljs-string">'France'</span>);
    }
}
</code></pre>
<p>Tu t’imagines faire ce genre de chose dans la classe <code>Person</code> ou la classe <code>Address</code> ? J’espère bien que non.</p>
<h2 id="oui-ca-sert-a-quelque-chose-une-interface">
      <a class="putainde-Title-anchor" href="#oui-ca-sert-a-quelque-chose-une-interface">#</a>
      Oui, ça sert à quelque chose une interface
    </h2><p>Dans tes souvenirs brumeux de vendredis matins étudiants (<em>cf. supra</em>), tu retrouveras peut-être des bribes de cours portant sur les <strong>interfaces</strong>. Si tout ce que tu as retenu, c’est qu’”une classe toute vide ça sert à rien”, lis donc ce qui va suivre.</p>
<p>Une interface, c’est avant tout un contrat. Une classe qui <strong>implémente</strong> une interface s’engage à implémenter toutes les méthodes que celle-ci déclare. Sans même lire le code de ladite classe, on sait donc d’emblée comment on peut jouer avec et comment elle est censée fonctionner.</p>
<p>Poursuivons encore sur notre exemple et imaginons qu’on doive gérer des adresses ne respectant pas le format utilisé jusqu’ici, par exemple une adresse plus basique constituée d’une unique chaîne de caractères :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAddress</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;
}
</code></pre>
<p>Dans l’état actuel des choses, on ne peut pas utiliser une instance de cette classe avec <code>Person</code>, puisque le constructeur de cette dernière attend une instance d’<code>Address</code>. Qu’à cela ne tienne !</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAddress</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;address;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;number.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;street.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;zipcode.<span class="hljs-string">' '</span>.<span class="hljs-variable">$this</span>-&gt;city.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;country;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(AddressInterface <span class="hljs-variable">$address</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-variable">$address</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;address;
    }
}

<span class="hljs-variable">$address</span> = <span class="hljs-keyword">new</span> BasicAddress(<span class="hljs-string">'test test un deux un deux'</span>);
<span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-variable">$address</span>);

<span class="hljs-variable">$factory</span> = <span class="hljs-keyword">new</span> PersonFactory();
<span class="hljs-variable">$robert</span> = <span class="hljs-variable">$factory</span>-&gt;createParigot(<span class="hljs-number">1</span>, <span class="hljs-string">'Rue de la Paix'</span>, <span class="hljs-number">2</span>);

<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$person</span>-&gt;getAddress()-&gt;getFullAddress()); <span class="hljs-comment">// 'test test un deux un deux'</span>
<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$robert</span>-&gt;getAddress()-&gt;getFullAddress()); <span class="hljs-comment">// '1, rue de la Paix, 75002 Paris, France'</span>
</code></pre>
<p>Tu vois l’idée ? En demandant une instance de n’importe quelle classe implémentant <code>AddressInterface</code> au lieu d’une instance d’<code>Address</code> spécifiquement, on se donne plus de mou et on réduit encore davantage le couplage entre nos classes. Qu’on crée une personne avec une instance d’<code>Address</code> ou de <code>BasicAddress</code>, on pourra dans tous les cas obtenir l’adresse postale de ladite personne de la même façon.</p>
<h2 id="elle-contient-ta-fiancee-hein-mitch">
      <a class="putainde-Title-anchor" href="#elle-contient-ta-fiancee-hein-mitch">#</a>
      Elle contient ta fiancée, hein Mitch ?
    </h2><p>Tu auras peut-être tiqué sur un détail du dernier exemple : le fait de ne pas faire de <code>PersonFactory</code> une classe statique (beurk) nous oblige à l’instancier pour pouvoir l’utiliser ; ce qui, à n’en pas douter, t’aura mené à te dire “arf, ça va m’en faire des <code>new MachinFactory()</code> pour instancier mes objets”. Là encore, l’injection de dépendances peut nous aider, quoique de manière indirecte : en utilisant un conteneur d’injection de dépendances.</p>
<p>Un conteneur (ça sera plus court) peut <em>grosso modo</em> être comparé à une grosse <em>factory</em> capable d’instancier plusieurs classes. En pratique, afin d’éviter d’écrire et de devoir maintenir une classe monolithique, on en fera plutôt quelque chose qui fait appel aux différentes <em>factories</em>. Poursuivons sur notre exemple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionContainer</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPersonFactory</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PersonFactory();
    }
}
</code></pre>
<p>Mais ça ne s’arrête évidemment pas là. De par le fait d’utiliser l’injection de dépendances à grande échelle, on a souvent besoin d’instancier nous-même les objets dont on a besoin. Dans certains cas, ce seront toujours les mêmes, ce qui vaut pour les <em>factories</em> mais pas que : pense aux différentes librairies qui composent un projet web, par exemple. Ce ne serait pas génial que les différentes instances de ces classes soient accessibles via le conteneur pour pouvoir y accéder à l’envi ?</p>
<pre><code class="lang-php"><span class="hljs-variable">$container</span> = <span class="hljs-keyword">new</span> DependencyInjectionContainer();

<span class="hljs-variable">$container</span>-&gt;getOrm()-&gt;performSomeNaughtyQuery();
<span class="hljs-variable">$container</span>-&gt;getTwig()-&gt;renderUglyTemplate();
<span class="hljs-variable">$container</span>-&gt;getTranslator()-&gt;translate(<span class="hljs-string">'Putain de code !'</span>);
</code></pre>
<p>Les objets ainsi gérés par un tel conteneur deviennent dès lors des <strong>services</strong> dans ton application.</p>
<blockquote>
<p>Mais ça signifie instancier un service à chaque appel ?</p>
</blockquote>
<p>Pas nécessairement ! Il existe des mécanismes permettant de conserver une même instance pour la servir lors des appels suivants. Cela sort un peu du cadre de cet article, mais je t’invite vivement à jeter un oeil à <a href="http://php-di.org/">PHP-DI</a>, qui est un conteneur d’injection de dépendances très bien fichu que tu peux utiliser dans ton projet si tu le souhaites.</p>
<h2 id="epilogue">
      <a class="putainde-Title-anchor" href="#epilogue">#</a>
      Épilogue
    </h2><p>Si tu développes en PHP, j’espère t’avoir montré qu’il est possible d’écrire du code plus maintenable et plus élégant en utilisant l’injection de dépendances. Dans le cas contraire, sache que ce concept est très répandu dans les langages orientés objet d’une manière générale - après tout, <a href="https://docs.angularjs.org/guide/di">on en retrouve même dans Angular</a>.</p>
<p>Bon code, et n’oublie pas, on ne met pas en prod le vendredi, c’est mal. Allez, file !</p>
]]></description>
            <link>http://putaindecode.fr/posts/php/injection-dependances/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/php/injection-dependances/</guid>
            <pubDate>Wed, 05 Nov 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Laissez-vous pousser la barbe, apprenez à écrire des Makefiles]]></title>
            <description><![CDATA[<p>À l’heure où tout le monde se rue sur des outils comme <a href="/posts/js/introduction-gulp/">Gulp</a>,
<a href="/posts/js/premiers-pas-avec-grunt/">Grunt</a> ou autres <a href="https://rubygems.org/gems/rake">Rake</a>, certains irréductibles (dont je
fais partie) ont fait le choix d’employer un des outils les plus standards et
emblématiques dont tout développeur a entendu parler au moins une fois dans sa
vie : <em>Make</em>.</p>
<p>Si de prime abord on a l’impression d’un système assez archaïque (ce qui n’est
pas toujours forcément faux), on se rend rapidement compte que <em>Make</em>, couplé à
une petite dose de scripting shell permet rapidement de mettre en place un moyen
de compiler ses fichiers et de lancer des tâches.</p>
<p>Les fichiers de configuration de <em>Make</em> sont appellés <em>Makefiles</em> (oui, ce sont
eux qui ont donné leurs noms aux <code>(Gulp|Grunt|Rake)files</code>). Les instructions
qu’ils contiennent sont exécutées grâce à la commande <code>make</code> dans votre
terminal.</p>
<h1 id="hello-world">
      <a class="putainde-Title-anchor" href="#hello-world">#</a>
      Hello World
    </h1><p>Je vous propose de commencer en douceur par un classique <em>Hello World</em>. On va
simplement définir une tâche <code>hello-world</code> dont l’action va être d’afficher
<em>“Hello, world”</em> à l’écran (boooring).</p>
<pre><code class="lang-make">hello-world:
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>
</code></pre>
<p>Première remarque importante, les indentations dans un <em>Makefile</em> <strong>doivent</strong>
être faites avec des tabulations. Oui, je sais, c’est moche, on dirait du
Python, mais c’est comme ça.</p>
<p>Voilà le genre d’erreurs qu’on se prend si on met des espaces à la place des
tabulations :</p>
<pre><code>Makefile:2: <span class="hljs-keyword">*</span><span class="hljs-keyword">*</span><span class="hljs-keyword">*</span> séparateur manquant . Arrêt.
</code></pre><p>Pour exécuter notre commande, il nous suffit de lancer <code>make hello-world</code> dans
un terminal :</p>
<pre><code class="lang-console">$ <span class="hljs-keyword">make</span> hello-world
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello, world"</span>
Hello, world
</code></pre>
<p>Décortiquons un peu cette exécution. Pour chaque commande qu’il exécute, <em>Make</em>
affiche la commande complète avant d’afficher la sortie standard de ladite
commande. C’est souvent très pratique car toutes les variables (on va revenir là dessus)
qu’on met dans la commande sont résolues, et on voit clairement ce que <em>Make</em>
exécute. Par contre, dans certains cas on s’en fout un peu, on peut alors
préfixer la ligne à rendre silencieuse par un <code>@</code>, comme ça :</p>
<pre><code class="lang-make">hello-world:
    @ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>make hello-world
<span class="hljs-constant">Hello,</span> world
</code></pre>
<h1 id="regles-cibles-recettes-et-pre-requis">
      <a class="putainde-Title-anchor" href="#regles-cibles-recettes-et-pre-requis">#</a>
      Règles, cibles, recettes et pré-requis
    </h1><p>OK, jusque là c’est génial, on a un super outil pour lancer des commandes qu’on
pourrait déjà stocker dans un bête script shell. Pas super utile finalement.</p>
<p>Bon, on va corser un peu les choses et commencer par définir un peu de
terminologie avant que vous soyez totalement largués.</p>
<p>Un <em>Makefile</em> est une collection de <strong>règles</strong>, chacune étant composée d’une
<strong>cible</strong>, de <strong>pré-requis</strong> (ou pas) et d’une <strong>recette</strong>. Dans notre exemple
précédent, <code>hello-world</code> est la cible et <code>@ echo &quot;Hello, world&quot;</code> est la recette
de la règle. Elle ne spécifie par contre pas de pré-requis.</p>
<p>Relisez trois ou quatre fois le paragraphe précédent jusqu’à ce que ce soit bien
imprimé.</p>
<p>Vous l’aurez compris, on invoque une règle depuis la ligne de commande en
spécifiant le nom de sa cible après la commande <code>make</code>. Si on ne précise rien,
c’est la première règle trouvée qui est exécutée (donc dans notre cas,
<code>hello-world</code>).</p>
<p>Les pré-requis sont déclarés après la cible. On pourrait par exemple ajouter un
<code>sauter-une-ligne</code> comme pré-requis à notre cible <code>hello-world</code> :</p>
<pre><code class="lang-make">hello-world: sauter-une-ligne
    @ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>

sauter-une-ligne:
    @ <span class="hljs-built_in">echo</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>make hello-world

<span class="hljs-constant">Hello,</span> world
</code></pre>
<p>Facile, non ? Ok alors on peut <em>vraiment</em> attaquer les choses sérieuses.</p>
<h1 id="construire-des-fichiers">
      <a class="putainde-Title-anchor" href="#construire-des-fichiers">#</a>
      Construire des fichiers
    </h1><p>Les pré-requis sont particulièrement pratiques quand on veut construire un
fichier depuis un autre, ce qui est la principale action d’à peu près tout
processus de compilation (paraît même que c’est grosso modo la définition de la
compilation).</p>
<p>On peut par exemple écrire un <em>Makefile</em> nous permettant de compiler un fichier
<em>Markdown</em> en <em>HTML</em> :</p>
<pre><code class="lang-make"><span class="hljs-tag">article</span><span class="hljs-class">.html</span>: <span class="hljs-tag">article</span><span class="hljs-class">.md</span>
    marked <span class="hljs-tag">article</span><span class="hljs-class">.html</span> &gt; <span class="hljs-tag">article</span>.md
</code></pre>
<p>Cette règle spécifie simplement que pour construire le fichier <code>article.html</code>
j’ai besoin du fichier <code>article.md</code> et que j’utilise la commande
<a href="https://www.npmjs.org/package/marked"><code>marked</code></a> pour construire le fichier. Essayez, vous verrez, c’est
magique.</p>
<p>Là où ça devient intéressant, c’est que si je lance de nouveau <code>make
article.html</code>, rien ne se passe. Eh oui, <em>Make</em> vérifie les dates de
modification des pré-requis et les compare avec la date de modification de la
cible pour savoir s’il doit où non reconstruire la cible.</p>
<p>On peut bien sûr aller plus loin en ayant des fichiers qui dépendent de
fichiers, qui à leur tour dépendent de fichiers, …</p>
<p><a name="ref-phony-target"></a></p>
<p>On peut aussi avoir une cible factice qui ne représente pas un fichier et qui
elle-même dépend de plusieurs fichiers (<code>website: index.html apropos.html
contact.html</code>).</p>
<h1 id="variables-et-substitutions">
      <a class="putainde-Title-anchor" href="#variables-et-substitutions">#</a>
      Variables et substitutions
    </h1><p>La syntaxe des variables dans un <em>Makefile</em> ressemblent beaucoup aux variables
de votre Shell, <em>mais pas tout à fait</em>.</p>
<pre><code class="lang-make">SOURCE = <span class="hljs-keyword">index</span>.md
DESTINATION = <span class="hljs-keyword">index</span>.html

<span class="hljs-variable">${DESTINATION}</span>: <span class="hljs-variable">${SOURCE}</span>
  marked <span class="hljs-variable">${SOURCE}</span> &gt; <span class="hljs-variable">${DESTINATION}</span>
</code></pre>
<p>On peut aussi utiliser une substitution pour s’éviter de tout retaper. La
syntaxe pour ça est assez simple et se passe d’explications :</p>
<pre><code class="lang-make"><span class="hljs-variable">SOURCE =</span> index.md
<span class="hljs-variable">DESTINATION =</span> ${SOURCE:.<span class="hljs-variable">md=</span>.html}
</code></pre>
<p>Là où ça devient beaucoup plus intéressant c’est qu’on peut stocker des listes
dans une variable. Pour ça, pas vraiment d’effort à faire, il suffit de rajouter
des noms à la suite :</p>
<pre><code class="lang-make">SOURCE = index.<span class="hljs-built_in">md</span> article.<span class="hljs-built_in">md</span>
DESTINATION = ${SOURCE:.<span class="hljs-built_in">md</span>=.html}
</code></pre>
<p>Attention par contre ! En faisant ça si vous utilisez <code>${SOURCE}</code> comme cible
d’une règle, vous allez définir plusieurs règles d’un coup, ce qui n’est peut
être pas ce que vous voulez.</p>
<p>On peut contourner ça assez simplement en utilisant une substitution au niveau
de la règle. La syntaxe est un poil différente :</p>
<pre><code class="lang-make"><span class="hljs-preprocessor">%</span>.html: <span class="hljs-preprocessor">%</span>.md
  [...]
</code></pre>
<p>Vous l’aurez compris, <code>%</code> est identique dans la cible et dans la dépendance,
donc avec cette règle si vous faites un <code>make index.html</code>, <em>Make</em> va tenter de
construire la dépendance <code>index.md</code> avant tout.</p>
<p>Un problème se pose à nous avec cette syntaxe : « Bah merde, comment je récupère
les noms de fichiers là ? »</p>
<h1 id="variables-speciales">
      <a class="putainde-Title-anchor" href="#variables-speciales">#</a>
      Variables spéciales
    </h1><p>Superbe transition étant donné qu’on va parler ici de quelques variables
spéciales bien pratiques !</p>
<ul>
<li><code>$@</code> contient le nom de la cible de la règle en cours d’exécution ;</li>
<li><code>$^</code> contient la liste des dépendances de la règle (la flèche pointe vers la
liste de dépendances) ;</li>
<li><code>$&lt;</code> contient la première dépendance de la règle (la flèche pointe à gauche,
là où est la dépendance).</li>
</ul>
<p>À l’aide de celles-ci on peut du coup compléter notre exemple précédent :</p>
<pre><code class="lang-make"><span class="hljs-variable">%.</span>html: <span class="hljs-variable">%.</span>md
  marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>
  [...]
</code></pre>
<h1 id="fonctions">
      <a class="putainde-Title-anchor" href="#fonctions">#</a>
      Fonctions
    </h1><p>Pour faciliter quelques opérations, <em>Make</em> fournit un ensemble de fonctions de
base. Appeler ces fonctions rappelle un peu la façon dont on lance une commande
dans un sous-shell en Bash : <code>$(fonction argument1 argument2)</code>.</p>
<p>Voici une petite démonstration de <code>wildcard</code>, <code>addsuffix</code> et <code>basename</code> dont
vous vous doutez sans doute les effets :</p>
<pre><code class="lang-make">SOURCES = <span class="hljs-variable">$(</span>wildcard <span class="hljs-variable">*.</span>md)
DESTINATIONS = <span class="hljs-variable">$(</span>addsuffix .html,<span class="hljs-variable">$(</span><span class="hljs-keyword">basename</span> <span class="hljs-variable">${SOURCES}</span>))

all: <span class="hljs-variable">${DESTINATIONS}</span>

<span class="hljs-variable">%.</span>html: <span class="hljs-variable">%.</span>md
  marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>
</code></pre>
<p>L’exemple construit dynamiquement la liste des fichiers HTML à produire à partir
de la liste des fichiers <em>Markdown</em> disponibles puis définit une règle <code>all</code>
permettant de tout construire d’un coup, et une règle définissant compiler
unitairement un fichier <em>Markdown</em> vers HTML.</p>
<p>Vous noterez qu’<code>addsuffix</code>/<code>basename</code> peut être remplacé par une substitution
simple comme on a vu précédemment.</p>
<p>Je vous invite à fouiller
<a href="https://www.gnu.org/software/make/manual/make.html#Functions">le chapitre sur les fonctions du manuel</a>.</p>
<h1 id="la-cible-phony">
      <a class="putainde-Title-anchor" href="#la-cible-phony">#</a>
      La cible <code>.PHONY</code>
    </h1><p>Dans certains cas la cible d’une règle ne représente pas un fichier (c’était le
cas de notre cible <code>website</code> <a href="#ref-phony-target">un peu plus haut</a>).</p>
<p>Dans ces cas-là, on va vouloir exécuter la règle quoi qu’il arrive, comme si la
cible était tout le temps périmée.</p>
<p>Une cible particulière existe pour ça : <code>.PHONY</code>. Toutes les dépendances de
cette cible seront marquées comme (traduction pourrie) imposteurs (<em>phony</em>
donc).</p>
<p>Pour reprendre l’exemple précédent, on déclarera donc :</p>
<pre><code class="lang-make"><span class="hljs-class">.PHONY</span>: website

website: index<span class="hljs-class">.html</span> apropos<span class="hljs-class">.html</span> contact<span class="hljs-class">.html</span>
  [...]
</code></pre>
<p>Désormais, chaque appel à <code>make website</code> tentera de construire les dépendances
et exécutera les commandes de la recette de la règle.</p>
<h1 id="un-exemple-complet">
      <a class="putainde-Title-anchor" href="#un-exemple-complet">#</a>
      Un exemple complet
    </h1><p>L’exemple suivant permet de compiler un site Web depuis un ensemble de fichiers
<em>Markdown</em>.</p>
<pre><code class="lang-make"><span class="hljs-constant">SOURCES</span> = <span class="hljs-variable">$(</span>wildcard src/*.md)
<span class="hljs-constant">DESTINATIONS</span> = <span class="hljs-variable">${</span><span class="hljs-constant">SOURCES</span><span class="hljs-symbol">:src/%</span>.md=build/%.html}

<span class="hljs-symbol">all:</span> <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>}

<span class="hljs-symbol">info:</span>
    @ echo <span class="hljs-constant">Will</span> build <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>} from <span class="hljs-variable">${</span><span class="hljs-constant">SOURCES</span>}

<span class="hljs-symbol">clean:</span>
    rm -f <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>}

build/%.<span class="hljs-symbol">html:</span> src/%.md
    mkdir -p build
    marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>

.<span class="hljs-constant">PHONY</span><span class="hljs-symbol">:</span> all info clean
</code></pre>
<p>Vous noterez que comme on stocke nos résultats dans le dossier <code>build</code>, il faut
potentiellement le créer quand on compile un fichier dedans.</p>
<h1 id="pour-aller-plus-loin">
      <a class="putainde-Title-anchor" href="#pour-aller-plus-loin">#</a>
      Pour aller plus loin
    </h1><p>Il existe bien d’autres fonctionnalités dans <em>Make</em> (du moins dans <em>GNU Make</em>),
avec notamment :</p>
<ul>
<li>Les <a href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes"><em>canned recipes</em></a> (recettes en boîte), permettant de
définir un bout de règle réutilisable à plusieurs endroits.</li>
<li>Des <a href="https://www.gnu.org/software/make/manual/make.html#Functions">expressions conditionnelles</a> pour avoir des tests
dans votre <em>Makefile</em> et effectuer des traitements différents selon
l’environnement.</li>
<li>Les <a href="https://www.gnu.org/software/make/manual/make.html##Prerequisite-Types">règles en <em>order only</em></a> qui permettent d’indiquer une
dépendance dont la date de modification ne doit pas être prise en compte (on
peut s’en servir pour éviter le <code>mkdir</code> dans l’exemple complet).</li>
<li>Et <a href="https://www.gnu.org/software/make/manual/make.html#Functions">plein d’autres fonctions</a> bien pratiques !</li>
</ul>
<p>Je vous invite aussi à jeter un coup d’œil au <a href="https://github.com/madx/veil/"><em>Makefile</em> de Veil</a>, un outil que
j’utilise pour générer des sites statiques à partir de fichiers <em>Markdown</em>
(ah bah tiens, comme dans mes exemples, c’est rigolo). Il y a plein de
fonctionnalités de <em>Make</em> utilisées dans ce projet et je pense que ça peut être
source d’idées.</p>
<p>Voilà pour cette premier introduction à <em>Make</em>, j’espère que ça vous a plu et
que vous êtes fin prêts à affronter tous ces bouseux avec leur système de build
à base de streams, de brocolis et autres râteaux.</p>
]]></description>
            <link>http://putaindecode.fr/posts/shell/apprendre-les-makefiles/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/shell/apprendre-les-makefiles/</guid>
            <pubDate>Mon, 03 Nov 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[L'auto-entrepreneuriat : retour d'expériences]]></title>
            <description><![CDATA[<figure>
  <img src="index.jpg" alt="Desktop">
  <small><a href="http://freebiesxpress.com/gallery/macbook-air-table-direct-stock-photo/">Credit photo</a></small>
</figure>

<p>L’auto-entreprenariat, voilà la belle idée. Un statut facile qui permet à n’importe qui de créer sa propre entreprise. Une belle opportunité pour se lancer facilement et sans trop de risque à l’indépendance.</p>
<p>Chômeur ? Cela vous permet de créer votre propre travail et de toucher tout de même vos aides sociales (en soustrayant certes vos gains).</p>
<p>En CDI ? Cela permet de vous aventurer en dehors de votre travail principal sur des tâches que vous n’avez pas forcément l’occasion de faire comme gérer un client, effectuer des factures, échanger avec l’administration (ah quel plaisir, ça).</p>
<p>Étudiant(e) ? Cela peut sérieusement vous aider à financer (malheureusement ?) vos études ou à être plus indépendant(e) de vos parents.</p>
<p>Tant de raisons qui peuvent vous pousser à vous ouvrir à l’auto-entreprise. Et pour ça, <a href="http://kud.io/">_kud</a> et <a href="http://moox.io/">MoOx</a> ont vécu cette expérience et vous proposent de répondre à quelques questions pour vous faire une petite idée.</p>
<h2 id="pourquoi-avez-vous-cree-votre-entreprise">
      <a class="putainde-Title-anchor" href="#pourquoi-avez-vous-cree-votre-entreprise">#</a>
      Pourquoi avez-vous créé votre entreprise ?
    </h2><h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>Étant déjà en CDI et étant souvent sollicité pour créer des petits sites à droite à gauche, je voulais m’initier à plusieurs choses comme la création d’entreprise, l’indépendance, me confronter à l’administration et surtout gérer un client.</p>
<p>Et puis bon, cela me permettait aussi d’avoir un petit bonus non désagréable en fin de mois.</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p><em>Travailler plus pour gagner plus</em>, au départ ça devait être pour cette raison. Je n’avais pas de quoi frimer à la sortie de l’école, et je pouvais encore moins me payer de la blanche. Il me fallait donc une solution (rires). Plus sérieusement, dans le fond, tout comme Erwann, j’avais sûrement envie de tester un modèle plus indépendant que le CDI, en attendant que <a href="http://revenudebase.info/comprendre-le-revenu-de-base/">le revenu de base</a> vienne bien démolir le modèle actuel.</p>
<h2 id="comment-s-inscrire">
      <a class="putainde-Title-anchor" href="#comment-s-inscrire">#</a>
      Comment s’inscrire ?
    </h2><p>C’est relativement simple. Il faut aller sur le <a href="http://www.lautoentrepreneur.fr/">site de l’auto-entrepreneur</a> et remplir le formulaire.</p>
<h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>En ce qui me concerne, j’ai choisi “Prestations de services informatiques”, ce qui me permettait d’être plutôt libre sur mes actions :</p>
<ul>
<li>donner des cours d’informatique ;</li>
<li>créer des sites web ;</li>
<li>faire de la réparation (même si ce n’est pas vraiment un cas que je souhaitais envisager).</li>
</ul>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p>Dans la pratique, l’inscription peut en effet être très rapide. Cela dit, je me rappelle m’être pris la tête avec le choix des mutuelles (choix qui, si tu as déjà un CDI, ne sert pas vraiment à grand-chose à ce que j’ai fini par comprendre).
Pour ce qui est du code, j’avais pris “Programmation informatique” (6201Z)  car je ne regardais pas vraiment plus loin que le bout de mon nez à l’époque (2010). Après, on n’ira pas vous ennuyer avec ça, je pense.</p>
<h2 id="qu-avez-vous-fait-avec">
      <a class="putainde-Title-anchor" href="#qu-avez-vous-fait-avec">#</a>
      Qu’avez vous fait avec ?
    </h2><h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>C’est une bonne question.</p>
<p>J’ai passé quelques soirées et week-end à faire des sites en urgence, chose pas forcément agréable car peu d’apprentissage côté technologie… Mais par contre gérer le client était très passionnant.</p>
<p>J’ai aussi, à ma surprise, réussi à donner des cours. Deux fois. Une fois une semaine avec des licences sur le thème de la création de sites mobiles en <em>single page</em> avec du <a href="http://backbonejs.org/">backbone.js</a> entre autres. Une autre fois à des gens en reconversion. Le but était de leur apprendre à créer leur propre site web (statique) ainsi qu’à comprendre (brièvement) comment marchaient Internet et le Web. J’ai tout bonnement <strong>adoré</strong>.</p>
<p>(Je sens que MoOx va encore dire “pareil qu’Erwann”…)</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p>Pareil qu’Erwann (<strong>_kud</strong>: <em>bingo</em>), au début c’était forfait soir et week-end de temps en temps. J’ai pris quelques petits projets sur mesure ou “du WordPress pour manger” (2 fois seulement je le jure).
Ensuite ça m’a fatigué mine de rien, puis j’avais d’autres priorités même si mon seul salaire en CDI pour nourrir 2 bouches était juste. J’ai donc arrêté un moment, sans pour autant fermer l’AE (étant donné qu’au début, 0 CA = 0 charge).
Mais c’est là où mon expérience avec l’AE est intéressante. J’ai laissé dormir le truc.</p>
<p>Puis par la suite, <a href="http://viserlalune.com/blog/et-si-le-cdi-etait-une-connerie/">le CDI étant ce qu’il est</a> avec ses bons et surtout ses mauvais côtés, un jour après que le projet sur lequel j’ai été embauché soit jeté à la poubelle et que je doive me rabattre sur d’autres tâches qui ne m’amusaient plus du tout, j’ai décidé de démissionner.
Mais bon, c’était une situation un peu tendue, car je n’avais rien en plan B. Qui dit démission, dit “démerde-toi”. Et à Toulouse, des boulots intéressants dans le web, si tu veux faire autre chose que du PHP, c’est un peu tendu du <code>string</code>.</p>
<p>En cherchant, j’ai découvert un truc sympa : la <a href="http://travail-emploi.gouv.fr/informations-pratiques,89/les-fiches-pratiques-du-droit-du,91/rupture-conventionnelle-du-contrat,1208/la-rupture-conventionnelle-du,8383.html">rupture conventionnelle</a>.
Pour faire simple, c’est une démission à l’amiable avec ton patron. Il faut son accord et tout le tralala administratif, mais à partir du moment où tu es en bons termes avec ton patron (et s’il n’est pas assez stupide pour dire des choses du genre “si tu veux te barrer, barre-toi, je ne lâcherai pas un sou”), c’est une façon de partir et d’avoir droit aux indemnités chômage (pour peu que tu aies assez cotisé, bien entendu).
Avec cette solution, je pouvais partir, en sachant que mes cotisations pour Pôle Emploi n’étaient pas inutiles.
Clairement, mon but n’était pas de vivre de ça (avec même pas 60 % de mon salaire qui était déjà juste, je vous laisse imaginer la misère) mais c’était plus d’avoir un parachute, pour éviter d’aller pleurer à papa et maman pour pouvoir payer le loyer et le crédit de mon A3 (sans quoi j’aurais été forcé de ne manger que des pâtes achetées par sachet de 20 kg). Blague à part, je partais en ayant une botte de paille en bas de ma chute, histoire de pas me casser toutes les côtes si je ne trouvais rien où m’accrocher au passage.</p>
<p>Je me lance donc dans une recherche effrénée, principalement pour du télétravail (car ça marchait pour moi depuis un moment, même si en France faut s’accrocher pour trouver des entreprises ouvertes à ce mode de travail). Et cette fois-ci (car je démissionnais souvent, par ennui :/), j’ai eu du mal à trouver chaussure à mon pied. Beaucoup de mal. Et j’étais mal.
Mais c’était sans compter que l’Internet, c’est un réseau mondial. Avec un peu de bonne volonté, j’avais trouvé de quoi bénéficier d’une visibilité mondiale (no shit). Une fois via <a href="http://gun.io">gun.io</a> et une fois via Twitter (pour trouver du boulot en fait c’est pas mal, via quelques tweets et retweets). Finalement, j’ai rapidement pu bosser pour des entreprises situées aux USA (no shit²).</p>
<p>Le fait de ne pas avoir fermé l’AE a simplifié beaucoup de choses : je pouvais faire des factures là, de suite. Puis aux États-Unis, ça ne rigole pas, ça ne paye pas comme en France à 30 ou 45 jours, ça payait tous les 15 jours, le jour où tu envoies la facture. BONHEUR.</p>
<p>Bon, par contre attention, quand tu bosses avec des gens qui considèrent bien ton travail, et qui te mettent sur un piédestal (tu es en position de force cher développeur, je te laisse à l’étymologie du nom de métier) plutôt que de te prendre pour la dernière roue du carrosse, tu vas vite dépasser le plafond imposé par l’AE (no shit³).
<a href="https://gist.github.com/tibastral/8301072">Et il n’y a pas que mon expérience qui vous le dira</a>.</p>
<p>Pour l’anecdote, je n’ai demandé les indemnités de chômage que deux mois seulement sur près d’un an en situation freestyle (avant que je change pour un vrai statut).</p>
<p>Du coup, pour moi l’AE aura été une bonne transition entre CDI, situation précaire et ma situation actuelle de freelance. J’ai bien entendu changé rapidement de statut depuis (pour passer simplement à l’AE Level 2, l’<a href="http://www.apce.com/pid1628/l-entreprise-individuelle.html?espace=1&amp;tp=1">entreprise individuelle</a>.</p>
<h2 id="que-deviez-vous-declarer">
      <a class="putainde-Title-anchor" href="#que-deviez-vous-declarer">#</a>
      Que deviez-vous déclarer ?
    </h2><p>Oui, parce que c’est bien beau tout ça mais qui dit statut administratif dit déclaration.</p>
<h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>Tous les trimestres, je me devais de <a href="http://www.net-entreprises.fr/">déclarer</a> ce que je facturais à mes clients et je payais directement mes impôts via le versement libératoire.</p>
<p>Bon, je vous avoue que j’ai mis du temps à comprendre où je devais déclarer car vous avez trois champs à remplir, et quand vous ne comprenez rien au charabia administratif, c’est pas super facile.</p>
<p>Bref, une fois que vous avez déclaré vos revenus, un impôt se calcule automatiquement et vous êtes débité(e) à la date indiquée.</p>
<p>Plutôt simple dans l’idée.</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p>J’avais choisi aussi le versement libératoire, même constat. Il ne faut pas hésiter à prendre le téléphone pour obtenir une réponse pertinente au plus vite sans perdre de temps. Se rendre sur place dans le lieu adéquat est encore une meilleure idée pour être sûr de ne pas se tromper.</p>
<h2 id="avez-vous-eu-des-surprises">
      <a class="putainde-Title-anchor" href="#avez-vous-eu-des-surprises">#</a>
      Avez-vous eu des surprises ?
    </h2><h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>Tout d’abord, ce qui est quelque peu déstabilisant, c’est la quantité de courriers reçus. Prévoyances, mutuelles, maaaaaass papiers. En fait, c’est pas tant la quantité qui déstabilise, ce sont plutôt les propos. “Vous avez créé une entreprise, c’est bien. Savez-vous que vous êtes dans l’obligation de souscrire à une mutuelle/prévoyance ?!”.</p>
<p>Si vous n’êtes pas un tant soit peu renseigné(e), vous tomberez dans le piège et vous souscrirez à des choses dont vous n’avez pas du tout besoin.</p>
<p>En effet, lorsque vous vous inscrivez à l’URSSAF, celle-ci met par la suite à disposition son fichier d’entreprises à différents organismes et ces derniers n’hésitent pas à vous mettre le grappin dessus afin que vous souscriviez à leurs formules pour qu’ils se fassent de la thune. Oui, car quand vous avez une entreprise, vous avez la plupart du temps des employés et dans ce cas, vous devez souscrire à certaines obligations pour couvrir vos employés. Sauf que ce que ne précise pas l’URSSAF dans son fichier, c’est que vous êtes une entreprise d’auto-entrepreneur, et ça, ça change tout. Ouaip, vu que vous n’avez pas d’employé(e), vous avez un statut différent des autres boîtes et il n’est pas du tout question de souscrire à quoi que ce soit. Surtout des mutuelles ou prévoyances qui couvrent des employés inexistants. Vous avez tout à fait le droit de souscrire à une mutuelle pour vous mais nullement pour votre entreprise.</p>
<p>Pour ma part, une fois que j’eus compris ceci, j’ai tout jeté à la poubelle. :) (bande de vautours va).</p>
<p>Passons à un autre domaine en terme de surprise : l’impôt sur votre revenu d’auto-entrepreneur.</p>
<p>Moi qui pensais être tranquille en payant directement par versement libératoire, foutaise !</p>
<p>Alors oui, vous payez vos impôts directement dès que vous déclarez ce que vous avez facturé. Ça, okay.</p>
<p>Cependant, la chose que je n’avais pas calculée et dont personne ne m’avait prévenu : il n’est pas du tout pareil d’être auto-entrepreneur sans et avec un travail à côté.</p>
<p>Certes, on vous demandera de déclarer vos revenus annexes sur les impôts sur le revenu seulement <strong>à titre informatif</strong>. Oui, vous ne paierez pas d’impôts dessus en plus. Mais par contre cela fera augmenter votre quotient familial.</p>
<p>Explication. Si vous étiez de base à 10 % sur le revenu en impôts sur votre CDI, le fait que vous soyez en auto-entrepreneur et que vous gagniez de l’argent fait que votre quotient familial sera plus important et donc vous augmenterez le taux d’imposition sur votre CDI qui sera par exemple à 13,5 %, au lieu de 10 % initiaux. Ce qui ne vous fera finalement pas un impôt à 23,5 % sur votre activité d’AE (que vous payez directement chaque trimestre) mais plutôt 30 % du fait d’avoir un travail à côté.</p>
<p>C’est tout à fait normal me direz-vous vu qu’il doit bien y avoir une différence entre une personne qui n’a que l’AE et une personne ayant déjà un job. Mais c’est juste que ce n’était pas du tout prévu dans mes calculs et en connaissance de cause, j’aurais sûrement augmenté mes tarifs AE.</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p>Ce qui m’a le plus surpris aussi c’est l’impression de me transformer en fichier vendu : je me suis aussi retrouvé à recevoir plein de courriers d’entreprise en tout sens. C’est d’un pénible…</p>
<p>J’avais choisi aussi le versement libératoire, et mon faible revenu pour 2 parts à l’époque n’avait pas eu d’impact puisque je ne payais même pas d’impôts.</p>
<h2 id="si-vous-l-avez-arrete-pourquoi">
      <a class="putainde-Title-anchor" href="#si-vous-l-avez-arrete-pourquoi">#</a>
      Si vous l’avez arrêté, pourquoi ?
    </h2><h5 id="_kud">
      <a class="putainde-Title-anchor" href="#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>Je n’avais plus assez de temps pour moi. Les démarches m’ont un peu saoulé (même s’il y en avait vraiment pas beaucoup mais devoir constamment déclarer même si vous êtes à 0 € sous peine d’avoir une amende, ça fait chier).</p>
<p>Je n’ai pas non plus apprécié voir mon taux d’impôts sur le revenu augmenter, c’était pas ce qui était “vendu” lorsque ce statut m’a été présenté.</p>
<p>Et puis, je risquais de payer <a href="http://vosdroits.service-public.fr/professionnels-entreprises/F23547.xhtml">la taxe CFE</a> d’ici l’année prochaine. Chose d’ailleurs qui n’est toujours pas claire d’après ce que je peux lire sur Internet : les AE ne savent toujours pas si la CFE va devoir être payée ou non.</p>
<p>J’ai surtout constaté que je souhaitais avant tout donner des cours et à ce sujet, on m’a proposé une offre plus avantageuse que le statut d’AE, donc…</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="#moox">#</a>
      <strong>MoOx</strong>
    </h5><p>Comme indiqué plus tôt, j’ai été limité par le plafond, j’ai donc passé la vitesse supérieure via une EI !</p>
<h2 id="comment-arreter">
      <a class="putainde-Title-anchor" href="#comment-arreter">#</a>
      Comment arrêter
    </h2><p>Aller sur le site de l’<a href="https://www.cfe.urssaf.fr/autoentrepreneur/CFE_Bienvenue">AE</a> puis cliquer sur “Cesser définitivement votre activité” tout en bas. Un formulaire vous sera proposé où vous rentrerez vos informations puis il vous sera demandé de l’imprimer. Signez-le et envoyez-le à l’adresse uniquement (avec accusé de réception vivement conseillé).</p>
<p>Vous recevrez dans les jours suivants un courrier de l’URSSAF vous indiquant que vous avez bien été radié(e).</p>
<p>Oh et vous recevrez aussi du courrier de mutuelles ou prévoyances, comme d’habitude, à jeter. Du début à la fin, ils vous feront chier.</p>
<h2 id="conclusion">
      <a class="putainde-Title-anchor" href="#conclusion">#</a>
      Conclusion
    </h2><p>L’AE reste un très bon moyen de s’initier au freelance, à la création d’entreprise sans trop de risque. Les démarches sont plutôt simples, vous n’avez pas besoin de comptable, et l’impôt est de l’ordre de 23 % à 35 % en fonction de votre situation professionnelle initiale, ce qui est tout reste tout de même bien moins important que freelance ou une “vraie” entreprise.</p>
<p>N’hésitez pas à vous en servir pour sortir de votre zone de confort !</p>
<p>Dans tous les cas, si vous souhaitez en savoir plus, n’hésitez pas à aller sur <a href="http://www.economie.gouv.fr/cedef/auto-entrepreneur">le site du gouvernement</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/</guid>
            <pubDate>Thu, 30 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Première application Ember]]></title>
            <description><![CDATA[<p>Après l’<a href="/posts/js/debuter-avec-ember">article précédent</a> qui a détaillé les principaux concepts d’<a href="http://emberjs.com">Ember</a>, il est grand temps de
se dégourdir les doigts. Comme on a peur de rien, on va même construire progressivement ensemble une application
avec <a href="http://emberjs.com">Ember</a>.</p>
<p>Bon, faut pas non plus trop vous emballer, c’est juste une application bateau de gestion d’une collection de BD. 
Ça pourrait être des clients, des légumes ou des timbres mais là, c’est des BD.</p>
<h2 id="structure-d-une-application-ember">
      <a class="putainde-Title-anchor" href="#structure-d-une-application-ember">#</a>
      Structure d’une application Ember
    </h2><p>L’<a href="/posts/js/debuter-avec-ember">article précédent</a> a insisté sur le fait qu’<a href="http://emberjs.com">Ember</a> était un framework avec des partis pris forts et un modèle de développement structurant. </p>
<p><em>Note : sur ce sujet, vu que <a href="/posts/js/debuter-avec-ember/#comment-1644383934">ça fait réagir</a>, je précise. Je ne dis pas que c’est bien ou que ce n’est pas bien.
Je dis juste que c’est une caractéristique importante d’<a href="http://emberjs.com">Ember</a>. Autant le savoir.</em></p>
<p>Eh bien, aussi étonnant que cela puisse paraître, <a href="http://emberjs.com">Ember</a> <strong>nous laisse quand même nous débrouiller tout seul comme des grands pour organiser nos applications</strong>.</p>
<p>Il existe donc différentes manières de structurer une application <a href="http://emberjs.com">Ember</a>, de la plus basique à la plus complète et, sur ce point, chacun pourra trouver ce qui conviendra le mieux à ses goûts, ses envies, ses contraintes, son contexte… Que sais-je ? Ci-dessous, quelques exemples parmi d’autres.</p>
<h3 id="a-la-mano">
      <a class="putainde-Title-anchor" href="#a-la-mano">#</a>
      À la mano
    </h3><p>De base, avec <a href="http://emberjs.com">Ember</a> on peut donc déclarer nos routes, contrôleurs, modèles, etc. dans un seul fichier JavaScript ou dans une balise <code>&lt;script&gt;</code>. On doit par contre impérativement respecter les <a href="http://emberjs.com/guides/concepts/naming-conventions/">conventions de nommage</a> et enregistrer nos objets dans une variable globale : </p>
<pre><code class="lang-js">App = Ember.Application.create();

App.Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  ...
});

App.BookRoute = Ember.Route.extend({
  ...
});
</code></pre>
<p>De la même manière, on peut déclarer nos gabarits <a href="http://handlebarsjs.com/">Handlebars</a> via des balises <code>&lt;script&gt;</code> :</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-handlebars"</span>&gt;</span><span class="handlebars"><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
    </span><span class="hljs-expression">{{<span class="hljs-variable"><span class="hljs-keyword">outlet</span></span>}}</span><span class="xml">
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
</code></pre>
<h3 id="outille">
      <a class="putainde-Title-anchor" href="#outille">#</a>
      Outillé
    </h3><p>Comme on peut trouver ça un peu limité dans la vraie vie, on peut essayer d’organiser nous-même notre application, nos fichiers, gérer des modules, etc. Tout ça va passer par l’utilisation d’un outil de build javascript de type <a href="http://gruntjs.com/">Grunt</a>, <a href="http://gulpjs.com/">Gulp</a>, <a href="https://github.com/broccolijs/broccoli">Broccoli</a>. Ces outils vont nous permettre
de concaténer nos différents fichiers JavaScript en un seul, de sortir les gabarits dans des fichiers <code>.hbs</code> et de les précompiler. On n’aura ensuite qu’à importer ces fichiers dans notre index.html :</p>
<pre><code class="lang-html">...
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"dist/libs/handlebars.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"dist/libs/ember.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"dist/application.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"dist/templates.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
...
</code></pre>
<p>Ça peut convenir parfaitement et on peut se mitonner des phases de build aux petits oignons pour nos besoins spécifiques. Mais on peut aussi rester un peu sur sa faim. Surtout si on a choisi <a href="http://emberjs.com">Ember</a> pour son côté structurant.</p>
<p>Du coup, une partie des membres de l’équipe <a href="http://emberjs.com">Ember</a> a mis au point <a href="http://www.ember-cli.com/">Ember CLI</a>.</p>
<h3 id="ember-cli">
      <a class="putainde-Title-anchor" href="#ember-cli">#</a>
      Ember CLI
    </h3><p><a href="http://www.ember-cli.com/">Ember CLI</a> est une <strong>interface en ligne de commande</strong> pour <a href="http://emberjs.com">Ember</a>. Elle repose
sur l’outil de build <a href="https://github.com/broccolijs/broccoli">Broccoli</a> et permet : </p>
<ul>
<li>d’initialiser une application Ember avec, cette fois, une <a href="http://www.ember-cli.com/#folder-layout">structure de fichiers</a> et des
<a href="http://www.ember-cli.com/#naming-conventions">conventions de nommage</a></li>
<li>de générer différents objets en mode scaffolding via des <a href="http://www.ember-cli.com/#using-ember-cli">commandes</a>. Autant le dire tout de suite, je ne suis pas fan du scaffolding mais on va regarder quand même pour ne pas mourir idiots.</li>
<li>d’utiliser des outils de build basés sur <a href="https://github.com/broccolijs/broccoli">Broccoli</a> pour le prétraitement des pré-processeurs CSS par exemple</li>
<li>d’utiliser les <a href="https://people.mozilla.org/~jorendorff/es6-draft.html">modules ES6</a> plutôt 
qu’<a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a> ou 
<a href="http://en.wikipedia.org/wiki/CommonJS">CommonJS</a> pour la modularisation. Cette question a été
largement débattue. Si ça vous intéresse, je vous laisse découvrir un 
<a href="http://tomdale.net/2012/01/amd-is-not-the-answer/">article très intéressant</a> à ce sujet.</li>
<li>…</li>
</ul>
<p>Je ne vais pas vous détailler davantage le truc, vous trouverez vous-même la <a href="http://www.ember-cli.com/">doc officielle</a>. Et puis, on va tout de suite le mettre en pratique.</p>
<p><em>Note : là encore, <a href="http://www.ember-cli.com/">Ember CLI</a>, c’est un parti pris. Ce sera probablement très bien accueilli par certains pour qui cela offre un cadre de travail structuré et structurant. Mais ce sera aussi rejeté par d’autres qui le verront comme une grosse machine inutile.
Ici encore, question de goût, question de contexte, question de besoins.</em></p>
<p>Trèves de bavardages, on s’y met sérieusement :</p>
<p>On installe <a href="http://nodejs.org/">Node</a>, <a href="http://www.ember-cli.com/">Ember CLI</a>, <a href="http://bower.io/">Bower</a> :</p>
<pre><code class="lang-console">$ npm install -<span class="hljs-keyword">g</span> ember-<span class="hljs-keyword">cli</span>
$ npm install -<span class="hljs-keyword">g</span> bower
</code></pre>
<p>Ça y est, on peut maintenant demander gentiment à <a href="http://www.ember-cli.com/">Ember CLI</a> de nous créer notre application grâce à la 
commande <code>ember</code> et voir ensuite une magnifique page de bienvenue sur <a href="http://localhost:4200/">http://localhost:4200/</a> :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>ember new ember-articles
<span class="hljs-variable">$ </span>cd ember-articles
<span class="hljs-variable">$ </span>ember server
</code></pre>
<p>Je ne vous fais pas l’affront de détailler ici la structure de l’application, tout est décrit dans la 
<a href="http://www.ember-cli.com/#folder-layout">documentation</a>.</p>
<h3 id="styles-amp-fonts">
      <a class="putainde-Title-anchor" href="#styles-amp-fonts">#</a>
      Styles &amp; Fonts
    </h3><p>Pour que cela ne soit pas trop moche dans le cadre de cet exemple ou va ajouter un peu de CSS et des fonts mais comme c’est pas l’objet de l’article,
on ne va pas passer de temps là-dessus. Ceci dit, comme il y a  quand même un peu de conf <a href="http://www.ember-cli.com/">Ember CLI</a> qui peut vous intéresser, vous avez les styles 
et la conf sur <a href="https://github.com/bmeurant/ember-articles/tree/premiere-app-ember">GitHub</a> et l’explication dans ce <a href="https://gist.github.com/bmeurant/1bba49d8a12bf69a4cf0">gist</a>.</p>
<h2 id="et-maintenant-on-code">
      <a class="putainde-Title-anchor" href="#et-maintenant-on-code">#</a>
      Et maintenant, on code !
    </h2><p><em>Note: le code de l’exemple est dispo sur <a href="https://github.com/bmeurant/ember-articles/tree/premiere-app-ember">github</a>.</em></p>
<ul>
<li>Modification du gabarit général de l’application <code>/app/templates/application.hbs</code> : </li>
</ul>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"app"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"sources"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"https://github.com/bmeurant/ember-articles"</span>&gt;</span>View source on GitHub<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Comic books library<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"main"</span>&gt;</span>
      {{outlet}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p><em>Note : on en profite pour remarquer le rechargement à chaud via <code>ember server</code> lorsqu’on modifie un fichier.</em></p>
<ul>
<li>Création de la première route <code>/series</code> via <code>ember</code> :</li>
</ul>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>ember generate route series
</code></pre>
<p><a href="http://www.ember-cli.com/">Ember CLI</a> met à jour le routeur : </p>
<pre><code class="lang-js"><span class="hljs-comment">// routeur app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'series'</span>);
});
</code></pre>
<p>Il génère aussi pour nous une route <code>app/routes/series.js</code> et un gabarit <code>app/templates/series.hbs</code>, vides.</p>
<p>Modifions tout de suite le gabarit <code>app/templates/series.hbs</code>, histoire de mieux visualiser les choses : </p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Comics Series<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
</code></pre>
<p>L’URL <code>/series</code> est désormais accessible sur <a href="http://localhost:4200/series">http://localhost:4200/series</a> et on peut constater l’imbrication du gabarit <code>series.hbs</code> dans le gabarit
général <code>application.hbs</code> grâce à son <code>{{outlet}}</code>.</p>
<h3 id="outlet-et-routes-imbriquees">
      <a class="putainde-Title-anchor" href="#outlet-et-routes-imbriquees">#</a>
      <code>{{outlet}}</code> et routes imbriquées
    </h3><p>Ces notions sont au cœur d’<a href="http://emberjs.com">Ember</a>. Leur fonctionnement est assez simple. Lorsqu’une route est imbriquée dans une autre,
<a href="http://emberjs.com">Ember</a> va rechercher les gabarits de ces deux routes et remplacer la zone <code>{{outlet}}</code> de la <em>route mère</em>
avec le rendu de la <em>route fille</em>. Ainsi de suite jusqu’à résolution complète de la route. Lors des transitions entre routes, les
zones des <code>{{outlet}}</code> concernées par le changement sont mises à jour.</p>
<p>Toutes les routes de l’application sont imbriquées dans la route <code>ApplicationRoute</code> générée par <a href="http://emberjs.com">Ember</a> et dont le gabarit est <code>application.hbs</code>. 
C’est ce qui explique que, dans le cas présent, le gabarit <code>series.hbs</code> ait été <em>injecté</em> dans <code>application.hbs</code> pour construire l’application 
entière.</p>
<h3 id="routes-et-controleurs-implicites">
      <a class="putainde-Title-anchor" href="#routes-et-controleurs-implicites">#</a>
      Routes et contrôleurs implicites
    </h3><p>Pour rappel, <a href="http://emberjs.com">Ember</a> définit et utilise différents types d’objets ayant chacun une responsabilité propre (voir <a href="/posts/js/debuter-avec-ember">article précédent</a>) et, pour ne pas
nous obliger à fournir nous-même une implémentation par défaut de ces objets, les génère pour nous (voir <a href="/posts/js/debuter-avec-ember/#generation-d-objets">article précédent - <em>Génération d’objets</em></a>).</p>
<p>Si nous n’avons eu ici qu’à fournir le gabarit <code>application.hbs</code>, c’est qu’<a href="http://emberjs.com">Ember</a> a généré pour nous la route implicite <code>ApplicationRoute</code> activée au démarrage
de l’application et le contrôleur <code>ApplicationController</code>.</p>
<p>Mais <a href="http://emberjs.com">Ember</a> a également généré pour nous la route <code>IndexRoute</code> et le contrôleur <code>IndexController</code> en réponse à l’URL <code>/</code>. Pour être tout à
fait complet, <a href="http://emberjs.com">Ember</a> a aussi généré les éléments suivants <code>LoadingRoute</code>, <code>LoadingController</code>, <code>ErrorRoute</code> et <code>ErrorController</code> dont les
caractéristiques peuvent être trouvées dans la <a href="http://emberjs.com/guides/routing/loading-and-error-substates/">documentation</a>.</p>
<p>Ces éléments implicites sont générés pour chaque route qui n’est pas une route de dernier niveau et peuvent être surchargés.</p>
<ul>
<li>L’URL <code>/</code> ne nous intéresse pas. Surchargeons la route <code>IndexRoute</code> pour rediriger vers <code>/series</code> :</li>
</ul>
<pre><code class="lang-js"><span class="hljs-comment">// /app/routes/index.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
    redirect: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series'</span>);
    }
});
</code></pre>
<p>-&gt; Par-là la <a href="http://emberjs.com/guides/routing/redirection/">doc sur les redirections</a>.</p>
<p>Maintenant, on veut afficher la liste des séries en allant sur <code>/series</code>. Encore faut-il avoir des séries… Pour ça, on va utiliser
la librairie <a href="https://github.com/emberjs/data">Ember Data</a> pour la gestion de nos modèles. Ce n’est pas obligatoire
et beaucoup font sans, mais nous on va l’utiliser quand même. </p>
<h3 id="ember-data">
      <a class="putainde-Title-anchor" href="#ember-data">#</a>
      Ember Data
    </h3><p>Cette librairie qui est développée en parallèle d’<a href="http://emberjs.com">Ember</a> permet de gérer les modèles de données et les relations entre eux 
à la manière d’un <a href="http://fr.wikipedia.org/wiki/Mapping_objet-relationnel">ORM</a> (à la <a href="http://en.wikipedia.org/wiki/Active_record_pattern">ActiveRecord</a>). 
Elle permet notamment de récupérer les données depuis une interface REST HTTP 
(et est parfaitement adaptée à <a href="http://jsonapi.org/">JSON API</a>) mais pas que.</p>
<p><a href="https://github.com/emberjs/data">Ember Data</a> s’appuie sur un <code>store</code> (cf. <a href="http://emberjs.com/api/data/classes/DS.Store.html">doc</a>) manipulé par l’application
et qui contient des méthodes telles que <code>find</code>, <code>createRecord</code>, <code>update</code>, etc. qui permettent d’effectuer des actions sur les différents modèles
du store. Au travers d’<code>Adapters</code>, le <code>store</code> transmet à la couche de persistence (REST ou autre).</p>
<p>Le <code>RESTAdapter</code> (cf. <a href="http://emberjs.com/api/data/classes/DS.Store.html">doc</a>) et son jumeau maléfique le <code>RESTSerializer</code> 
(cf. <a href="http://emberjs.com/api/data/classes/DS.RESTSerializer.html">doc</a>) peuvent être étendus facilement de manière à s’adapter à une 
interface REST spécifique.</p>
<p>Pour un <a href="http://en.wikipedia.org/wiki/Proof_of_concept">POC</a>, on peut utiliser le <code>FixtureAdapter</code> 
(cf. <a href="http://emberjs.com/api/data/classes/DS.FixtureAdapter.html">doc</a>) qui permet
de charger simplement les objets depuis la mémoire. C’est ce que l’on utilise ici.</p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/adapters/application.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DS.FixtureAdapter.extend({});
</code></pre>
<ul>
<li>On va donc créer un modèle correspondant. Seulement, voilà, comme j’ai eu la bonne idée de prendre un des rares mots en anglais
où le pluriel et le singulier sont identiques (<em>serie</em> n’existe pas), on va devoir créer un modèle <em>seriesItem</em> :</li>
</ul>
<pre><code class="lang-js"><span class="hljs-comment">// /app/models/series-item.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">var</span> SeriesItem = DS.Model.extend({
    title               : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'New Series'</span>}),
    scriptwriter        : DS.attr(<span class="hljs-string">'string'</span>),
    illustrator         : DS.attr(<span class="hljs-string">'string'</span>),
    publisher           : DS.attr(<span class="hljs-string">'string'</span>),
    coverName           : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'default.jpg'</span>}),
    summary             : DS.attr(<span class="hljs-string">'string'</span>),
    coverUrl: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'/assets/images/series/covers/'</span> + <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'coverName'</span>);
    }.property(<span class="hljs-string">'coverName'</span>)
});

SeriesItem.reopenClass({
    FIXTURES: [{
    id: <span class="hljs-number">1</span>,
    title: <span class="hljs-string">'BlackSad'</span>,
    scriptwriter: <span class="hljs-string">'Juan Diaz Canales'</span>,
    illustrator: <span class="hljs-string">'Juanjo Guarnido'</span>,
    publisher: <span class="hljs-string">'Dargaud'</span>,
    coverName: <span class="hljs-string">'blacksad.jpg'</span>,
    summary: <span class="hljs-string">'Private investigator John Blacksad is up to his feline ears in mystery, digging into the backstories behind murders, child abductions, and nuclear secrets. Guarnido\'s sumptuously painted pages and rich cinematic style bring the world of 1950s America to vibrant life, with Canales weaving in fascinating tales of conspiracy, racial tension, and the "red scare" Communist witch hunts of the time. Guarnido reinvents anthropomorphism in these pages, and industry colleagues no less than Will Eisner, Jim Steranko, and Tim Sale are fans! Whether John Blacksad is falling for dangerous women or getting beaten to within an inch of his life, his stories are, simply put, unforgettable'</span>
}, {
    id: <span class="hljs-number">2</span>,
    title: <span class="hljs-string">'The Killer'</span>,
    scriptwriter: <span class="hljs-string">'Luc Jacamon'</span>,
    illustrator: <span class="hljs-string">'Matz'</span>,
    publisher: <span class="hljs-string">'Casterman'</span>,
    coverName: <span class="hljs-string">'the-killer.jpg'</span>,
    summary: <span class="hljs-string">'A man solitary and cold, methodical and unencumbered by scruples or regrets, the killer waits in the shadows, watching for his next target. And yet the longer he waits, the more he thinks he\'s losing his mind, if not his cool. A brutal, bloody and stylish noir story of a professional assassin lost in a world without a moral compass, this is a case study of a man alone, armed to the teeth and slowly losing his mind.'</span>
}, ...
]});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> SeriesItem;
</code></pre>
<p>Au passage, on remarque les valeurs par défaut ainsi que la <a href="http://emberjs.com/guides/object-model/computed-properties/">propriété calculée</a> <code>coverUrl</code>. On aura l’occasion d’en reparler.</p>
<ul>
<li>On modifie donc notre application pour afficher, lors de l’activation de <code>SeriesRoute</code>, la liste des séries :</li>
</ul>
<pre><code class="lang-js"><span class="hljs-comment">// /app/routes/series.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
    model: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.find(<span class="hljs-string">'seriesItem'</span>);
    }
});
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Comic Series<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-list"</span>&gt;</span>
      {{#each}}
          <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-item"</span>&gt;</span>
              {{title}}
          <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      {{/each}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">span</span>&gt;</span>Number of series: {{length}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

{{outlet}}
</code></pre>
<p>On remarque le <code>{{#each}}</code> sans arguments qui par convention retrouve l’objet <code>model</code> du contrôleur. <code>{{#each model}}</code>, <code>{{#each controller}}</code> ou <code>{{#each controller.model}}</code> sont
des notations équivalentes.</p>
<ul>
<li>Maintenant, on va essayer de dynamiser un peu tout ça en ajoutant un bouton pour trier la liste :</li>
</ul>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
...
<span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Comic Series<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">button</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">sort</span>"}} {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">":sort sortAscending:asc:desc"</span><span class="hljs-value">}}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-list"</span>&gt;</span>
...
</code></pre>
<p>Pour ça, il est nécessaire de définir notre propre <code>SeriesController</code> :</p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/controllers/series.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.ArrayController.extend({
  sortAscending: <span class="hljs-literal">true</span>,

  actions: {
    sort: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.toggleProperty(<span class="hljs-string">'sortAscending'</span>);
    }
  }
});
</code></pre>
<p>Ce simple ajout demande de s’arrêter sur quelques points importants, histoire de bien comprendre ce qui se passe.</p>
<h3 id="types-de-controleurs">
      <a class="putainde-Title-anchor" href="#types-de-controleurs">#</a>
      Types de contrôleurs
    </h3><p>Nous avons dû remplacer le <code>SeriesController</code> implicite par notre propre contrôleur, histoire de proposer cette fonction de tri. <a href="http://emberjs.com">Ember</a>
dispose de deux types de contrôleurs : <a href="http://emberjs.com/api/classes/Ember.ObjectController.html">ObjectController</a> et <a href="http://emberjs.com/api/classes/Ember.ArrayController.html">ArrayController</a>.
Comme leur nom l’indique, ces contrôleurs permettent respectivement de gérer des modèles de type objet ou de type collection.</p>
<p>Dans notre cas, nous souhaitons manipuler la liste des séries et utilisons donc un <code>ArrayController</code>. Il utilise notamment le <a href="http://emberjs.com/api/classes/Ember.SortableMixin.html">SortableMixin</a>
qui fournit des fonctions de tri natives. Il nous suffit donc d’initialiser et de mettre à jour la propriété <code>sortAscending</code> apportée par ce mixin pour bénéficier du tri sur notre
collection de séries, sans avoir besoin d’autre chose.</p>
<h3 id="actions">
      <a class="putainde-Title-anchor" href="#actions">#</a>
      Actions
    </h3><p>La mise à jour de cette propriété est effectuée grâce à <code>{{action &quot;sort&quot;}}</code> qui nous permet de lier l’action sur le bouton (le clic) à une
fonction <code>sort</code> du contrôleur définie dans <code>actions: { ... }</code>.</p>
<p>-&gt; Plus d’infos sur les actions <a href="http://emberjs.com/guides/templates/actions/">ici</a>.</p>
<h3 id="bindings-de-classes-dynamiques">
      <a class="putainde-Title-anchor" href="#bindings-de-classes-dynamiques">#</a>
      <em>Bindings</em> de classes dynamiques
    </h3><p>On remarque aussi la manière dont les classes de l’élément <code>button</code> sont liées aux propriétés du contrôleur de manière à être mises à
jour dynamiquement grâce à <code>{{bind-attr class=&quot;...&quot;}}</code>. Cette syntaxe permet de basculer la classe du bouton de <code>asc</code> à <code>desc</code> automatiquement
lorsque la valeur de <code>sortAscending</code> change. On note la notation <code>:sort</code> qui permet d’ajouter une classe de base, statique.</p>
<p>-&gt; Plus d’infos sur les classes <a href="http://emberjs.com/guides/templates/binding-element-class-names/">ici</a>.</p>
<ul>
<li>Mais on ne va pas s’arrêter là. On va ajouter un petit filtre sur le titre des séries :</li>
</ul>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Comic Series<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>

    {{input value=filter class="filter"}}
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">sort</span>"}} {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">":sort sortAscending:asc:desc"</span><span class="hljs-value">}}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-list"</span>&gt;</span>
      {{#each filteredModel}}
          <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-item"</span>&gt;</span>
              {{title}}
          <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      {{/each}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">span</span>&gt;</span>Number of series: {{filteredModel.length}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

{{outlet}}
</code></pre>
<pre><code class="lang-js"><span class="hljs-comment">// /app/controllers/series.js</span>
...
filter: <span class="hljs-string">""</span>,
sortAscending: <span class="hljs-literal">true</span>,

filteredModel: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">var</span> filter = <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'filter'</span>);

  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'content'</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span></span>{
    <span class="hljs-keyword">if</span> (item.get(<span class="hljs-string">'title'</span>) === <span class="hljs-literal">undefined</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
    <span class="hljs-keyword">return</span> item.get(<span class="hljs-string">'title'</span>).toLowerCase().match(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(filter.toLowerCase()));
  }).sort(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, b)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'sortAscending'</span>) ? (b.get(<span class="hljs-string">'title'</span>) &lt; a.get(<span class="hljs-string">'title'</span>)) : (b.get(<span class="hljs-string">'title'</span>) &gt; a.get(<span class="hljs-string">'title'</span>));
  }.bind(<span class="hljs-keyword">this</span>));
}.property(<span class="hljs-string">'filter'</span>, <span class="hljs-string">'sortAscending'</span>, <span class="hljs-string">'model.@each.title'</span>),

actions: {
...
</code></pre>
<h3 id="proprietes-calculees">
      <a class="putainde-Title-anchor" href="#proprietes-calculees">#</a>
      Propriétés calculées
    </h3><p>Je vous passe le contenu de la fonction <code>filteredModel</code> qui n’apporte rien au sujet. Examinons par contre la notation <code>.property(&#39;filter&#39;, &#39;sortAscending&#39;, &#39;model.@each.title&#39;)</code>. 
Cela constitue la définition d’une <a href="http://emberjs.com/guides/object-model/computed-properties/">propriété calculée</a> : propriété
accessible et manipulable comme n’importe quelle propriété au sein des gabarits mais qui est le résultat d’une fonction dont le retour dépend de l’état d’autres propriétés. </p>
<p>La syntaxe <code>.property(&#39;filter&#39;, &#39;sortAscending&#39;, &#39;model.@each.title&#39;)</code> définit les autres propriétés <em>observées</em> par cette propriété calculée et dont le changement provoquera
l’exécution de la fonction ainsi que le rafraîchissement du gabarit. Ici, on peut constater que l’affichage est mis à jour et la liste filtrée à chaque changement du champ 
de formulaire <code>filter</code> et donc de la propriété <code>filter</code> associée ou du sens du tri via la propriété <code>sortAscending</code>. </p>
<p>La syntaxe particulière <code>model.@each.title</code> permet de mettre à jour l’affichage en cas de changement externe du titre de l’une (<code>@each</code>) des séries. Vous pouvez facilement vous rendre compte de
ça en utilisant <strong>Ember Inspector</strong> (<a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en">Chrome</a> et 
<a href="https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/">Firefox</a>). Allez dans <code>Data &gt; MODEL TYPES / series-item</code>, sélectionnez-en une et modifiez son titre. Vous constaterez que 
la liste est mise à jour automatiquement.</p>
<p>Les <em>bindings</em> et les <a href="http://emberjs.com/guides/object-model/computed-properties/">propriétés calculées</a> constituent deux manières d’observer les changements et de <em>rafraîchir</em>
l’application en conséquence. Les <a href="http://emberjs.com/guides/object-model/observers">observeurs</a> en sont une troisième. Si vous avez un doute sur ce qu’il faut utiliser, allez
voir <a href="http://emberjs.com/guides/object-model/what-do-i-use-when">ici</a>.</p>
<h3 id="bindings-et-mise-a-jour-des-gabarits">
      <a class="putainde-Title-anchor" href="#bindings-et-mise-a-jour-des-gabarits">#</a>
      <em>Bindings</em> et mise à jour des gabarits
    </h3><p>Alors, comment ça marche ? Comment, concrètement, <a href="http://emberjs.com">Ember</a> se débrouille pour mettre à jour le gabarit lors de la mise à jour d’un modèle, d’une propriété ? En réalité, lorsqu’on
affiche dans un gabarit une propriété dynamique liée à un modèle ou à une propriété, <a href="http://emberjs.com">Ember</a> va l’encadrer par des éléments HTML spéciaux, des marqueurs de type <code>&lt;script&gt;</code> d’id unique
appelé <code>metamorph</code>. Attention, je préfère vous prévenir, ça va piquer !</p>
<p>Ainsi,</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Blog de {{name}}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
</code></pre>
<p>va se transformer en : </p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>
Blog de 
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"metamorph-0-start"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-placeholder"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
Baptiste Meurant
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"metamorph-0-end"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/x-placeholder"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
</code></pre>
<p>Alors oui, il faut avouer que là on est tenté de partir en courant. C’est le point qui m’a vraiment gêné quand j’ai découvert <a href="http://emberjs.com">Ember</a> et ça me gêne encore. C’était même
à la limite du rédhibitoire. Ça pollue vraiment le DOM et introduit même quelques effets de bord en CSS lorsqu’on utilise les <code>:first-child</code> ou <code>:last-child</code>. Ceci étant,
c’est ce qui permet à <a href="http://emberjs.com">Ember</a> de mettre à jour non pas un gabarit mais uniquement ces zones dynamiques de manière performante - j’ai fini par voir ça comme un mal nécessaire.
Mais surtout, j’ai compris que ces <code>metamorph</code> étaient voués à disparaître assez rapidement avec l’utilisation du moteur <a href="https://github.com/tildeio/htmlbars">HTMLBars</a>. Vous pouvez
jeter un œil à ce sujet à la <a href="http://talks.erikbryn.com/htmlbars/">présentation d’Eric Bryn</a> (notamment slide 10). Ouf ! Le support d’<a href="https://github.com/tildeio/htmlbars">HTMLBars</a> est prévu pour 
<a href="http://emberjs.com">Ember</a> 1.9 ou 1.10 (la release actuelle est 1.7) … On est impatients !</p>
<p><em>Bonus: l’élément est un élément <code>script</code> et pas un autre car c’est à priori le seul élément qui peut être inséré partout sans rien casser.</em></p>
<p><em><strong>Edit</strong>: Aujourd’hui (28/10/2014) est sortie la <a href="http://emberjs.com/blog/2014/10/26/ember-1-8-0-released.html">version 1.8.0 d’Ember</a>. Cette release ne contient pas encore
le support complet d’<a href="https://github.com/tildeio/htmlbars">HTMLBars</a> mais signe déjà la fin des <code>metamorph</code> au profit de l’utilisation d’élements <code>Text</code> vides, non intrusifs ! Ça méritait d’être signalé.</em> </p>
<h3 id="runloop">
      <a class="putainde-Title-anchor" href="#runloop">#</a>
      <em>RunLoop</em>
    </h3><p>Un autre mécanisme important est impliqué tant dans le rendu des gabarits que dans le calcul et la synchronisation des propriétés entre elles : la <em>RunLoop</em>. Ce mécanisme est
absolument central dans le fonctionnement d’<a href="http://emberjs.com">Ember</a> et s’appuie sur la lib <a href="https://github.com/ebryn/backburner.js/">Backburner</a>. Dans la plupart des cas, vous n’avez pas
à vous en préoccuper et vous pouvez parfaitement mettre en place une application <a href="http://emberjs.com">Ember</a> complète sans interagir directement avec la <em>RunLoop</em>, sauf lorsque
vous ajoutez vos propres <code>helpers</code> <a href="http://handlebarsjs.com/">Handlebars</a> ou vos propres composants avancés. C’est par contre important d’en comprendre le fonctionnement.</p>
<p>Comme son nom ne l’indique pas, la <em>RunLoop</em> n’est pas une loop mais un ensemble de queues permettant à <a href="http://emberjs.com">Ember</a> de différer un certain nombre d’opérations
qui seront ensuite exécutées en dépilant ces queues dans un ordre de priorité donné. Les queues sont <code>sync</code>, <code>actions</code>, <code>routerTransitions</code>, <code>render</code>, <code>afterRender</code>, et <code>destroy</code>.
Je vous laisse découvrir par vous-même dans la <a href="http://emberjs.com/guides/understanding-ember/run-loop/">doc officielle</a> et dans cette 
<a href="http://talks.erikbryn.com/backburner.js-and-the-ember-run-loop">présentation d’Eric Bryn</a> le contenu de ces queues et la manière dont est faite l’exécution.</p>
<p>Je voudrais juste insister sur un aspect particulier : c’est ce mécanisme qui permet, en quelque sorte, d’empiler les calculs de propriétés calculées lorsque les propriétés
<em>observées</em> sont modifiées et surtout c’est grâce à ce mécanisme que le rendu n’est effectué qu’une seule fois lors de la modification d’un modèle.</p>
<p>Pour reprendre l’exemple de la <a href="http://emberjs.com/guides/understanding-ember/run-loop/">doc officielle</a>, si vous avez l’objet suivant :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> User = Ember.Object.extend({
  firstName: <span class="hljs-literal">null</span>,
  lastName: <span class="hljs-literal">null</span>,
  fullName: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'firstName'</span>) + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'lastName'</span>);
  }.property(<span class="hljs-string">'firstName'</span>, <span class="hljs-string">'lastName'</span>)
});
</code></pre>
<p>Et le gabarit :</p>
<pre><code class="lang-html">{{firstName}}
{{fullName}}
</code></pre>
<p>Tout ça, sans la <em>RunLoop</em>, ferait qu’on exécuterait le rendu deux fois si l’on modifie successivement <code>firstname</code> puis <code>lastname</code>. La <em>RunLoop</em> met tout ça (et plein d’autres
choses) en queue et n’effectue le rendu qu’une seule et unique fois, lorsque nécessaire.</p>
<ul>
<li>Après ça, on va finir en douceur en ajoutant simplement ou nouvelle route pour afficher la série qu’on a sélectionné :</li>
</ul>
<pre><code class="lang-js"><span class="hljs-comment">// /app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'series'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'seriesItem'</span>, { path: <span class="hljs-string">'/:seriesItem_id'</span> });
  });
});
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
...
  <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-list"</span>&gt;</span>
    {{#each filteredModel}}
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-item"</span>&gt;</span>
          {{#link-to 'series.seriesItem' this title=title}}
            {{title}}
          {{/link-to}}
        <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    {{/each}}
  <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
...

<span class="hljs-comment">&lt;!-- /app/templates/series/series-item.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Series's first album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">dl</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>scriptwriter<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{scriptwriter}} <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>illustrator<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{illustrator}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>publisher<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{publisher}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">p</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"summary"</span>&gt;</span>
    {{summary}}
  <span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Et voilà ! Quelques remarques en passant : </p>
<ul>
<li>on peut maintenant sélectionner une série dans la liste grâce au <code>{{link-to}}</code>. On remarque au passage qu’<a href="http://emberjs.com">Ember</a> sélectionne automatiquement
(ajoute une classe <code>active</code>) la série de la liste dont la route est activée. On note également l’utilisation de <code>this</code> pour référencer l’objet courant
(ici l’instance courante de <code>SeriesItem</code>). -&gt; <a href="http://emberjs.com/guides/templates/links/">doc officielle</a>.</li>
<li>on a transformé la route <code>series</code> en <em>Resource</em> qui permet de grouper les routes sous un même espace de nommage. Notez que si la route <code>seriesItem</code>
avait été une ressource, on aurait dû fournir le template <code>/app/templates/series-item.hbs</code> au lieu de <code>/app/templates/series/series-item.hbs</code> car
une ressource réinitialise l’espace de nommage et permet ainsi de simplifier les URL. -&gt; <a href="http://emberjs.com/guides/routing/defining-your-routes/#toc_resources">doc officielle</a></li>
<li>on a ajouté un <em>segment dynamique</em> <code>{path: &#39;/:seriesItem_id&#39;}</code> à la route <code>seriesItem</code> pour l’ID de la série. -&gt; <a href="http://emberjs.com/guides/routing/defining-your-routes/#toc_dynamic-segments">doc officielle</a>.</li>
</ul>
<h2 id="conclusions">
      <a class="putainde-Title-anchor" href="#conclusions">#</a>
      Conclusions
    </h2><p>Cet article est un peu plus long que ce que j’avais prévu et je n’ai pas abordé tous les sujets que je voulais traiter. Mais, plutôt que de dérouler simplement du code pour montrer que ça marche, j’ai
préféré m’arrêter sur les points importants pour en expliquer le fonctionnement. Ça me paraissait important. J’espère que ce n’était pas trop pénible à lire. Les points que je n’ai pas eu le temps
de traiter (API REST avec un backend, tests, helpers, partials, composants, relations avec ember-data, etc.) feront peut-être l’objet d’un autre post mais un peu plus tard parce que je suis fatigué là et 
je sens que vous aussi.</p>
<p>Concernant <a href="http://emberjs.com">Ember</a>, j’apprécie vraiment le modèle de développement, la structure et j’aime vraiment développer avec cet outil. La discussion framework / lib déjà évoquée fera sans doute toujours rage.
En ce qui me concerne, quand j’ai besoin d’un framework, ma préférence va à <a href="http://emberjs.com">Ember</a>.</p>
<p>Concernant <a href="http://www.ember-cli.com/">Ember CLI</a>, je suis plus partagé. J’apprécie l’aspect normalisation de la structure de l’appli ainsi que l’outillage assez fourni qu’il embarque, le transpileur ES6. Je ne suis, par contre, pas fan
du scaffolding en général mais, au démarrage, ça peut donner une idée de la manière de faire. J’espère cependant vous avoir donné suffisamment de clefs pour que vous vous fassiez une idée.</p>
<p>Pour finir, je souhaite remercier l’équipe de <em>Putain de code !</em> qui ne partage pas mes opinions sur les frameworks en général mais qui m’accueille quand même. Cet article a vraiment dû
vous piquer les yeux. Désolé :-)</p>
<p><em>Note: les sources de l’application exemple sont <a href="https://github.com/bmeurant/ember-articles/tree/premiere-app-ember">disponibles sur github</a>.</em></p>
]]></description>
            <link>http://putaindecode.fr/posts/js/premiere-app-ember/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/premiere-app-ember/</guid>
            <pubDate>Mon, 27 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Flux, qu'est-ce que c'est ?]]></title>
            <description><![CDATA[<p>Allez, tant pis, on saute l’intro et on entre directement dans le vif du sujet (on n’a pas que ça à foutre, après tout).</p>
<h2 id="la-petite-histoire">
      <a class="putainde-Title-anchor" href="#la-petite-histoire">#</a>
      La petite histoire
    </h2><p>Il était une fois un gros site web <em>que s’apelorio</em> Facebook. Qui dit Facebook, dit webapp plus grosse que la plus grosse de tes copines (<em>no offense</em> <sup><a href="#foonote-1">1</a></sup>) ; et du coup, propension à se retrouver submergé de bugs plus élevée.</p>
<p>Les ingénieurs front-end de Facebook, confrontés à une codebase de plus en plus bordélique (personne ne voulant toucher certaines parties de celle-ci) ont dû repenser la structure des composants les plus cruciaux.</p>
<p>Face à ce besoin, ces développeurs sont donc parvenus à deux solutions :</p>
<ul>
<li><a href="http://putaindecode.fr/posts/js/introduction-a-reactjs/">ReactJS</a></li>
<li>Flux</li>
</ul>
<p>Flux n’est pas un framework, mais simplement une architecture, une sorte de <em>guideline</em> qui résout pas mal de problèmes ayant pu apparaître avec les divers bibliothèques et frameworks MV* apparus lors des dernières années.</p>
<h2 id="flux-l-explication-claire">
      <a class="putainde-Title-anchor" href="#flux-l-explication-claire">#</a>
      Flux, l’explication claire
    </h2><p>Flux comporte 4 concepts :</p>
<ul>
<li>les <strong>actions</strong>, qu’elles proviennent du serveur ou d’une interaction utilisateur ;</li>
<li>le <strong>dispatcher</strong> dans lequel sont envoyées les actions que ce dernier transmet <em>à qui veut</em>, un peu comme un <code>EventEmitter</code> global ;</li>
<li>les <strong>stores</strong>, qui sont l’équivalent du <code>model</code> de l’architecture MVC, ils contiennent les données, et réagissent aux actions que le dispatcher leur transmet ;</li>
<li>les <strong>views</strong>, qui s’occupent du rendu des données dans le DOM, et de lancer des actions lorsque l’utilisateur effectue certaines actions.</li>
</ul>
<p>Jusque-là, rien de bien fou. C’est dans leur manière d’interagir que la particularité se dessine :</p>
<figure>
  <img src="http://cl.ly/YENt/flux.png" alt="">
  <figcaption>Oh bah dis donc, ça va toujours dans le même sens</figcaption>
</figure>

<p>En effet, le <em>flux</em> en question est unidirectionnel. Pour faire simple, on procède ainsi :</p>
<p>On définit une action via un <strong>action creator</strong> (on passera toujours par ces action-creators pour signaler une action) :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// actions/BasketActions.js</span>
<span class="hljs-keyword">var</span> AppDispatcher = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../AppDispacher"</span>)
<span class="hljs-comment">/*
  On garde un dictionnaire des types d'actions
  afin d'avoir un fichier donnant une vision
  globale de toutes les interactions de l'app.
 */</span>
<span class="hljs-keyword">var</span> ActionTypes = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../constants"</span>).ActionTypes

<span class="hljs-built_in">module</span>.exports = {
  addToBasket : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(productId)</span></span>{
    AppDispatcher.handleViewAction({
      type : ActionTypes.ADD_TO_BASKET,
      productId : productId
    })
  }
}
</code></pre>
<p>On lancera par la suite cette action lorsque l’utilisateur aura cliqué sur un certain bouton, dans la vue concernée.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// components/Product.jsx</span>
<span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react/addons"</span>)
<span class="hljs-keyword">var</span> BasketActions = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../actions/BasketActions"</span>)

<span class="hljs-keyword">var</span> Button = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./common/Button.jsx"</span>)

<span class="hljs-keyword">var</span> Product = React.createClass({
  addToBasket : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(productId)</span></span>{
    BasketActions.addToBasket(productId)
  },
  render : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"Product"</span>&gt;</span>
        {/* rest of the component*/}
        <span class="hljs-tag">&lt;<span class="hljs-title">Button</span>
          <span class="hljs-attribute">onClick</span>=<span class="hljs-value">{this.addToBasket.bind(this.props.productId)}</span>
          <span class="hljs-attribute">label</span>=<span class="hljs-value">"Add to basket"</span>
        /&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    )</span>
  }
})

<span class="hljs-built_in">module</span>.exports = Product
</code></pre>
<p>Dès lors, à chaque clic sur le bouton en question, l’action <code>ADD_TO_BASKET</code> sera passée au dispatcher, qui le signalera aux stores.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// stores/BasketStore.js</span>
<span class="hljs-keyword">var</span> AppDispatcher = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../AppDispatcher"</span>)
<span class="hljs-keyword">var</span> ActionTypes = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../constants"</span>).ActionTypes
<span class="hljs-keyword">var</span> API = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../api"</span>)

<span class="hljs-keyword">var</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../utils/merge"</span>)
<span class="hljs-keyword">var</span> Store = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../utils/store"</span>)

<span class="hljs-keyword">var</span> _store = {
  products : []
}

<span class="hljs-keyword">var</span> BasketStore = merge(Store, {
  <span class="hljs-comment">/*
    Ici, on `register` un callback sur l'AppDispatcher,
    ce qui signifie qu'on verra passer toutes les actions
    de l'app.
   */</span>
  dispatchToken : AppDispatcher.register(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(payload)</span></span>{
    <span class="hljs-keyword">var</span> action = payload.action
    <span class="hljs-keyword">switch</span>(action.type) {
      <span class="hljs-keyword">case</span> ActionTypes.ADD_TO_BASKET:
          <span class="hljs-comment">/*
             L'API va ajouter le produit et lancer une
             action `BASKET_UPDATED` dès que le serveur a répondu.
          */</span>
        API.addToBasket(action.productId)
        <span class="hljs-keyword">break</span>
      <span class="hljs-keyword">case</span> ActionTypes.BASKET_UPDATED:
          <span class="hljs-comment">/*
            L'API a répondu, on peut stocker la réponse
            et signaler le changement
            aux vues récupérant ces données.
          */</span>
          _store = action.reponse
          BasketStore.emitChange()
        <span class="hljs-keyword">break</span>
      <span class="hljs-keyword">default</span>:
        <span class="hljs-keyword">break</span>
    }
  })
})

<span class="hljs-built_in">module</span>.exports = BasketStore
</code></pre>
<p>La vue, quant à elle, sera notifiée du changement, et effectuera un <code>render()</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// components/Basket.jsx</span>
<span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react/addons"</span>)
<span class="hljs-keyword">var</span> BasketActions = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../actions/BasketActions"</span>)
<span class="hljs-keyword">var</span> BasketStore = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../stores/BasketStore"</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getState</span><span class="hljs-params">()</span></span>{
  <span class="hljs-keyword">return</span> BasketStore.getStore()
}

<span class="hljs-keyword">var</span> Product = React.createClass({
  getInitialState : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> getState()
  },
  _onStoreChange : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">/*
      À chaque changement du store, on update naïvement
      le component et on laisse le virtual DOM faire son job.
    */</span>
    <span class="hljs-keyword">this</span>.setState(getState())
  },
  componentDidMount : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">/*
      On écoute le store uniquement lorsque le
      component est monté.
     */</span>
    BasketStore.addChangeListener(<span class="hljs-keyword">this</span>._onStoreChange)
  },
  componentWillUnmount : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-comment">/*
      Et on arrête d'écouter quand il ne l'est plus.
     */</span>
    BasketStore.removeChangeListener(<span class="hljs-keyword">this</span>._onStoreChange)
  },
  render : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"Basket"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">className</span>=<span class="hljs-value">"Basket-count"</span>&gt;</span>
          {this.state.products.length + " products"}
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        {/* rest of the component */}
      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    )</span>
  }
})

<span class="hljs-built_in">module</span>.exports = Product
</code></pre>
<p>Tout cela peut sembler relativement verbeux, mais il faut préciser deux choses :</p>
<ul>
<li>les exemples ici le sont volontairement pour la démonstration, et il est aisément faisable d’utiliser un <code>StoreMixin</code> simplifier la déclaration des <code>class</code> React ;</li>
<li>pour ce qui est du reste, notamment stocker les noms d’actions dans un objet partagé dans l’app, c’est pour rendre plus idiomatique et cohérente la façon dont on code l’app, et pour simplifier ses <em>refactoring</em>.</li>
</ul>
<h2 id="ce-qu-il-faut-savoir-sur-l-alliance-flux-react">
      <a class="putainde-Title-anchor" href="#ce-qu-il-faut-savoir-sur-l-alliance-flux-react">#</a>
      Ce qu’il faut savoir sur l’alliance Flux + React
    </h2><p>Si React et Flux vont si bien ensemble, c’est que l’approche de rendu “naïf” de React (comprendre “React s’en fout de ce qui change, il appelle <code>render</code> à chaque changement”) permet de réduire la logique à écrire dans les Stores, et donc de simplifier très fortement la codebase de l’app.</p>
<p>Lorsque qu’un ou plusieurs stores composent l’état d’un state React, alors à chaque changement de l’un de ces stores, tous les composants React concernés et leurs enfants vont appeler leur méthode <code>render()</code>. Afin d’éviter des appels superflus à ces méthodes, React donne la possibilité de tester soi-même s’il est nécessaire de mettre à jour le component en déclarant une méthode <code>shouldComponentUpdate</code> retournant un <code>boolean</code> qui stipulera si oui ou non il est nécessaire d’appeler <code>render()</code>.</p>
<h2 id="tl-dr">
      <a class="putainde-Title-anchor" href="#tl-dr">#</a>
      tl;dr
    </h2><ul>
<li>Flux, c’est comme du MVC en plus simple, et avec moins de bugs</li>
<li>L’architecture est unidirectionnelle</li>
<li>On raisonne en actions, qui sont déclenchées par la vue ou le serveur</li>
<li>Toutes les actions passent par le dispatcher</li>
<li>Seuls les stores signalent aux vues qu’il faut se mettre à jour</li>
</ul>
<p>Bisous bisous.</p>
<p><img src="http://media.giphy.com/media/lxd2cZ2BkM4IE/giphy.gif" alt="angulol"></p>
<p>Pour aller un peu plus loin :</p>
<ul>
<li><a href="https://gist.github.com/bloodyowl/b41532cf3627c560b57e">Les sources des exemples</a> contenant le dispatcher et les constants ;</li>
<li><a href="http://facebook.github.io/flux/docs/overview.html#content">La doc de Flux</a> ;</li>
<li><a href="https://github.com/facebook/flux">Le repository Flux</a> et ses différents exemples.</li>
</ul>
<p><small>
  <a id="foonote-1"></a>1: <a href="https://www.youtube.com/watch?v=jRzv9gep5Ng&amp;t=4m">Référence utile (<code>ntm install reference</code>)</a>
</small></p>
]]></description>
            <link>http://putaindecode.fr/posts/js/flux-qu-est-ce-c-est/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/flux-qu-est-ce-c-est/</guid>
            <pubDate>Mon, 27 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[À la conquête des bugs]]></title>
            <description><![CDATA[<p>Le Web, depuis sa création est un vaste champ de bataille. Que ce soit les problèmes de compatibilités, les formats ou les langages propriétaires, la volonté de faire du Web un monde ouvert ne date pas d’hier.</p>
<h2 id="au-depart">
      <a class="putainde-Title-anchor" href="#au-depart">#</a>
      Au départ
    </h2><p>Les débuts du Web furent compliqués. On assista à une guerre entre Netscape et Microsoft. Chacun voulant dominer le marché, en tentant d’imposer ses propres technologies. En 1996, Netscape propose au W3C JSSS (JavaScript-Based Style Sheets). Ce n’est d’ailleurs que depuis novembre 2000 que Netscape, basé sur le moteur Gecko (moteur de Mozilla Firefox), prend véritablement en charge le CSS. Microsoft pour sa part ne supportait par JavaScript à ses débuts et avait développé son propre langage JScript.</p>
<p>Ces problèmes de compatibilités, de technologies et de respect des normes vont considérablement ralentir l’évolution du Web.</p>
<h2 id="les-petits-nouveaux">
      <a class="putainde-Title-anchor" href="#les-petits-nouveaux">#</a>
      Les petits nouveaux
    </h2><p>L’arrivée des nouveaux navigateurs tels que Firefox, Chrome ou même Opera va inverser cette tendance. Les parts de marchés d’Internet Explorer baissant, les développeurs prenant conscience du potentiel du Web, vont déclencher une montée en puissance du Web.</p>
<p>On pourrait croire que cette concurrence ne va apporter que des points positifs, mais pas tant que ça. Les parts de marchés vont pousser les navigateurs (ou les développeurs) à supporter des propriétés non standardisées, à mettre en place des préfixes et à développer une monoculture.</p>
<h2 id="le-debut-des-problemes">
      <a class="putainde-Title-anchor" href="#le-debut-des-problemes">#</a>
      Le début des problèmes
    </h2><p>Les préfixes bien que partis d’une bonne idée, avaient pour objectif d’introduire les nouvelles propriétés CSS  toujours à l’état de proposition/discussion/standardisation. Cela a permis de pouvoir utiliser des propriétés telles que  <code>border-radius</code>, <code>transform</code>, <code>box-shadow</code> bien avant leurs finalisations. Le risque bien entendu, étant d’utiliser des propriétés qui pouvaient changer de spécification, comme ce fut le cas par exemple pour <code>flexbox</code>.</p>
<p>L’effet pervers a été aussi de ne pas utiliser tous les préfixes d’une propriété. Cela a eu pour conséquence de créer un Web (notamment sur le mobile) à deux facettes. Nous avions d’un coté les sites <code>-webkit</code> compatibles iPhone/iPad et le reste du monde.</p>
<p>Opera a d’ailleurs <a href="http://thenextweb.com/insider/2013/02/13/opera-300-million-users-webkit/">abandonné</a> son moteur Presto en février 2013 au profit du moteur WebKit.</p>
<p>Plusieurs discussions houleuses ont d’ailleurs eu lieu sur l’implémentation des propriétés <code>-webkit</code> dans les moteurs Gecko ou Presto. Idée abandonnée en cours de route.</p>
<p>Coup de théatre <a href="http://blogs.msdn.com/b/ie/archive/2014/07/31/the-mobile-web-should-just-work-for-everyone.aspx">récemment</a>, Microsoft a intégré dans son moteur certaines propriétés <code>-webkit</code> pour obtenir des sites Web mobiles (trop basés sur <code>-webkit</code>) compatibles avec Windows Phone 8.1.</p>
<h2 id="un-debut-de-solution">
      <a class="putainde-Title-anchor" href="#un-debut-de-solution">#</a>
      Un début de solution ?
    </h2><p>C’est dans ce contexte qu’est née l’initiative <a href="http://webcompat.com">webcompat.com</a>. Lancée initialement par des développeurs de chez <a href="https://hacks.mozilla.org/2014/06/introducing-webcompat-com/">Mozilla</a> et quelques autres <a href="https://github.com/webcompat/webcompat.com/graphs/contributors">contributeurs</a> en juin 2014.</p>
<p>Le site a un double objectif : rendre le Web le plus compatible possible et éliminer les bugs.</p>
<p>Le site accepte toutes sortes de bugs, que ce soit un problème de compatibilité entre navigateurs (<code>prefixe</code>, <code>sniffing UA</code>, etc), ou tout simplement un bug d’affichage, que vous soyez propriétaires ou simple utilisateurs du site.</p>
<p>Une fois le bug soumis, quiconque a la possibilité de proposer un diagnostic, de corriger le bug, voir de transmettre la solution aux équipes techniques du site en question (par Twitter, e-mail, GitHub, etc).</p>
<p>Le projet est libre et appartient à sa communauté.</p>
<p>Tout contributeur peut intervenir sur le site webcompat.com pour le <a href="https://github.com/webcompat/webcompat.com/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted">développement</a>, ou même le <a href="https://github.com/webcompat/webcompat.com/issues?q=is%3Aopen+is%3Aissue+label%3Adesign">design</a>.  Mais bien sûr et surtout sur la correction de <a href="https://github.com/webcompat/web-bugs/issues?q=is%3Aopen+is%3Aissue">bugs</a>.</p>
<p>Microsoft vient d’ailleurs de <a href="http://blogs.msdn.com/b/ie/archive/2014/07/31/the-mobile-web-should-just-work-for-everyone.aspx">rejoindre</a> Mozilla sur l’initiative webcompat.com. En lançant leur dernière version de Window Phone 8.1 ils ont constaté les <a href="https://github.com/webcompat/web-bugs/issues?q=is%3Aissue+is%3Aopen+is%3Aclosed+label%3Aie">dégâts</a> de la monoculture des sites mobile.</p>
<p>Si comme eux, vous souhaitez rendre le Web plus compatible, n’hésitez pas à proposer votre aide. En effet, il est de notre responsabilité d’éviter tout monopole ou monoculture. Car même si les navigateurs ont leur part de responsabilité, nous, développeurs en avons une aussi.</p>
]]></description>
            <link>http://putaindecode.fr/posts/bug-webcompat/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/bug-webcompat/</guid>
            <pubDate>Tue, 21 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Débuter avec Ember]]></title>
            <description><![CDATA[<p>Démarrer une <a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a> aujourd’hui ça commence souvent par : “mais quel putain de framework il 
faut que je prenne ?” Et, vu que c’est pas ça qui manque, ça se complique !</p>
<p>Parmi les multiples <a href="/posts/js/introduction-a-reactjs">technos disponibles</a> il y a <a href="http://emberjs.com">Ember</a>. Pour que le choix 
ne se résume pas à prendre celui qui a le plus joli logo ou qui génère le plus de spam sur votre Twitter, on vous propose de découvrir 
<a href="http://emberjs.com">Ember</a>. Dans les posts à venir on verra comment construire concrètement une application avec ce framework.</p>
<h2 id="les-fondamentaux">
      <a class="putainde-Title-anchor" href="#les-fondamentaux">#</a>
      Les fondamentaux
    </h2><p>Parce que l’approche “tête la première” c’est bien mais que comprendre un minimum ce qu’on fait c’est encore mieux, il me paraît sage de commencer
par expliquer la philosophie et les principaux éléments du framework, sous peine de se prendre un bon vieux <a href="http://en.wikipedia.org/wiki/RTFM">RTFM</a> 
sur le coin du pif, comme ça, en passant.</p>
<p><a href="http://emberjs.com">Ember</a> se définit comme : “A framework for creating <strong>ambitious</strong> web applications” et ça, ça claque !
Mais je vois bien que ça ne suffit pas à vous convaincre alors je vais détailler un peu. Bon alors, bien que ce soit le mot “ambitious”
qui soit mis en gras, deux autres trucs me paraissent encore plus importants :</p>
<ul>
<li><p><strong>web</strong> : l’une des caractéristiques majeures d’<a href="http://emberjs.com">Ember</a> est son attachement au web et aux URL en particulier. <strong>Les URL
et donc le routeur sont au cœur d’Ember</strong> là ou bien d’autres frameworks les considèrent au mieux comme un addon important. </p>
</li>
<li><p><strong>framework</strong> : <a href="http://emberjs.com">Ember</a> est réellement un framework. Pas une lib, pas une colonne vertébrale, pas une boîte à outils : 
un framework ! <a href="http://emberjs.com">Ember</a> propose un véritable modèle de développement que vous allez tout de suite adopter … ou rejeter
(au moins ça aura le mérite d’être clair).</p>
</li>
</ul>
<h3 id="conventions-de-nommage">
      <a class="putainde-Title-anchor" href="#conventions-de-nommage">#</a>
      Conventions de nommage
    </h3><p>Ce modèle de développement commence par les conventions de nommage. <a href="http://emberjs.com">Ember</a>
applique en effet le principe de “<em>conventions over configuration</em>“ et repose sur un nommage cohérent des différents composants 
de votre application. Et finalement, quand on y réflechit bien, la cohérence, ça n’a pas que des mauvais côtés. </p>
<p>Typiquement pour une URL <code>test</code>, <a href="http://emberjs.com">Ember</a> s’attend à trouver une <code>TestRoute</code>, un <code>TestController</code>, un gabarit <code>test</code>.
Jusqu’ici, tout va bien.</p>
<p>Curieux ? -&gt; <a href="http://emberjs.com/guides/concepts/naming-conventions/">doc officielle</a>.</p>
<h3 id="modeles">
      <a class="putainde-Title-anchor" href="#modeles">#</a>
      Modèles
    </h3><p>Un modèle est un objet avec des propriétés contenant des données métier. Le modèle est ensuite passé au gabarit pour être rendu par lui
en HTML. Typiquement, les modèles peuvent être récupérés d’un back end via une API REST JSON via <a href="https://github.com/emberjs/data">Ember Data</a>
mais pas que.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> Book = DS.Model.extend({
    title               : DS.attr(<span class="hljs-string">'string'</span>),
    publicationDate     : DS.attr(<span class="hljs-string">'date'</span>),
    author              : DS.attr(<span class="hljs-string">'string'</span>),
    publisher           : DS.attr(<span class="hljs-string">'string'</span>),
    summary             : DS.attr(<span class="hljs-string">'string'</span>)
});
</code></pre>
<p>Assoifé de connaissances ? -&gt; <a href="http://emberjs.com/guides/models/">doc officielle</a>.</p>
<h3 id="routeur">
      <a class="putainde-Title-anchor" href="#routeur">#</a>
      Routeur
    </h3><p>Le routeur permet de faire correspondre à une URL un ensemble de gabarits imbriqués permettant le rendu des modèles associés à 
chacun de ces gabarits.</p>
<p>L’exemple suivant permet le rendu des URLs : </p>
<ul>
<li><code>/books</code></li>
<li><code>/books/:book_id</code></li>
<li><code>/books/:book_id/edit</code></li>
<li><code>/books/create</code></li>
</ul>
<pre><code class="lang-js">App.Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'books'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'book'</span>, { path: <span class="hljs-string">'/:book_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
          <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
      });
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'create'</span>);
  });
});
</code></pre>
<h3 id="routes">
      <a class="putainde-Title-anchor" href="#routes">#</a>
      Routes
    </h3><p>Les routes associent un modèle à un gabarit et sont également impliquées dans les transitions entre les différentes URL (et donc les différents
états) de l’application. Elles gèrent notamment un certain nombre d’opérations sur un modèle lors de ces transitions.</p>
<pre><code class="lang-js">App.BooksRoute = Ember.Route.extend({
    model: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.find(<span class="hljs-string">'book'</span>);
    }
});
</code></pre>
<p>Intrigué ? -&gt; <a href="http://emberjs.com/guides/routing/">doc officielle</a>.</p>
<h3 id="controleurs">
      <a class="putainde-Title-anchor" href="#controleurs">#</a>
      Contrôleurs
    </h3><p>Le contrôleur gère l’état de l’application. Il est situé entre la route dont il récupère le modèle et le gabarit dont il répond aux appels.
Les données du contrôleur sont accessibles au gabarit au même titre que le modèle.</p>
<p>Le contrôleur est par exemple responsable du traitement des actions effectuées par l’utilisateur sur l’interface rendue par le gabarit : </p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">button</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">sort</span>"}}&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
</code></pre>
<pre><code class="lang-js">App.BooksController = Ember.ArrayController.extend({
  actions: {
    <span class="hljs-comment">// appelé lors du clic sur le bouton</span>
    sort: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
        ...
    }
  }
});
</code></pre>
<p>Perdu ? -&gt; <a href="http://emberjs.com/guides/controllers/">doc officielle</a>.</p>
<h3 id="vues">
      <a class="putainde-Title-anchor" href="#vues">#</a>
      Vues
    </h3><p>Il est très rare d’avoir à définir des vues en <a href="http://emberjs.com">Ember</a> parce que les gabarits <a href="http://handlebarsjs.com/">Handlebars</a>
sont surpuissants et que les contrôleurs se chargent de la gestion de l’état de l’application.</p>
<p>Vous en voulez quand même ? -&gt; <a href="http://emberjs.com/guides/views/">doc officielle</a>.</p>
<h3 id="gabarits">
      <a class="putainde-Title-anchor" href="#gabarits">#</a>
      Gabarits
    </h3><p>Un gabarit est un fragment de code HTML permettant, via des expressions, d’afficher les données du modèle associé. Les gabarits d’<a href="http://emberjs.com">Ember</a>
sont des gabarits <a href="http://handlebarsjs.com/">Handlebars</a>. Les expressions Handlebars sont délimitées par <code>{{</code> et <code>}}</code>.</p>
<p>L’exemple suivant permet d’afficher le titre d’une app composé d’un prénom et d’un nom pour peu que l’on ait passé au gabarit un
modèle contenant les deux propriétés <code>firstname</code> et <code>lastname</code>.</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{{firstname}} {{lastname}} Library<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
</code></pre>
<p><a href="http://handlebarsjs.com/">Handlebars</a> vient avec de nombreux outils (helpers) permettant de dynamiser nos gabarits : <code>{{#if isActive}} ... {{/if}}</code>,
<code>{{#each users}} ... {{/each}}</code>, etc.</p>
<p>Dans <a href="http://emberjs.com">Ember</a>, les gabarits peuvent contenir un élément très important : <code>{{outlet}}</code>. Cet outlet définit un emplacement
pour un autre gabarit permettant ainsi de multiples imbrications à mesure que les routes de l’application sont activées.</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>{{firstname}} {{lastname}} Library<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
  {{outlet}}
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Tout élément de modèle injecté dans un gabarit sera <strong>automatiquement mis à jour</strong> (binding) par <a href="http://emberjs.com">Ember</a> lorsque le modèle
associé au gabarit sera modifié. Évidemment, seul cet élément sera rafraîchit et non le gabarit entier sinon c’est tricher.</p>
<p>Envie de tester ? -&gt; <a href="http://emberjs.com/guides/templates/the-application-template/">doc officielle</a>.</p>
<h3 id="composants">
      <a class="putainde-Title-anchor" href="#composants">#</a>
      Composants
    </h3><p>Un composant <a href="http://emberjs.com">Ember</a> permet de définir une balise HTML personnalisée, permettant ainsi de partager de puissants 
éléments réutilisables au sein de votre application.</p>
<p>Vous en avez toujours rêvé ? -&gt; <a href="http://emberjs.com/guides/components/">doc officielle</a>.</p>
<h3 id="generation-d-objets">
      <a class="putainde-Title-anchor" href="#generation-d-objets">#</a>
      Géneration d’objets
    </h3><p>Pour qu’un gabarit soit rendu lorsqu’une URL est demandée, il faut donc que le routeur définisse cette URL, qu’elle soit implémentée par 
une route qui récupèrera un modèle qu’elle mettra à disposition du contrôleur et du gabarit. Le contrôleur écoutera les 
évènements en provenance du gabarit et y apportera la réponse adaptée. À noter que l’évènement peut également remonter jusqu’à la route.
Le gabarit est quant à lui encapsulé dans une vue gérée par Ember tout seul comme un grand.</p>
<p>Il n’est cependant <strong>pas nécessaire de créer systématiquement tous ces objets</strong> si aucune logique spécifique n’a besoin d’y être définie.
En effet, <a href="http://emberjs.com">Ember</a> s’appuie sur les <a href="#conventions-de-nommage">conventions de nommage</a> pour retrouver successivement,
à partir d’une URL, la route, le contrôleur, la vue et le gabarit associés. Si l’un de ces objet n’est pas trouvé, <a href="http://emberjs.com">Ember</a>
va en générer un par défaut. </p>
<p>Donc si l’on crée dans le routeur la route suivante sans créer aucun autre objet : </p>
<pre><code class="lang-js">App.Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">this</span>.route(<span class="hljs-string">"about"</span>, { path: <span class="hljs-string">"/about"</span> });
});
</code></pre>
<p><a href="http://emberjs.com">Ember</a> va générer les objets suivants :</p>
<ul>
<li><strong>route</strong> : <code>AboutRoute</code></li>
<li><strong>contrôleur</strong> : <code>AboutController</code></li>
<li><strong>gabarit</strong> : <code>about</code></li>
</ul>
<p>Dans une application <a href="http://emberjs.com">Ember</a>, <strong>il est donc nécessaire de ne définir que ce dont on a besoin !</strong>. Et c’est bien connu, 
moins il y a de boilerplate, plus il y a de plaisir !</p>
<p>Envie d’en savoir plus ? -&gt; <a href="http://emberjs.com/guides/routing/generated-objects/">doc officielle</a>.</p>
<p>Un bon moyen de se rendre compte de ça consiste à installer le debugger Ember sur votre navigateur préféré (donc pas IE). Vous aurez, entre
autres, la liste de l’ensemble des objets impliqués dans le rendu d’une URL donnée. Cette liste distingue de manière claire les objets
créés par vous et ceux générés par Ember. </p>
<p>Ce module s’appelle <strong>Ember Inspector</strong> et est disponible pour <a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en">Chrome</a> 
et <a href="https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/">Firefox</a>. C’est absolument indispensable lorsqu’on développe en Ember.</p>
<h2 id="conclusion-et-next-steps">
      <a class="putainde-Title-anchor" href="#conclusion-et-next-steps">#</a>
      Conclusion et next steps
    </h2><p><a href="http://emberjs.com">Ember</a> est donc un framework très riche et extrêmement plaisant à pratiquer. 
<strong>Un vrai framework avec un vrai parti pris et des vrais choix structurants.</strong>
Il est résolument tourné vers le web et les URL. Ses créateurs sont également ceux de son moteur de gabarit <a href="http://handlebarsjs.com/">Handlebars</a>
et sont très impliqués dans diverses initiatives autour de la standardisation et de l’évolution du web. Pour n’en citer que deux :
<a href="http://jsonapi.org/">JSON API</a> et <a href="https://gist.github.com/wycats/9144666b0c606d1838be">Web Components</a>, notamment au travers du moteur
de gabarits <a href="https://github.com/tildeio/htmlbars">HTMLBars</a>. 
Ils embrassent très rapidement les nouveaux standards tels que <a href="https://people.mozilla.org/~jorendorff/es6-draft.html">ES6 Harmony</a> à l’image des travaux
effectués autour d’<a href="http://www.ember-cli.com/">ember-cli</a> qui sera abordé dans un prochain article.</p>
<p>Enfin, contrairement aux <em>a priori</em>, la courbe d’apprentissage d’<a href="http://emberjs.com">Ember</a>
est progressive et il est très simple à prendre en main une fois les concepts de base appréhendés - c’est justement le but de cet
article. Au prochain épisode, nous verrons justement - par la pratique cette fois, <strong>comment démarrer et construire progressivement une
application <a href="http://emberjs.com">Ember</a></strong>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/debuter-avec-ember/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/debuter-avec-ember/</guid>
            <pubDate>Mon, 20 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comment essayer de coder à peu près comme un chef (raté) sous Windows]]></title>
            <description><![CDATA[<figure>
  <img src="index.jpg" alt="Keyboard">
  <small><a href="http://www.customity.com/content/wallpaper/windows-key-wallpaper">Credit photo</a></small>
</figure>

<p>Oh oui, en voilà une belle question.</p>
<p>Il n’est pas toujours évident d’avoir un Linux, Unix, BSD ou autre avec un petit shell bien sympa sous la main. Et parfois coder sous Windows est une nécessité voire un désir. (Ouais, je ne vous parlerai pas ici de changer de boulot si Windows vous est imposé(e). Je ne vous expliquerai pas non plus votre masochisme d’apprécier cet OS pour développer, ce n’est pas le sujet).</p>
<p>Étant un homme de challenge, j’aime me mettre dans des contextes limités et voir comment je me débrouille pour sortir d’une situation pénible à une situation acceptable voire agréable. Je me suis alors lancé pour vous dans cette aventure.</p>
<p>Oh mais pourquoi j’ai dû faire ça à la base ?</p>
<p>Après avoir créé <a href="https://github.com/kud/my">mon propre système de synchronisation de machines sous Mac OS X</a> (plus souvent communément appelé dotfiles mais faisant un peu plus), j’ai voulu faire de même sous Windows au cas où mon système crasherait et où je devrais tout réinstaller. On n’est jamais à l’abri.</p>
<p>Pour cela, plusieurs outils vont vous être nécessaires. Un chef sans bons outils, c’est drôlement handicapant. (Déjà que l’OS en question n’aide pas).</p>
<h2 id="chocolatey-la-base">
      <a class="putainde-Title-anchor" href="#chocolatey-la-base">#</a>
      Chocolatey : la base
    </h2><p><a href="http://chocolatey.org/">Chocolatey</a>. Ouais, chocolatey, ce petit script vous permettra de télécharger tout et n’importe quoi en CLI (ligne de commandes). Pour ceux qui ont l’habitude de Mac ou Linux, c’est le brew / apt-get de Windows.</p>
<p>Comment l’installer ?</p>
<p>Lancez <code>cmd.exe</code> en mode administrateur (touche windows puis “cmd” puis shift+ctrl+enter) et exécutez ce code :</p>
<pre><code class="lang-console">$ <span class="hljs-variable">@powershell</span> -NoProfile -ExecutionPolicy unrestricted -Command <span class="hljs-string">"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET PATH=<span class="hljs-variable">%PATH</span><span class="hljs-variable">%;</span><span class="hljs-variable">%ALLUSERSPROFILE</span><span class="hljs-variable">%\</span>chocolatey\bin
</code></pre>
<p>Ou <code>PowerShell</code> en mode administrateur (touche windows puis “powershell” puis shift+ctrl+enter) et éxecutez :</p>
<pre><code class="lang-console">$ iex ((new-<span class="hljs-tag">object</span> net.webclient).<span class="hljs-function"><span class="hljs-title">DownloadString</span><span class="hljs-params">(<span class="hljs-string">'https://chocolatey.org/install.ps1'</span>)</span></span>)
</code></pre>
<p>Une fois installé, vous pourrez installer n’importe quel logiciel listé sur <a href="http://chocolatey.org/packages">leur site</a>.</p>
<p>Passons à la suite.</p>
<h2 id="logiciels-de-developpement">
      <a class="putainde-Title-anchor" href="#logiciels-de-developpement">#</a>
      Logiciels de développement
    </h2><p>Yes, on a donc Chocolatey qui va nous simplifier grandement l’installation de logiciels. Passons maintenant aux outils pour bien développer.</p>
<h3 id="git">
      <a class="putainde-Title-anchor" href="#git">#</a>
      Git
    </h3><p>Lorsque tu joues à un jeu vidéo, tu sauvegardes régulièrement ton avancement non ? Bah là, c’est pareil mais pour le code.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> git.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://git-scm.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/git.install">lien du package</a></li>
</ul>
<h3 id="node-js">
      <a class="putainde-Title-anchor" href="#node-js">#</a>
      Node.js
    </h3><p>Faire du JavaScript côté serveur ou en shell, le pied. Surtout pour faire des scripts Windows, plutôt que de passer par Batch.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> nodejs.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://nodejs.org/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/nodejs.install">lien du package</a></li>
</ul>
<h3 id="editeur-de-texte">
      <a class="putainde-Title-anchor" href="#editeur-de-texte">#</a>
      Éditeur de texte
    </h3><p>Sublime Text, l’éditeur préféré des Franç… je m’égare. Bref, un bon éditeur.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> sublimetext3
</code></pre>
<ul>
<li><a href="http://www.sublimetext.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/sublimetext3">lien du package</a></li>
</ul>
<p>Vous pouvez aussi installer <a href="https://atom.io/">Atom</a> si vous préférez.</p>
<h3 id="gestion-d-une-base-de-donnees">
      <a class="putainde-Title-anchor" href="#gestion-d-une-base-de-donnees">#</a>
      Gestion d’une base de données
    </h3><p>HeidiSQL, un logiciel avec une interface qui se rapproche de phpMyAdmin.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> HeidiSQL
</code></pre>
<ul>
<li><a href="http://www.heidisql.com/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/HeidiSQL">lien du package</a></li>
</ul>
<p>Ou encore MySQL Workbench un excellent soft pour gérer une base de données:</p>
<ul>
<li>Modélisation</li>
<li>Édition</li>
<li>Migration
Par contre, il est un peu plus complexe à utiliser.</li>
</ul>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> mysql.workbench
</code></pre>
<ul>
<li><a href="http://dev.mysql.com/downloads/workbench/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/mysql.workbench">lien du package</a></li>
</ul>
<h3 id="un-meilleur-shell">
      <a class="putainde-Title-anchor" href="#un-meilleur-shell">#</a>
      Un meilleur shell
    </h3><p>Cmder va vous permettre quelques fonctionnalités intéressantes que le shell de Windows n’a pas de base, comme taper <code>&lt;tab&gt;</code> pour l’autocomplétion, avoir un historique persistant entre 2 sessions, des onglets, le split de console, l’intégration de PuTTY et d’autres choses venu de la banquise. (le lieu de vie des pinguins)</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> Cmder
</code></pre>
<ul>
<li><a href="https://bliker.github.io/cmder/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/Cmder">lien du package</a></li>
</ul>
<h3 id="si-vous-avez-besoin-de-ssh">
      <a class="putainde-Title-anchor" href="#si-vous-avez-besoin-de-ssh">#</a>
      Si vous avez besoin de SSH
    </h3><p>Pour le SSH sous Windows c’est assez complexe, il faut quelques outils dont le principal, putty (un terminal et +).</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> putty
</code></pre>
<ul>
<li><a href="http://chocolatey.org/packages/putty">site officiel</a></li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">lien du package</a></li>
</ul>
<p>Putty vient avec une suite de logiciels :</p>
<ul>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTYgen</a> pour générer une clé SSH sous Windows</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Plink</a> pour permettre à HeidiSQL de se connecter à une base de données via SSH.</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Pageant</a> pour charger votre clé SSH dans Windows pour éviter qu’il demande sans cesse la clé ou le mot de passe.</li>
</ul>
<blockquote>
<p>Pour que le ssh soit agréable, je vous recommande pageant et ensuite un terminal comme <em>Clink</em> ou encore <em>git bash</em> qui s’installe via <em>git</em>.</p>
</blockquote>
<h3 id="une-machine-virtuelle-pour-tester-ie-ou-meme-gnu-linux">
      <a class="putainde-Title-anchor" href="#une-machine-virtuelle-pour-tester-ie-ou-meme-gnu-linux">#</a>
      Une machine virtuelle pour tester IE ou même GNU/Linux
    </h3><p>On a toujours une intégration à tester sous IE pour ça Microsoft nous donne accès à des machines virtuelles gratuitement sur <a href="https://www.modern.ie/fr-fr">ModernIE</a>. Il nous faut donc Virtualbox pour les lancer.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> virtualbox
$ choco <span class="hljs-keyword">install</span> VirtualBox.ExtensionPack
</code></pre>
<blockquote>
<p>l’Extension Pack est utile pour une intégration parfaite avec votre machine si vous installez votre propre VM GNU/Linux ou Windows.</p>
</blockquote>
<ul>
<li><a href="hhttps://www.virtualbox.org/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/virtualbox">lien du package</a></li>
</ul>
<h3 id="compresser-decompresser-comme-vous-le-voulez">
      <a class="putainde-Title-anchor" href="#compresser-decompresser-comme-vous-le-voulez">#</a>
      Compresser / décompresser comme vous le voulez
    </h3><p>7zip, le logiciel de référence pour ce genre de pratique.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> <span class="hljs-number">7</span>zip.<span class="hljs-keyword">install</span>
</code></pre>
<ul>
<li><a href="http://www.7-zip.org/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/7zip.install">lien du package</a></li>
</ul>
<h3 id="gerer-les-pdf">
      <a class="putainde-Title-anchor" href="#gerer-les-pdf">#</a>
      Gérer les pdf
    </h3><p>Sumatra pour les lire. PDFCreator pour faire une imprimante virtuelle sortant des PDFs.</p>
<h4 id="sumatra">
      <a class="putainde-Title-anchor" href="#sumatra">#</a>
      Sumatra
    </h4><ul>
<li><a href="http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/sumatrapdf.install">lien du package</a></li>
</ul>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> sumatrapdf.<span class="hljs-keyword">install</span>
</code></pre>
<h4 id="pdfcreator">
      <a class="putainde-Title-anchor" href="#pdfcreator">#</a>
      PDFCreator
    </h4><ul>
<li><a href="http://www.pdfforge.org/pdfcreator">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/pdfcreator">lien du package</a></li>
</ul>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> pdfcreator
</code></pre>
<h3 id="mettre-des-onglets-dans-l-explorateur-de-fichiers">
      <a class="putainde-Title-anchor" href="#mettre-des-onglets-dans-l-explorateur-de-fichiers">#</a>
      Mettre des onglets dans l’explorateur de fichiers
    </h3><p>Nous sommes en 2014 ça fait des années que Microsoft sait mais, ce n’est toujours pas disponible. C’est là que Clover rentre en jeu.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> Clover
</code></pre>
<ul>
<li><a href="http://ejie.me/">site officiel</a></li>
<li><a href="http://chocolatey.org/packages/Clover">lien du package</a></li>
</ul>
<h3 id="spaaaaaaaces">
      <a class="putainde-Title-anchor" href="#spaaaaaaaces">#</a>
      Spaaaaaaaces
    </h3><p>Parce qu’avoir plusieurs bureaux / espaces, c’est plus pratique pour gérer ses fenêtres, je vous propose VirtuaWin. Cela vous permettra de garder en plein écran vos logiciels et de zapper d’un logiciel à un autre sans passer par <code>alt+tab</code> mais en allant d’un bureau à un autre.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> virtuawin
</code></pre>
<ul>
<li><a href="http://virtuawin.sourceforge.net/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/virtuawin">lien du package</a></li>
</ul>
<h3 id="launchy-le-alfred-like-sous-windows">
      <a class="putainde-Title-anchor" href="#launchy-le-alfred-like-sous-windows">#</a>
      Launchy, le Alfred-like sous Windows
    </h3><p>Je sais pas vous mais moi, les raccourcis qui me gâchent mon beau wallpaper choisi avec goût, ça m’énerve. Et puis le clickodrome, c’est lent et chiant. Du coup, lancer ses logiciels à partir d’un moteur de recherche, c’est quand même vachement bien. Ca permet aussi de faire des recherches de fichier, des calculs, et tout un tas d’autres choses. Voici alors Launchy.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> launchy-beta
</code></pre>
<ul>
<li><a href="http://www.launchy.net/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/launchy-beta">lien du package</a></li>
</ul>
<h3 id="pipette-et-retouche">
      <a class="putainde-Title-anchor" href="#pipette-et-retouche">#</a>
      Pipette et retouche
    </h3><p>L’indispensable <a href="http://photofiltre.free.fr/frames.htm">PhotoFiltre</a> qui, bien qu’il ne soit plus mis à jour depuis 2012, est très stable et efficace. Il fait peu mais, le fait bien.</p>
<ul>
<li>Édition rapide d’images</li>
<li>Pipette</li>
<li>etc.</li>
</ul>
<p>Et surtout, il est ultra léger et démarre en moins d’une seconde.</p>
<h3 id="et-enfin-comment-ne-pas-se-niquer-les-yeux-toute-la-journee">
      <a class="putainde-Title-anchor" href="#et-enfin-comment-ne-pas-se-niquer-les-yeux-toute-la-journee">#</a>
      Et enfin, comment ne pas se niquer les yeux toute la journée
    </h3><h4 id="f-lux">
      <a class="putainde-Title-anchor" href="#f-lux">#</a>
      f.lux
    </h4><p>On va commencer par f.lux. Ce petit logiciel permettant de gérer la colorimétrie de votre écran en fonction de l’heure. Typiquement, les écrans rendent un blanc digne d’un soleil à midi. Sauf que le soir, on allume la lumière et celle-ci n’a pas du coup une couleur blanche mais souvent plutôt rouge. f.lux permet alors d’ajuster votre écran afin que la couleur soit identique à la lumière ambiante pour réduire les différences de couleurs et éviter de vous abimer les yeux. En plus, ça permet au cerveau de se préparer à aller se coucher. :D</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> f.lux
</code></pre>
<ul>
<li><a href="https://justgetflux.com/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/f.lux">lien du package</a></li>
</ul>
<h4 id="mactype">
      <a class="putainde-Title-anchor" href="#mactype">#</a>
      MacType
    </h4><p>Et surtout, MacType. Oh oui MacType. Je pense que seule une personne venant de Mac OS X peut comprendre. Dieu sait que le font rendering sous Windows est vraiment pourri et que Steve Jobs depuis le départ de Mac a fait en sorte sur le rendering des fonts sous son OS soit de qualité.</p>
<p>Pour réduire cette différence entre un Windows et un Mac OS X, je vous propose MacType qui permet de remplacer le font rendering de Windows et d’apprécier lire à nouveau sur cet OS.</p>
<pre><code class="lang-console">$ choco <span class="hljs-keyword">install</span> mactype
</code></pre>
<p>Je vous conseille le profil <code>XMac.LCD.Default</code>.</p>
<ul>
<li><a href="https://code.google.com/p/mactype/">site officiel</a></li>
<li><a href="https://chocolatey.org/packages/mactype">lien du package</a></li>
</ul>
<h2 id="vous-voila-pare-e">
      <a class="putainde-Title-anchor" href="#vous-voila-pare-e">#</a>
      Vous voilà paré(e) !
    </h2><p>On est bon, on a tous les outils nécessaires pour pouvoir coder correctement sur Windows.</p>
<p>Si vous souhaitez en savoir plus et surtout vous tenir à jour d’éventuels logiciels que je pourrais installer, n’hésitez pas à vous rendre sur mon projet <a href="https://github.com/kud/my-unfortunately">my-unfortunately</a> qui est le <em>synchroniser</em> dont je vous ai parlé tout à l’heure.</p>
<p>Bon code !</p>
]]></description>
            <link>http://putaindecode.fr/posts/windows/comment-coder-sous-windows/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/windows/comment-coder-sous-windows/</guid>
            <pubDate>Wed, 15 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dépendances et premier projet en Ruby]]></title>
            <description><![CDATA[<p><a href="#tl-dr">tl;dr</a></p>
<p>Dans l’<a href="/posts/backend/premiers-pas-avec-ruby">article précédent</a>
nous avons installé Ruby. Désormais nous allons aborder les gems,
les dépendances et commencer notre web service.</p>
<p>Un gem en Ruby c’est une lib, comme un paquet NPM pour NodeJS. C’est
d’ailleurs le système de rubygems qui a inspiré le système de NPM.
Pour installer un gem, rien de plus simple que <code>gem install sass</code>,
qui ici va installer la bibliothèque <code>sass</code>.</p>
<p>Un projet Ruby nécessite la plupart du temps des bibliothèques afin
de ne pas tout faire soi-même, il est donc nécessaire d’avoir une
gestion des dépendances pour le projet.</p>
<h2 id="bundler-le-gem-qui-gere-les-gems">
      <a class="putainde-Title-anchor" href="#bundler-le-gem-qui-gere-les-gems">#</a>
      Bundler, le gem qui gère les gems
    </h2><p><a href="http://bundler.io">Bundler</a> est un gem qui va vous permettre de créer un fichier Gemfile
contenant vos dépendances, et qui vous installera les gems
nécessaires avec la gestion des versions et de leurs propres
dépendances. Un fichier Gemfile se présente comme ceci :</p>
<pre><code class="lang-ruby">source <span class="hljs-string">'https://rubygems.org'</span>
ruby <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<p>L’instruction <code>source</code> permet de préciser l’url des dépôts de gems.
La version de ruby n’est pas obligatoire mais j’aime la préciser pour
ne pas me mélanger dans mes projets avec différentes versions de Ruby
(voir le
<a href="/posts/backend/premiers-pas-avec-ruby">précédent article pour les versions du Ruby</a>
et <a href="https://github.com/sstephenson/rbenv">rbenv</a>). Et enfin, la
déclaration de notre première bibliothèque de dépendance :
<a href="http://www.sinatrarb.com">Sinatra</a>.</p>
<p>Il est possible d’être bien plus précis dans le Gemfile, comme…</p>
<p>Préciser dans quel environnement charger les gems :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'sqlite3'</span>, <span class="hljs-symbol">group:</span> [<span class="hljs-symbol">:development</span>, <span class="hljs-symbol">:test</span>]
</code></pre>
<p>Une numéro de version :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'rails'</span>, <span class="hljs-string">'4.1.6'</span>         <span class="hljs-comment"># version 4.1.6</span>
gem <span class="hljs-string">'sass-rails'</span>, <span class="hljs-string">'~&gt; 4.0.3'</span> <span class="hljs-comment"># &gt;= 4.0.3 mais &lt; 4.1.0</span>
</code></pre>
<p>Préciser la classe à charger :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'valid_email'</span>, <span class="hljs-symbol">require:</span> <span class="hljs-string">'valid_email/email_validator'</span>
</code></pre>
<p>Aller chercher directement sur Github :</p>
<pre><code class="lang-ruby">gem <span class="hljs-string">'nokogiri'</span>, <span class="hljs-symbol">github:</span> <span class="hljs-string">'sparklemotion/nokogiri'</span>
<span class="hljs-comment"># https://github.com/sparklemotion/nokogiri.git</span>

gem <span class="hljs-string">'rails'</span>, <span class="hljs-symbol">github:</span> <span class="hljs-string">'rails'</span>
<span class="hljs-comment"># https://github.com/rails/rails.git</span>

gem <span class="hljs-string">'rails'</span>, <span class="hljs-symbol">github:</span> <span class="hljs-string">'rails'</span>, <span class="hljs-symbol">branch:</span> <span class="hljs-string">'4-1-stable'</span>
<span class="hljs-comment"># https://github.com/rails/rails.git sur la branche 4-1-stable</span>
</code></pre>
<p>Il existe encore d’autres instructions, de quoi rendre sa gestion des
dépendances vraiment fine et précise.</p>
<p>Une fois le Gemfile prêt, bundler a plusieurs commandes de
disponibles pour pouvoir les télécharger et utiliser.</p>
<ul>
<li><code>$ bundle install</code> installera les gems requis</li>
<li><code>$ bundle update</code> mettra à jour vers les versions les plus récentes si possible les gems requis</li>
<li><code>$ bundle exec</code> permettra de précéder une commande ruby afin de l’exécuter dans le contexte du Gemfile, très utile lorsque l’on a différentes versions de Ruby qui se baladent dans le terminal</li>
</ul>
<p>Bundler va générer un fichier <code>Gemfile.lock</code> qui est la description
exhaustive des dépendances de votre application, chaque gem avec le
numéro de sa version installée, chaque dépendance pour chaque gem,
une jolie arborescence plus que précise.</p>
<h2 id="commencons-notre-web-service">
      <a class="putainde-Title-anchor" href="#commencons-notre-web-service">#</a>
      Commençons notre web service
    </h2><p>Assez parlé des outils qui existent, utilisons-les. Tout d’abord
installons Bundler, sans oublier le <code>$ rbenv rehash</code> nécessaire si vous
utilisez rbenv pour vos versions de Ruby afin de mettre à jour les
commandes disponibles dans le terminal :</p>
<pre><code><span class="hljs-variable">$ </span>gem install bundler
<span class="hljs-variable">$ </span>rbenv rehash
</code></pre><p>Pour notre première application, nous allons faire un web service
avec Sinatra qui est un micro-framework web, ayant d’ailleurs
clairement inspiré Express (“Sinatra inspired web development
framework for node.js”). Notre Gemfile va donc être exactement
comme notre premier exemple :</p>
<pre><code class="lang-ruby">source <span class="hljs-string">'https://rubygems.org'</span>
ruby <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<p>Un petit <code>bundle install</code> et nous sommes prêts à démarrer !</p>
<p>Pour ne pas brusquer les choses, nous allons faire la version la plus
simple d’un web service avec Sinatra, ce qui nous permettra de
constater la simplicité extrême de Ruby et du framework :</p>
<pre><code class="lang-ruby"><span class="hljs-comment">########</span>
<span class="hljs-comment"># app.rb</span>
<span class="hljs-comment">#</span>

<span class="hljs-keyword">require</span> <span class="hljs-string">'sinatra'</span>

get <span class="hljs-string">'/'</span> <span class="hljs-keyword">do</span>
  <span class="hljs-string">'Hello World!'</span>
<span class="hljs-keyword">end</span>
</code></pre>
<p>Qu’avons-nous fait là ? Pas grand chose, et en même temps tout juste
ce qu’il faut. Nous avons inclus le gem à notre script et utilisé la
méthode Sinatra <code>get</code> nous permettant de déclarer un point d’entrée
en <code>GET</code> sur la route ‘/‘. Cette méthode prend également comme
argument un <code>block</code> caractérisé par le <code>do</code> et le <code>end</code>. La dernière
valeur du block étant la valeur de retour, nous renvoyons la seule
chaîne de caractères “Hello World!”.</p>
<p>Et maintenant : lancement ! <code>$ bundle exec ruby app.rb</code> va lancer
l’application (mais <code>ruby app.rb</code> suffit), par défaut sur le port
<code>4567</code>. Regardez vite <a href="http://localhost:4567">http://localhost:4567</a>
et là magie, “Hello World!” sur une magnifique page blanche, notre
tout premier web service est fonctionnel.</p>
<p>Alors oui, ce n’est pas une révolution. Mais tout de même, en
réduisant la syntaxe du block on se retrouve avec un script de deux
lignes qui crée un vrai web service web. Et vous allez vite voir
qu’en quelques lignes de plus on peut vite complexifier le bousin.</p>
<h2 id="au-prochain-episode">
      <a class="putainde-Title-anchor" href="#au-prochain-episode">#</a>
      Au prochain épisode
    </h2><p>Dans l’article suivant nous allons ajouter des fonctionnalités à
notre toute nouvelle application, de nouvelles routes, de la
persistence et aussi des vues dans un format un peu plus utile.</p>
<p>Stay tuned!</p>
<h2 id="tl-dr">
      <a class="putainde-Title-anchor" href="#tl-dr">#</a>
      tl;dr
    </h2><p>Voici la version abrégée de cet article :</p>
<pre><code class="lang-ruby"><span class="hljs-comment"># Gemfile</span>
source <span class="hljs-string">'https://rubygems.org'</span>
ruby <span class="hljs-string">'2.1.2'</span>
gem <span class="hljs-string">'sinatra'</span>
</code></pre>
<pre><code class="lang-ruby"><span class="hljs-comment"># app.rb</span>
<span class="hljs-keyword">require</span> <span class="hljs-string">'sinatra'</span>
get <span class="hljs-string">'/'</span> <span class="hljs-keyword">do</span>
  <span class="hljs-string">'Hello World!'</span>
<span class="hljs-keyword">end</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>gem install bundler
<span class="hljs-variable">$ </span>rbenv rehash
<span class="hljs-variable">$ </span>bundle install
<span class="hljs-variable">$ </span>ruby app.rb
</code></pre>
<h2 id="sources">
      <a class="putainde-Title-anchor" href="#sources">#</a>
      Sources
    </h2><ul>
<li><a href="https://rubygems.org">RubyGems</a></li>
<li><a href="http://bundler.io">Bundler</a></li>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a></li>
<li><a href="http://www.sinatrarb.com">Sinatra</a> et surtout son <a href="http://www.sinatrarb.com/intro.html">README</a></li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/backend/ruby-dependances-et-projet/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/backend/ruby-dependances-et-projet/</guid>
            <pubDate>Tue, 14 Oct 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Le guide complet pour centrer en css]]></title>
            <description><![CDATA[<p>Centrer en css, c’est la base, et parfois, ce n’est pas si simple. Ce guide vous servira donc pour vous lister les techniques les plus connues pour réaliser ce fameux effet centré.</p>
<p>Les principales techniques de centrage en css seront expliquées pendant les premières déclarations, et réutilisées par la suite dans tout le guide, vous pouvez donc avoir un intérêt à lire le guide dans le sens normal de la lecture.</p>
<p>Cependant, si vous souhaitez juste avoir le code correspondant à votre problème, vous pouvez utiliser le menu composé d’ancres ci-dessous.</p>
<h2 id="sommaire">
      <a class="putainde-Title-anchor" href="#sommaire">#</a>
      Sommaire
    </h2><ul>
<li><a href="#tl-dr-mes-techniques-preferees">tl;dr - mes techniques préférées</a></li>
<li><a href="#techniques-traditionnelles">Techniques tradtionnelles</a><ul>
<li><a href="#un-bloc-dans-un-bloc">Un bloc dans un bloc</a></li>
<li><a href="#des-blocs-dans-un-bloc">Des blocs dans un bloc</a></li>
<li><a href="#des-elements-inlines-dans-un-bloc">Des éléments inlines dans un bloc</a></li>
</ul>
</li>
<li><a href="#techniques-avancees-flexbox-ie11-">Techniques avancées : flexbox (ie11+)</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="tl-dr-mes-techniques-preferees">
      <a class="putainde-Title-anchor" href="#tl-dr-mes-techniques-preferees">#</a>
      tl;dr - mes techniques préférées
    </h2><h3 id="un-bloc-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#un-bloc-dans-un-bloc">#</a>
      Un bloc dans un bloc
    </h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>; 
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>)</span></span>; <span class="hljs-comment">/* compatibilité : ie9+ */</span>
}</span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h3 id="des-blocs-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#des-blocs-dans-un-bloc">#</a>
      Des blocs dans un bloc
    </h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-rule"><span class="hljs-attribute">.parent</span>:<span class="hljs-value">before {
  content: <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>; <span class="hljs-comment">/* space width */</span>
}

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h3 id="des-elements-inline-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#des-elements-inline-dans-un-bloc">#</a>
      Des éléments inline dans un bloc
    </h3><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<p><em>Note : le détail de la technique est expliqué plus loin dans le post</em></p>
<h2 id="techniques-traditionnelles">
      <a class="putainde-Title-anchor" href="#techniques-traditionnelles">#</a>
      Techniques traditionnelles
    </h2><h3 id="un-bloc-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#un-bloc-dans-un-bloc">#</a>
      Un bloc dans un bloc
    </h3><h4 id="centrage-horizontal">
      <a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>
      Centrage horizontal
    </h4><p>La technique du <code>margin: 0 auto;</code> consiste à dire au browser que les marges de gauche et droite seront identiques et que leur valeur sera <code>auto</code>. Le browser calcule donc des marges de même taille de chaque côté et centre le bloc naturellement.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-number">0</span> auto</span></span>;
}</span>
</code></pre>
<p>La technique du <code>left: 50%; + margin négative en unités</code> est à utiliser sur les blocs dont vous connaissez la taille à l’avance. Le principe consiste à expliquer au navigateur qu’on place un bloc en <code>position: absolute;</code>. Celui-ci va donc chercher à se placer par rapport à son élément parent le plus proche qui est en <code>position: relative;</code>. Il faut donc ne pas oublier d’attribuer cette propriété sur le <code>.parent</code>. Il suffit ensuite d’indiquer qu’on place le bloc à <code>left: 50%;</code>. Le bloc se place donc à 50% vers la gauche par rapport à la taille totale du bloc conteneur. Il ne nous reste plus qu’à décaler vers la droite le bloc <code>.child</code> en lui donnant une valeur de margin négative vers la gauche. Celle-ci doit être égale à la moitié de la <code>width</code>(en pixels, em, rems, pourcentages, …).</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> {X}em</span></span>; <span class="hljs-comment">/* remplacer {X} par votre valeur */</span>
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-left</span>:<span class="hljs-value"> -{X/<span class="hljs-number">2</span>}em</span></span>; <span class="hljs-comment">/* remplacer {X/2} par la moitié de votre width */</span>
}</span>
</code></pre>
<p>En combinant la technique précédente et des propriétés css modernes, on arrive à la technique du <code>transform: translate; négatif</code>. Même principe que la technique précédente, sauf qu’à la fin, on indique au bloc enfant d’effectuer une translation sur lui-même, en suivant l’axe X (l’axe horizontal) de -50%, donc 50% vers la droite. Sauf que ce 50% s’applique sur le bloc enfant directement. Vous n’avez donc pas besoin de connaitre la <code>width</code> de l’élément enfant à l’avance. Le <code>transform-style: preserve-3d;</code> sur le bloc <code>.parent</code> est là pour régler des problèmes de flou sur certains navigateurs lors de transitions.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translateX</span>(-<span class="hljs-number">50%</span>)</span></span>;
}</span>
</code></pre>
<h4 id="centrage-vertical">
      <a class="putainde-Title-anchor" href="#centrage-vertical">#</a>
      Centrage vertical
    </h4><p>Même principe que la technique <code>left: 50%; + margin négative en unités</code>, sauf qu’on applique le principe aux propriétés css relatives à la hauteur. Vous avez donc besoin de connaitre à l’avance la hauteur de votre bloc.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> {Y}em</span></span>; <span class="hljs-comment">/* remplacer {Y} par votre valeur */</span>
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> -{Y/<span class="hljs-number">2</span>}em</span></span>; <span class="hljs-comment">/* remplacer {Y/2} par la moitié de votre height */</span>
}</span>
</code></pre>
<p>Ici on réutilise le principe expliqué dans la technique <code>transform: translate; négatif</code>, mais appliqué à la hauteur. Notez que le nom de la <a href="http://apps.workflower.fi/vocabs/css/fr">valeur de la propriété</a> css passe de <code>translateX</code> à <code>translateY</code>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;

  <span class="hljs-comment">/* facultatif : résoud un bug non systématique de blur sur IE */</span>
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translateY</span>(-<span class="hljs-number">50%</span>)</span></span>;
}</span>
</code></pre>
<h4 id="les-deux">
      <a class="putainde-Title-anchor" href="#les-deux">#</a>
      Les deux
    </h4><p>En réutilisant toutes les techniques expliquées précédemment, on peut arriver à plusieurs solutions, à choisir selon votre contexte et vos préférences.</p>
<p>Méthode à base de <code>display: inline-block</code></p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-rule"><span class="hljs-attribute">.parent</span>:<span class="hljs-value">before {
  content: <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>;
}

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<p>Technique des <code>position: absolute; + marges négatives</code> avec tailles connues à l’avance</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> {X}em</span></span>; <span class="hljs-comment">/* remplacer {X} par votre valeur */</span>
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> {Y}em</span></span>; <span class="hljs-comment">/* remplacer {Y} par votre valeur */</span>
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-left</span>:<span class="hljs-value"> -{X/<span class="hljs-number">2</span>}em</span></span>; <span class="hljs-comment">/* remplacer {X/2} par la moitié de votre height */</span>
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> -{Y/<span class="hljs-number">2</span>}em</span></span>; <span class="hljs-comment">/* remplacer {Y/2} par la moitié de votre height */</span>
}</span>
</code></pre>
<p>Technique des <code>position: absolute; + marges négatives</code> avec tailles inconnues</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> relative</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform-style</span>:<span class="hljs-value"> preserve-<span class="hljs-number">3</span>d</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value"> absolute</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"> <span class="hljs-number">50%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>)</span></span>;
}</span>
</code></pre>
<h3 id="des-blocs-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#des-blocs-dans-un-bloc">#</a>
      Des blocs dans un bloc
    </h3><h4 id="centrage-horizontal">
      <a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>
      Centrage horizontal
    </h4><p>On utilise la propriété <code>display: inline-block;</code> qui permet d’avoir des propriétés d’affichage relatives aux éléments de type <code>block</code> et de type <code>inline</code>. Le côté <code>inline</code> nous permet d’utiliser tout simplement un <code>text-align: center;</code></p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;  
}</span>
</code></pre>
<h4 id="centrage-vertical">
      <a class="putainde-Title-anchor" href="#centrage-vertical">#</a>
      Centrage vertical
    </h4><p>De la même façon que pour le centrage horizontal, on utilise le côté <code>inline</code> de la propriété <code>display: inline-block;</code> pour aligner verticalement les éléments enfants par rapport à leur conteneur parent.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>; 
}</span>
</code></pre>
<p>Une autre technique consiste à utiliser les propriétés css de <code>mise en tableaux</code>. On est obligé de créer un <a href="https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-%C3%A9l%C3%A9ments">pseudo-élément</a> pour gérer la mise en page par tableau. On créée tout simplement un tableau, puis une cellule de tableau, qu’on positionne grâce à un <code>vertical-align: middle;</code>. Les éléments <code>.child</code> s’alignent automatiquement dans leur conteneur.</p>
<pre><code class="lang-css"><span class="hljs-rule"><span class="hljs-attribute">.parent</span>:<span class="hljs-value">before {
  display: table</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
}

<span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table-cell</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>; <span class="hljs-comment">/* à enlever si vous ne souhaitez pas avoir vos blocs enfants alignés sur la même ligne, mais juste centrés verticalement sur la hauteur */</span>
}</span>
</code></pre>
<h4 id="les-deux">
      <a class="putainde-Title-anchor" href="#les-deux">#</a>
      Les deux
    </h4><p>On peut combiner les deux solutions basées sur le <code>display: inline-block;</code> pour avoir le résultat souhaité.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<p>On peut aussir réutiliser la méthode à base de <code>display: table-cell</code> et l’adapter pour qu’elle centre horizontalement et verticalement.</p>
<pre><code class="lang-css"><span class="hljs-rule"><span class="hljs-attribute">.parent</span>:<span class="hljs-value">before {
  display: table</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
}

<span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> table-cell</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> left</span></span>;
}</span>
</code></pre>
<p>On peut réutiliser la technique précédente en étant un peu imaginatif pour fonctionner avec des <code>display: inline-block;</code>. Pour détailler, on crée un pseudo-élément, qui aura un <code>content: &#39;&#39;;</code> pour faire qu’il existe et soit affiché, puis on annule son affichage via un <code>margin-right négatif</code> qui a pour valeur magique <code>-0.25em</code> ce qui correspond à la largeur d’un espace. On lui applique ensuite un <code>display: inline-block + height: 100% + vertical-align: middle</code> pour créer le conteneur à la taille souhaitée et on termine en calant l’élément enfant <code>.child</code> avec un centrage vertical.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-rule"><span class="hljs-attribute">.parent</span>:<span class="hljs-value">before {
  content: <span class="hljs-string">''</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">100%</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"> -<span class="hljs-number">0.25em</span></span></span>;
}

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<h3 id="des-elements-inlines-dans-un-bloc">
      <a class="putainde-Title-anchor" href="#des-elements-inlines-dans-un-bloc">#</a>
      Des éléments inlines dans un bloc
    </h3><p>Ces éléments <code>inline</code> peuvent être par exemple des liens <code>&lt;a&gt;</code> ou des <code>&lt;span&gt;</code> tout simples. Ces techniques sont souvent très connues et ne devraient pas vous poser beaucoup de problèmes, elles ne seront pas commentées. Veuillez vous référer <a href="https://developer.mozilla.org/fr/docs/Web/CSS/text-align">text-align</a> et <a href="https://developer.mozilla.org/fr/docs/Web/CSS/vertical-align">vertical-align</a> si vous souhaitez plus d’informations.</p>
<h4 id="centrage-horizontal">
      <a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>
      Centrage horizontal
    </h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{}</span>
</code></pre>
<h4 id="centrage-vertical">
      <a class="putainde-Title-anchor" href="#centrage-vertical">#</a>
      Centrage vertical
    </h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<h4 id="les-deux">
      <a class="putainde-Title-anchor" href="#les-deux">#</a>
      Les deux
    </h4><pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
}</span>
</code></pre>
<h2 id="techniques-avancees-flexbox-ie11">
      <a class="putainde-Title-anchor" href="#techniques-avancees-flexbox-ie11">#</a>
      Techniques avancées : flexbox (<a href="http://caniuse.com/#feat=flexbox">ie11+</a>)
    </h2><p>Flexbox est un outil très puissant quand il s’agit de gérer le position de blocs flex. Son seul défaut consiste en son faible support navigateur, mais il vous faudra maitriser ces techniques si vous comptez faire du développement web dans les années à venir, d’autant plus qu’elles sont très simples à rédiger et comprendre.</p>
<h3 id="centrage-horizontal">
      <a class="putainde-Title-anchor" href="#centrage-horizontal">#</a>
      Centrage horizontal
    </h3><p>On déclare le conteneur en bloc flex, et on lui applique la propriété <a href="https://developer.mozilla.org/fr/docs/Web/CSS/justify-content">justify-content</a>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{}</span>
</code></pre>
<h3 id="centrage-vertical">
      <a class="putainde-Title-anchor" href="#centrage-vertical">#</a>
      Centrage vertical
    </h3><p>Idem, on déclare le conteneur en bloc flex, et cette fois, on lui applique la propriété <a href="https://developer.mozilla.org/fr/docs/Web/CSS/align-items">align-items</a>.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{}</span>
</code></pre>
<h3 id="les-deux">
      <a class="putainde-Title-anchor" href="#les-deux">#</a>
      Les deux
    </h3><p>On combine le tout pour un résultat génial et simpliste.</p>
<pre><code class="lang-css"><span class="hljs-class">.parent</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> flex</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value"> center</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value"> center</span></span>;
}</span>

<span class="hljs-class">.child</span> <span class="hljs-rules">{}</span>
</code></pre>
<h2 id="conclusion">
      <a class="putainde-Title-anchor" href="#conclusion">#</a>
      Conclusion
    </h2><p>Essayez de toujours utiliser la solution la plus avancée techniquement par rapport à votre scope navigateur : si vous devez ne supporter que les IE récents, utilisez flexbox ; si vous devez ne supporter que IE9+, utilisez les transform: translate() ; sinon utilisez des techniques de plus en plus <em>anciennes</em>.</p>
<p>Ce guide n’a volontairement pas parlé des préfixes navigateurs, car ce genre de chose doit être pris en charge automatiquement dans votre workflow par un autoprefixer (<a href="https://www.npmjs.org/package/gulp-autoprefixer">gulp-autoprefixer</a>, <a href="https://www.npmjs.org/package/grunt-autoprefixer">grunt-autoprefixer</a>, <a href="http://www.myth.io/">inclus dans myth</a>, …). Pour apprendre à l’installer ou à en apprendre plus sur le sujet, je vous renvoie <a href="http://localhost:4242/posts/css/mise-en-place-autoprefixer/">à l’article de MoOx</a>. Si vous souhaitez quand même vous passez d’autoprefixer, vous pourrez vérifier la compatibilité des propriétés sur <a href="http://caniuse.com/">caniuse</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/css/le-guide-complet-pour-centrer-en-css/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/css/le-guide-complet-pour-centrer-en-css/</guid>
            <pubDate>Tue, 23 Sep 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Maîtriser les redirections shell]]></title>
            <description><![CDATA[<p>Le shell (ou ligne de commande) est l’outil de prédilection pour bon nombre
d’entre nous qui utilisons un OS de la famille UNIX. Nous sommes persuadés que
bien utilisé, il remplace avantageusement un IDE complexe et gourmand.</p>
<p>Chez <em>Putain de code !</em>, on a une certaine tendance à utiliser <a href="http://fr.wikipedia.org/wiki/Z_Shell">Zsh</a>, mais
pour ma part, j’utilise encore et toujours le vénérable <a href="http://fr.wikipedia.org/wiki/Bourne-Again_shell">Bash</a>, non pas
pour faire mon barbu mais simplement car il me suffit amplement.</p>
<p>La suite de l’article est donc basée sur celui-ci mais tout devrait fonctionner
à l’identique sur Zsh.</p>
<p>Venons en au sujet même de cet article, l’un des éléments essentiels de
l’utilisation du shell : l’utilisation des redirections d’entrée/sortie de
base.</p>
<p>Si ça vous paraît barbare, tenez-vous bien, on attaque tout de suite !</p>
<h2 id="une-entree-deux-sorties">
      <a class="putainde-Title-anchor" href="#une-entree-deux-sorties">#</a>
      Une entrée, deux sorties
    </h2><p>Un des principes de base sous UNIX est que tout est fichier et que l’activité du
système est rendue par l’interaction de programmes (ou processus) à l’aide
des dits fichiers.</p>
<p>Pour pouvoir collaborer avec ses congénères, chaque processus peut accéder par
défaut à trois fichiers bien particuliers : l’entrée, la sortie, et la sortie
d’erreur standards.</p>
<ul>
<li>L’entrée standard (<code>stdin</code>)</li>
<li>La sortie standard (<code>stdout</code>)</li>
<li>La sortie d’erreur (<code>stderr</code>)</li>
</ul>
<p>Habituellement, l’entrée standard est liée au clavier de l’utilisateur <em>via</em> son
émulateur de terminal, et les deux sorties sont liées à l’affichage dans ce même
émulateur.</p>
<p>L’idée pour pouvoir faire collaborer les processus est donc de <em>brancher</em> les
entrées et sorties de différents programmes afin d’obtenir un résultat.</p>
<h2 id="les-redirections-de-base">
      <a class="putainde-Title-anchor" href="#les-redirections-de-base">#</a>
      Les redirections de base
    </h2><p>Commençons par quelques redirections de base, celles qu’il faut connaître et qui
sont employées systématiquement.</p>
<p>Pour nous exercer, nous allons utiliser principalement deux commandes :</p>
<ul>
<li><code>echo</code> : permet d’écrire un message spécifié en tant qu’argument sur sa sortie
standard.</li>
<li><code>cat</code> : permet d’afficher le contenu d’un fichier passé en argument sur sa
sortie standard ou de répéter son entrée standard sur sa sortie standard.</li>
</ul>
<p>Rappelez vous que par défaut, la sortie standard est affichée dans le terminal
et l’entrée standard est le clavier de l’utilisateur.</p>
<h3 id="redirection-de-sortie-gt">
      <a class="putainde-Title-anchor" href="#redirection-de-sortie-gt">#</a>
      Redirection de sortie : <code>&gt;</code>
    </h3><p>Ce type de redirection permet d’indiquer à un processus que tout ce qui devrait
aller sur la sortie standard (par défaut, le terminal), doit plutôt être stocké
dans un fichier.</p>
<p>Pour ça, on utilise la syntaxe <code>&gt; [fichier]</code> :</p>
<pre><code class="lang-console">$ echo <span class="hljs-string">"Hello"</span> &gt; <span class="hljs-keyword">message</span>
$ cat <span class="hljs-keyword">message</span>
Hello
</code></pre>
<h3 id="redirection-d-entree-lt">
      <a class="putainde-Title-anchor" href="#redirection-d-entree-lt">#</a>
      Redirection d’entrée : <code>&lt;</code>
    </h3><p>À l’inverse, on peut aussi spécifier à un programme qu’il doit utiliser un
fichier comme son entrée standard, à la place du clavier de l’utilisateur.</p>
<p>En réutilisant notre fichier <code>message</code>, on peut par exemple faire :</p>
<pre><code class="lang-console">$ cat &lt; <span class="hljs-keyword">message</span>
Hello
</code></pre>
<p>Notez qu’on utilise bien <code>cat</code> <em>sans argument</em>, il utilise donc l’entrée
standard.</p>
<h3 id="connecter-deux-processus">
      <a class="putainde-Title-anchor" href="#connecter-deux-processus">#</a>
      Connecter deux processus : <code>|</code>
    </h3><p>Dernier des connecteurs de base, l’opérateur <code>|</code>, aussi appelé <em>pipe</em> (et qui se
prononce <em>paillepe</em>, avé l’accent).</p>
<p>Il permet tout simplement d’utiliser la sortie d’un programme comme entrée d’un
autre.</p>
<p>Pour montrer ça, introduisons la commande <code>tr</code>, qui permet de remplacer des
caractères dans l’entrée par d’autres.</p>
<pre><code class="lang-console">$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello!"</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">"[:lower:]"</span> <span class="hljs-string">"[:upper:]"</span>
HELLO!
</code></pre>
<h2 id="descripteurs-de-fichiers-et-redirections-avancees">
      <a class="putainde-Title-anchor" href="#descripteurs-de-fichiers-et-redirections-avancees">#</a>
      Descripteurs de fichiers et redirections avancées
    </h2><p>Pour aller plus loin, on va maintenant voir que chaque descripteur de fichier
possède son propre identifiant numérique.</p>
<p>Pour <code>stdin</code>, <code>stdout</code> et <code>stderr</code> ce sera respectivement 0, 1 et 2.</p>
<p>On peut se servir de ces identifiants pour faire des redirections plus
poussées !</p>
<h3 id="rediriger-les-autres-descripteur">
      <a class="putainde-Title-anchor" href="#rediriger-les-autres-descripteur">#</a>
      Rediriger les autres descripteur
    </h3><p>Par défaut, <code>&gt;</code> ne redirige que la sortie standard vers un fichier. Pour
rediriger un autre descripteur vers un fichier on emploiera la notation <code>X&gt;</code> où
<em>X</em> prendra la valeur de l’identifiant du descripteur.</p>
<p>Si vous avez bien suivi, on redirigera donc la sortie d’erreur vers un fichier à
l’aide de la syntaxe <code>2&gt;</code>.</p>
<h3 id="rediriger-vers-un-autre-descripteur-gt-amp">
      <a class="putainde-Title-anchor" href="#rediriger-vers-un-autre-descripteur-gt-amp">#</a>
      Rediriger vers un autre descripteur : <code>&gt;&amp;</code>
    </h3><p>On peut connecter les descripteurs d’un processus entre eux. C’est un mécanisme
que l’on utilise très souvent quand on écrit des scripts Shell, notamment pour
écrire sur la sortie d’erreur.</p>
<p>Pour celà, on utilise la redirection <code>X&gt;&amp;Y</code> avec <em>X</em> étant l’identifiant
descripteur source et <em>Y</em> l’identifiant du descripteur sur lequel on veut
rediriger.</p>
<p>L’exemple suivant montre comment rediriger la sortie standard sur la sortie
d’erreur (c’est comme ça qu’on écrit sur la sortie d’erreur dans un script).</p>
<pre><code class="lang-console">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Error"</span> <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">2</span>
</code></pre>
<p>Plus généralement, on peut omettre la partie avant le <code>&gt;&amp;</code>, elle prendra la
valeur 1 par défaut. On aura donc le script suivant :</p>
<pre><code class="lang-console">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Error"</span> &gt;&amp;<span class="hljs-number">2</span>
</code></pre>
<h3 id="ajouter-en-fin-de-fichier-gt-gt">
      <a class="putainde-Title-anchor" href="#ajouter-en-fin-de-fichier-gt-gt">#</a>
      Ajouter en fin de fichier : <code>&gt;&gt;</code>
    </h3><p>Par défaut, <code>&gt;</code> écrase le fichier dans lequel la redirection va s’effectuer.
Pour éviter ce problème, on peut utiliser à la place <code>&gt;&gt;</code> qui va ajouter en fin
de fichier.</p>
<pre><code class="lang-console"># Sans &gt;&gt;
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"1"</span> &gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">echo</span> <span class="hljs-string">"2"</span> &gt; <span class="hljs-keyword">file</span>
$ <span class="hljs-keyword">cat</span> <span class="hljs-keyword">file</span>
<span class="hljs-number">2</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-comment"># Avec &gt;&gt;</span>
<span class="hljs-variable">$ </span>echo <span class="hljs-string">"1"</span> &gt; file
<span class="hljs-variable">$ </span>echo <span class="hljs-string">"2"</span> <span class="hljs-prompt">&gt;&gt; </span>file
<span class="hljs-variable">$ </span>cat file
<span class="hljs-number">1</span>
<span class="hljs-number">2</span>
</code></pre>
<h3 id="dev-null-le-trou-noir">
      <a class="putainde-Title-anchor" href="#dev-null-le-trou-noir">#</a>
      <code>/dev/null</code>, le trou noir
    </h3><p>Il existe un fichier un peu particulier sur tout bon UNIX qui se respecte :
<code>/dev/null</code>.</p>
<p>Ce dernier est en fait une sorte de trou noir : Si on affiche son contenu on
n’obtient rien, et si on écrit quelque chose dedans elle disparait.</p>
<p>On se sert souvent de ce fichier pour supprimer la sortie d’un programme :</p>
<pre><code class="lang-console">$ echo <span class="hljs-string">"Hello"</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
$ cat <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
$
</code></pre>
<h3 id="ordre-des-redirections">
      <a class="putainde-Title-anchor" href="#ordre-des-redirections">#</a>
      Ordre des redirections
    </h3><p>Un dernier mot avant la fin, l’ordre des redirections est très important !</p>
<p>Imaginez la fonction suivante qui affiche un message sur la sortie standard et
un sur la sortie d’erreur :</p>
<pre><code class="lang-console"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">programme</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"Message"</span>
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"Error"</span> &gt;&amp;<span class="hljs-number">2</span>
}
</code></pre>
<p>Si on veut rediriger toutes les sorties vers <code>/dev/null</code> on peut utiliser la
syntaxe suivante :</p>
<pre><code class="lang-console">$ programme <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span>
</code></pre>
<p>Vous remarquerez que c’est assez verbeux, et qu’on pourrait simplifier celà en
utilisant <code>&gt;&amp;</code> comme vu précédemment.</p>
<p>On essaie donc naïvement :</p>
<pre><code class="lang-console">$ programme <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span>
<span class="hljs-built_in">Error</span>
</code></pre>
<p>Hmm, pourtant on a tout branché ensemble non ? En fait non, on a redirigé la
sortie sur le fichier pointé par <code>1</code> au moment où on écrit la redirection, donc
avant qu’il soit redirigé sur <code>/dev/null</code>.</p>
<p>Pour bien faire, il faut écrire les redirections dans l’autre ordre :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>programme &gt;<span class="hljs-regexp">/dev/null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>
</code></pre>
<p>On lira ceci : Rediriger la sortie standard vers <code>/dev/null</code>, puis rediriger la
sortie d’erreur vers la sortie standard.</p>
<h3 id="pour-resumer">
      <a class="putainde-Title-anchor" href="#pour-resumer">#</a>
      Pour résumer
    </h3><p>On a en fait que deux redirections de sortie, <code>&gt;</code> et <code>&gt;&gt;</code>, les symboles qui les
entourent sont souvent optionnels.</p>
<p>Si on veut spécifier un fichier on donnera son nom, si on veut spécifier un
descripteur on donnera son identifiant préfixé de <code>&amp;</code>.</p>
<h2 id="pour-aller-plus-loin">
      <a class="putainde-Title-anchor" href="#pour-aller-plus-loin">#</a>
      Pour aller plus loin
    </h2><p>Le manuel de bash contient <a href="http://www.gnu.org/software/bash/manual/bashref.html#Redirections">une section complète sur les
redirections</a>. Elle va beaucoup plus loin que cet article et je vous
invite à la lire pour voir tout ce qu’il est possible de faire.</p>
<p>Il y a aussi une section dédiée à ce sujet dans l’<a href="http://tldp.org/LDP/abs/html/io-redirection.html">Advanced Bash-Scripting Guide</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/shell/maitriser-les-redirections-shell/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/shell/maitriser-les-redirections-shell/</guid>
            <pubDate>Wed, 16 Jul 2014 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>