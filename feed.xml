<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.fr]]></title><description><![CDATA[putaindecode.fr]]></description><link>http://putaindecode.fr</link><generator>RSS for Node</generator><lastBuildDate>Tue, 03 Nov 2015 06:19:40 GMT</lastBuildDate><atom:link href="http://putaindecode.fr/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Premier exemple d'utilisation de Webpack]]></title><description><![CDATA[<p>Si vous êtes intéressé par
<a href="/posts/webpack">les problématiques que peut résoudre Webpack</a>,
vous serez sûrement intéressé par cette petite configuration détaillée, qui vous
permettra de faire vos premiers pas avec cet outil.</p>
<p>Nous allons mettre en place une configuration assez basique qui
va permettre :</p>
<ul>
<li>d’avoir une partie JavaScript pour votre application/site web,</li>
<li>de consommer vos CSS en tant que modules,</li>
<li>de consommer les assets de vos CSS en tant que module (images, fonts…),</li>
<li>d’avoir un fichier JS, un fichier CSS et vos assets à côté.</li>
</ul>
<p><em>Note: si vous êtes sur une application JavaScript, vous ne serez pas obligé
d’utiliser la partie pour l’extraction de la CSS en fichier.
En effet, Webpack consomme tout ce qui est possible en JavaScript.
Les styles peuvent être introduit via des balises <code>&lt;styles&gt;</code> dynamiquement
(via le <code>style-loader</code>).
L’extraction prend du sens si vous avez un rendu serveur et que vous souhaitez
avoir des styles au plus tôt, via une CSS dediée.</em></p>
<p>La configuration de Webpack se fait via un fichier JavaScript.
Par défaut, il doit être nommé <code>webpack.config.js</code>.
Ne tournons pas autour du pot et voyons un fichier de configuration
correspondant à ce que nous venons de décrire.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>)
<span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">"webpack"</span>)
<span class="hljs-keyword">var</span> ExtractTextPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"extract-text-webpack-plugin"</span>)

<span class="hljs-comment">// on peut passer à notre commande de build l'option --production</span>
<span class="hljs-comment">// on récupère sa valeur ici en tant que booléen</span>
<span class="hljs-keyword">var</span> production = process.argv.indexOf(<span class="hljs-string">"--production"</span>) &gt; -<span class="hljs-number">1</span>

<span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-comment">// nos points d'entrée, par clé</span>
  <span class="hljs-comment">// (on peut en définir plusieurs)</span>
  entry: {
    index: [
      <span class="hljs-string">"./src/index.js"</span>,
    ],
  },

  <span class="hljs-comment">// description de nos sorties</span>
  output: {
    <span class="hljs-comment">// ./dist</span>
    path: path.join(__dirname, <span class="hljs-string">"dist"</span>),
    <span class="hljs-comment">// nous aurons (vu notre point d'entrée)</span>
    <span class="hljs-comment">// - dist/index.js</span>
    filename: <span class="hljs-string">"[name].js"</span>,
    <span class="hljs-comment">// notre base url</span>
    publicPath: <span class="hljs-string">"/"</span>,
  },

  resolve: {
    <span class="hljs-comment">// ici, on peut ajouter nos extensions à résoudre lors d'un require()</span>
    <span class="hljs-comment">// on va rester simple en n'autorisant rien, ou .js(on) (comme en nodejs et</span>
    <span class="hljs-comment">// browserify)</span>
    extensions: [
      <span class="hljs-string">""</span>,
      <span class="hljs-string">".js"</span>,
      <span class="hljs-string">".json"</span>,
    ],
  },

  <span class="hljs-built_in">module</span>: {
    <span class="hljs-comment">// liste de nos loaders</span>
    <span class="hljs-comment">// ! \\ à noter que les loaders sont exécutés en ordre inverse</span>
    <span class="hljs-comment">// les premiers en dernier, en utilisant la sortie du suivant</span>
    loaders: [
      {
        <span class="hljs-comment">// pour tous les fichiers qui finissent par .js</span>
        test: <span class="hljs-regexp">/\.js$/</span>,
        <span class="hljs-comment">// ... en prenant bien soin d'exclure les node_modules</span>
        exclude: <span class="hljs-regexp">/node_modules/</span>,

        <span class="hljs-comment">// on ajoute les loaders babel et eslint</span>
        <span class="hljs-comment">// à vous de voir ce que vous aurez besoin</span>
        <span class="hljs-comment">// ("rien" est une option tout à fait valable si vous codez en ES5</span>
        <span class="hljs-comment">// sans linter)</span>
        loaders: [
          <span class="hljs-string">"babel"</span>,
          <span class="hljs-string">"eslint"</span>,
        ],

        <span class="hljs-comment">// à noter que l'on peut définir les loaders de cette façon</span>
        <span class="hljs-comment">// loader: "babel!eslint",</span>

        <span class="hljs-comment">// à noter aussi, Webpack va tenter de loader des modules ayant dans</span>
        <span class="hljs-comment">// leur nom "-loader". Si ce n'était pas le cas, ou que votre loader</span>
        <span class="hljs-comment">// ne comporte pas -loader, vous pouvez spécifier le nom entier :</span>
        <span class="hljs-comment">// loader: "babel-loader!eslint-loader",</span>
      },
      <span class="hljs-comment">// à l'inverse de node et browserify, Webpack ne gère pas les json</span>
      <span class="hljs-comment">// nativement, il faut donc un loader pour que cela soit transparent</span>
      {
        test: <span class="hljs-regexp">/\.json$/</span>,
        loaders: [
          <span class="hljs-string">"json"</span>,
        ],
      },
      {
        <span class="hljs-comment">// pour nos CSS, on va utiliser un plugin un peu particulier</span>
        <span class="hljs-comment">// qui va nous permettre de require() nos CSS comme un module</span>
        <span class="hljs-comment">// mais qui va tout de même permettre de sortir tout cela dans un seul</span>
        <span class="hljs-comment">// fichier .css pour la production</span>
        <span class="hljs-comment">// (selon un paramètre qu'on définira ci-dessous)</span>
        test: <span class="hljs-regexp">/\.css$/</span>,
        <span class="hljs-comment">// cette méthode possède 2 paramètres :</span>
        <span class="hljs-comment">// + loaders à utiliser si ce module est désactivé</span>
        <span class="hljs-comment">// + loaders à utiliser dans tous les cas en amont</span>
        loader: ExtractTextPlugin.extract(
          <span class="hljs-comment">// si on extract pas, on utilisera le loader suivant</span>
          <span class="hljs-comment">// (ce module chargera les styles dans des tags &lt;style&gt;, suffisant</span>
          <span class="hljs-comment">// en mode dév)</span>
          <span class="hljs-comment">// en production vous devrez vous charger d'utiliser un</span>
          <span class="hljs-comment">// &lt;link rel="stylesheet" ...</span>
          <span class="hljs-string">"style"</span>,
          <span class="hljs-comment">// dans tous les cas, on utilisera cssnext ainsi que le loader CSS</span>
          <span class="hljs-comment">// de base (celui-ci permet de gérer les ressources dans le CSS</span>
          <span class="hljs-comment">// en temps que modules: images, font etc)</span>
          <span class="hljs-string">"css!cssnext"</span>
        ),
        <span class="hljs-comment">// Si vous n'avez pas besoin d'avoir une CSS à part, vous pouvez</span>
        <span class="hljs-comment">// simplement supprimer la partie "loader" ci-dessus et utiliser plutôt</span>
        <span class="hljs-comment">// loaders: [</span>
        <span class="hljs-comment">//  "style",</span>
        <span class="hljs-comment">//  "css",</span>
        <span class="hljs-comment">//  "cssnext",</span>
        <span class="hljs-comment">// ],</span>
        <span class="hljs-comment">// À noter que dans ce cas, il vous faudra supprimer le plugin</span>
        <span class="hljs-comment">// ExtractTextPlugin dans la liste plus bas</span>
      },
      <span class="hljs-comment">// pour la suite, on va rester simple :</span>
      <span class="hljs-comment">// un require() en utilisant le file-loader retournera une string avec</span>
      <span class="hljs-comment">// le nom du fichier et (le plus important) copiera le fichier suivant</span>
      <span class="hljs-comment">// le paramètre "name" dans l'output.path que nous avons défini tout</span>
      <span class="hljs-comment">// au début de notre configuration.</span>
      <span class="hljs-comment">// Notez qu'il dégagera la partie context du nom lors du retour en string</span>
      <span class="hljs-comment">// et la remplacera par le l'output.path défini pour la copie.</span>
      {
        <span class="hljs-comment">// on chargera tous les formats d'images qui nous intéressent en tant</span>
        <span class="hljs-comment">// que fichiers.</span>
        test: <span class="hljs-regexp">/\.(ico|jpe?g|png|gif)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
          <span class="hljs-comment">// Vous remarquerez ici la méthode utilisée pour définir</span>
          <span class="hljs-comment">// des options pour les loaders. Il en existe d'autres avec les</span>
          <span class="hljs-comment">// versions les plus récentes en utilisant la clé "query"</span>
        ],
      },
      {
        <span class="hljs-comment">// idem pour les fonts</span>
        test: <span class="hljs-regexp">/\.(woff|ttf|otf|eot\?#.+|svg#.+)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
        ],
      },
      {
        <span class="hljs-comment">// ici on se permet de loader des fichiers html et txt tels quels</span>
        test: <span class="hljs-regexp">/\.(html|txt)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
        ],
      },
    ],
  },

  <span class="hljs-comment">// en plus des loaders, qui premettent eux de modifier et/ou d'exploiter le</span>
  <span class="hljs-comment">// contenu des modules, nous avons des plugins, plus globaux au processus</span>
  plugins: (
    [
      <span class="hljs-comment">// une partie importante dans notre cas : on active l'extraction CSS (en</span>
      <span class="hljs-comment">// production seulement)</span>
      <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">"[name].css"</span>, {disable: !production}),

      <span class="hljs-comment">// ce plugin permet de transformer les clés passés en dur dans les</span>
      <span class="hljs-comment">// modules ainsi vous pourrez faire dans votre code js</span>
      <span class="hljs-comment">// if (__PROD__) { ... }</span>
      <span class="hljs-keyword">new</span> webpack.DefinePlugin({
        __PROD__: production
      }),
    ]
    <span class="hljs-comment">// en production, on peut rajouter des plugins pour optimiser</span>
    .concat(
      production
      ? [
        <span class="hljs-comment">// ici on rajoute uglify.js pour compresser nos sorties</span>
        <span class="hljs-comment">// (vous remarquerez que certain plugins sont directement livrés dans</span>
        <span class="hljs-comment">// le package webpack).</span>
        <span class="hljs-keyword">new</span> webpack.optimize.UglifyJsPlugin({
          compress: {
            warnings: <span class="hljs-literal">false</span>,
          },
        }),
      ]
      : []
    )
  ),

  <span class="hljs-comment">// certains modules permettent de définir des options en dehors de la</span>
  <span class="hljs-comment">// définition des loaders</span>
  cssnext: {
    sourcemap: !production,
    compress: production,
  },
}</code></pre>
<p><em>Ce fichier est à peu près ce que nous utilisons pour notre site à l’heure où
est écrit cet article.</em></p>
<p>Une fois Webpack mis en place, vous aurez bien moins l’impression de bricoler
surtout quand il s’agit de consommer des assets de modules tiers (par exemple
Font Awesome).</p>
<p>Sachez que vous pouvez très facilement écrire vos propres loaders pour wrapper
l’utilisation d’un outil qui n’aurait pas encore de loader.
<a href="https://github.com/cssnext/cssnext-loader/blob/master/index.js">Exemple du loader cssnext</a>.</p>
<h2 id="utilisation"><a class="markdownIt-Anchor" href="#utilisation">#</a> Utilisation</h2>
<p>Il y a plusieurs façon d’utiliser maintenant notre configuration, la plus simple
étant surement via CLI :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>npm install webpack
<span class="hljs-variable">$ </span>webpack</code></pre>
<p>Cela devrait suffire à s’occuper de notre configuration. Cette commande comporte
bien entendu tout un tas d’options qui correspondent souvent à ce que nous
avons défini juste avant.
Cela étant dit, il parait plus maintenable de gérer une fichier plutôt qu’une
ligne de commande de 3 km.</p>
<p>Vous devriez avoir ainsi tout le résultat dans <code>dist/</code>.</p>
<p><em>Note: Si vous rencontrez des erreurs du type
<code>Error: Cannot resolve module 'file'</code>, c’est tout simplement que vous n’avez pas
installé les loaders nécessaire. En l’occurence il faudrait installer le
<code>file-loader</code>.</em></p>
<p>Pour avoir tous les loaders nécessaires comme dans l’exemple ci-dessus:</p>
<pre><code class="language-console">$ npm <span class="hljs-tag">i</span> -D babel-loader eslint-loader babel-eslint
$ npm <span class="hljs-tag">i</span> -D json-loader
$ npm <span class="hljs-tag">i</span> -D style-loader css-loader cssnext-loader
$ npm <span class="hljs-tag">i</span> -D file-loader</code></pre>
<p><em>Note à propos de babel et eslint: pour le moment, il vous faudra spécifier dans
votre configuration eslint: <code>parser: babel-eslint</code>.</em></p>
<p>Il y a tout un tas de façon d’utiliser Webpack via une tripotée de plugins
(Gulp, Grunt, etc.) mais nous allons voir justement ici comment ne pas avoir
recours à ces solutions, ce qui nous permettra ainsi de s’alléger.</p>
<h3 id="utilisation-en-d-veloppment"><a class="markdownIt-Anchor" href="#utilisation-en-d-veloppment">#</a> Utilisation en développment</h3>
<p>Webpack CLI possède une option <code>--watch</code> qui va surveiller les sources et mettre
à jour tout le nécessaire à la moindre modification.
À la différence de browserify, cette fonctionnalité est dans le core et très
bien intégré.
De plus, le cache de Webpack est plutôt bien foutu. La première compilation peut
paraître un peu lente, mais la suite est vraiment au top.</p>
<pre><code class="language-console">$ webpack <span class="hljs-comment">--watch -d</span></code></pre>
<p>L’option <code>-d</code> permet d’activer les source maps.</p>
<p>À côté de ces options, Webpack va plus loin.</p>
<p>En développement, nous avons besoin de servir toutes les ressources que notre
processus va gérer.
Plutôt que d’utiliser le système de fichier classique, abusé par Grunt et tout
de même utilisé par Gulp &amp; co, Webpack fournit un <code>webpack-dev-server</code>.</p>
<p>Ce petit serveur local permettra de servir tout ce dont nous avons besoin
(nos JS, CSS, images, etc.) sans avoir recours au système de fichiers.</p>
<p>Comme pour la commande <code>webpack</code>, le serveur de développement propose aussi
une CLI basée sur l’option <code>--watch</code> mais sans l’inconvénient de l’écriture sur
disque :</p>
<pre><code class="language-console">$ webpack-dev-server <span class="hljs-comment">--content-base dist/</span></code></pre>
<p><em>Source: <a href="http://webpack.github.io/docs/webpack-dev-server.html">http://webpack.github.io/docs/webpack-dev-server.html</a></em></p>
<p>Une fois que votre serveur est démarré, pourrez tester que votre point d’entrée
marche avec <code>http://localhost:8080/index.js</code>.</p>
<p>Il existe bien entendu une API, que nous utilisons à l’heure actuelle sur notre
site, afin d’ajuster notre configuration Webpack en développement, pour
d’ajouter des fonctionnalités comme le “hot loading”.</p>
<p>Vous avez à votre disposition
<a href="https://github.com/putaindecode/putaindecode.fr/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/webpack-dev-server.js">notre script dev-server</a>
(écrit en ES6/7), ainsi que son utilisation
<a href="https://github.com/putaindecode/putaindecode.fr/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/build.js#L154-L159">dans notre build</a>.</p>
<p><em>Note : pour avoir une éventuelle version plus à jour, regardez l’historique de
ces fichiers au cas où nous ayons poussé des ajustements (ou remplacer le hash
par “master” dans l’url et priez).</em></p>
<h4 id="hot-re-loading"><a class="markdownIt-Anchor" href="#hot-re-loading">#</a> Hot (re)loading</h4>
<p>Ce serveur possède bien entendu des fonctionnalités similaires au classique
“livereload”, appelé <em>hot mode</em> (ou hot loading).</p>
<p>Tout comme pour le livereload, il faut intégrer dans sa page un script
particulier. Il y a plusieurs façons de faire :</p>
<ul>
<li>intégrer <code>http://localhost:8080/webpack-dev-server.js</code> via un tag script</li>
<li>ajouter <code>webpack/hot/dev-server</code> dans les tableaux des points d’entrées</li>
</ul>
<p><em>Source: <a href="http://webpack.github.io/docs/webpack-dev-server.html#hot-mode">http://webpack.github.io/docs/webpack-dev-server.html#hot-mode</a></em></p>
<p>Notre script dev-server référencé juste avant s’occupe d’ajouter la ressource
automatiquement en mode dev.</p>
<p>À la différence d’un simple livereload, ce hot loading permet des choses qu’on
aurait jusqu’alors pas vraiment imaginées, comme du hot reload de JavaScript de
composant React (sans rafraichissment complet de page, donc sans perte d’état).</p>
<p><strong>Vous êtes invité à regarder la vidéo que vous trouverez sur la page du
<a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>.</strong></p>
<p>Nous n’irons pas plus loin sur ce hot mode, car il nécessiterait un articlé dédié
(non pas que ce soit compliqué mais plus parce que c’est un sujet à part).</p>
<h3 id="utilisation-en-production"><a class="markdownIt-Anchor" href="#utilisation-en-production">#</a> Utilisation en production</h3>
<pre><code class="language-console">$ webpack <span class="hljs-comment">--production</span></code></pre>
<p>Notre configuration détecte l’option <code>--production</code> et ajuste déjà en
conséquence.
Il faut éventuellement utiliser la variable prévue pour ajuster vos loaders s’il
propose des options d’optimisation.</p>
<p>Maintenant, il n’y aura plus qu’à voir tout le résultat dans <code>dist/</code>.</p>
<hr>
<p>Nous avons vu ici un exemple assez simple qui peut être utilisé pour un site web
ou une appplication simple.</p>
<p>Une question se pose alors :</p>
<blockquote>
<p>À la vue de ce que peut gérer Webpack et ses loaders, est-il pertinent de
continuer à utiliser des task runners pour nos assets et compagnie ?</p>
</blockquote>
<p><strong>La réponse est non.</strong> 😱</p>
<p>Vous verrez assez rapidement que vous devriez pourvoir tout jeter à la poubelle.
Sans trop de regrets, puisque Webpack va vous permettre de consommer tout ce que
nous avions l’habitude de bricoler / copier / ajuster…</p>
<p>Nous l’avons fait pour notre site, pourquoi pas vous ?</p>
<p>Et notre interface n’as pas changé d’un poil puisque nous utilisons toujours les
mêmes commandes via les
<a href="https://docs.npmjs.com/misc/scripts">npm scripts</a>:</p>
<ul>
<li><code>npm start</code> pour dév</li>
<li><code>npm run build --production</code> avant de déployer en production.</li>
</ul>
<p>Il existe encore beaucoup de leviers à toucher dans le cas
d’applications full JavaScript afin d’améliorer bien des points.</p>
<p>Vous trouverez facilement tout un tas de
<a href="https://duckduckgo.com/?q=webpack+boilerplate">boilerplates Webpack</a>
avec des améliorations diverses et variées selon vos besoins.</p>
<p>Soyez curieux !</p>
]]></description><link>http://putaindecode.fr/posts/webpack/premier-exemple/</link><guid isPermaLink="true">http://putaindecode.fr/posts/webpack/premier-exemple/</guid><pubDate>Tue, 21 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Webpack]]></title><description><![CDATA[<h1 id="pourquoi-webpack"><a class="markdownIt-Anchor" href="#pourquoi-webpack">#</a> Pourquoi Webpack ?</h1>
<p>Webpack a pour objectif de vous faciliter la vie, notamment en vous aidant à
organiser <a href="/posts/js/etat-lieux-js-modulaire-front/">votre application JS en modules</a>.
Le projet est déjà très populaire, particulièrement dans la communauté React, ce qui
parait logique vu qu’il s’agit de développer des composants.</p>
<p>Webpack apporte à ce niveau des fonctionnalités intéressantes :</p>
<ul>
<li>disposer de toutes les ressources statiques (CSS, images, fontes) en tant que
module,</li>
<li>intégrer et consommer des bibliothèques tierces très simplement en tant
que module,</li>
<li>séparer votre <code>build</code> en plusieurs morceaux, chargés à la demande,</li>
<li>garder un chargement initial très rapide si besoin,</li>
<li>personnaliser la plupart des étapes du processus,</li>
<li>adapté pour les gros projets.</li>
</ul>
<p>Avant Webpack, nous avions beau avoir des super task-runners comme
<a href="/posts/js/premiers-pas-avec-grunt">Grunt</a>
ou
<a href="/posts/js/introduction-gulp">Gulp</a>,
il faut avouer qu’on bricolait quand même pas mal.</p>
<p>Et vous avez sûrement mieux à faire que de devoir modifier des configurations ou
des définitions de tâches pour ajuster les copies d’images ou de fontes, ou
encore ajuster des URL générées.
Il y avait avec ces solutions une grande partie de rafistolage, où l’on se
devait de faire très attention à la moindre réorganisation de code, sous peine
de casser une partie du rendu.</p>
<p>Prenons par exemple une image de fond déclarée en CSS via un
<code>background: url(...)</code>.
Qui vous préviendra lorsque celle-ci aura été supprimée ou déplacée,
et que la référence n’est donc plus bonne ?
Peut-être vos logs de serveur web ? En recherchant les erreurs HTTP 404…</p>
<p>Vous avez la responsabilité de gérer vos tâches et leurs résultats tout en vous
assurant du bon fonctionnement car vous êtes la glu entre tous ces morceaux.</p>
<h1 id="qu-est-ce-que-webpack"><a class="markdownIt-Anchor" href="#qu-est-ce-que-webpack">#</a> Qu’est-ce que Webpack ?</h1>
<p>Pas besoin de s’appeler Einstein pour comprendre les intentions de Webpack en
interprétant le nom : web + pack. Faire un pack prêt pour le web.</p>
<p>Nativement, Webpack s’occupe uniquement de ressources JavaScript.
Webpack propose un système de <em>loader</em> qui permet de transformer tout et
n’importe quoi en JavaScript (mais pas que).
Ainsi, tout est consommable en tant que module.</p>
<p>Webpack prend à charge la fonction <code>require()</code> (connue et utilisée dans node.js et
browserify) et permet de définir des nouveaux comportements.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.js"</span>)
<span class="hljs-comment">// "classique" pour ceux qui utilisent node.js/browserify</span>

<span class="hljs-comment">// nouveauté avec Webpack</span>
<span class="hljs-keyword">var</span> myStyles = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.css"</span>)
<span class="hljs-comment">// si vous utilisez le css-loader par exemple, toutes les directives url()</span>
<span class="hljs-comment">// se comporteront comme des require(), ainsi, vous pourrez appliquer</span>
<span class="hljs-comment">// des loaders sur tous vos assets et vous aurez des erreurs à la compilation</span>
<span class="hljs-comment">// si une ressource est manquante.</span>

<span class="hljs-comment">// vous pourrez aussi consommer des SVG en tant que chaînes (eg: raw-loader)</span>
<span class="hljs-keyword">var</span> mySVG = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.svg"</span>)

<span class="hljs-comment">// ou inclure des fichiers dans votre build (via file-loader)</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">"index.html"</span>)</code></pre>
<p>C’est cette partie qui est aujourd’hui la plus intéressante et la plus flexible.</p>
<figure>
  ![](index.jpg)
  <figcaption>
    Webpack transforme une multitude de fichiers en lots par responsabilité
  </figcaption>
</figure>
<p>Webpack va donc pouvoir s’occuper aussi bien de vos modules JavaScript
(CommonJS, AMD, UMD…),
mais aussi de <a href="https://github.com/css-modules/css-modules">vos modules CSS</a>,
de vos fichiers SVG, gif, png, etc. ainsi que potentiellement n’importe quel
type de fichier pour peu que vous preniez le temps d’écrire un <em>loader</em>
(rassurez-vous, il existe déjà un loader pour tous les fichiers que vous
manipulez couramment).</p>
<p>En plus de cela, il a été pensé afin de permettre la séparation de votre pack
(votre gros fichier JavaScript compilé) en plusieurs morceaux, selon vos
besoins : vous pourrez ainsi ajuster la balance entre performance et lazy
loading.</p>
<p>Avec les solutions existantes, il est actuellement très difficile d’arriver
facilement à ce que propose Webpack, pour ne pas dire impossible.</p>
<p>Il est possible d’avoir l’équivalent avec
<a href="/posts/js/browserify-all-the-things">browserify</a> comme l’a indiqué son auteur
dans un article
<a href="https://gist.github.com/substack/68f8d502be42d5cd4942">browserify for Webpack users</a>
(qui est une réponse à la ressource
<a href="https://github.com/webpack/docs/wiki/webpack-for-browserify-users">Webpack for browserify users</a>
).</p>
<p>Il est clair que cela n’est pas aussi simple qu’avec Webpack qui est beaucoup
plus flexible de par sa conception et ses objectifs initiaux.</p>
<p>Par exemple, browserify pourra appliquer d’éventuelles transformations
uniquement au code local et donc pas dans <code>node_modules/*</code>.
Cela peut être problématique et nous conduit forcément à finir par du
bricolage si on veut consommer des assets de modules de manière transparente.</p>
<p>Ne parlons pas du
<a href="http://webpack.github.io/docs/hot-module-replacement-with-webpack.html">hot loading</a>
(remplacement de code à la volée)
qui n’est pas du tout facile à mettre en place (pour le moment) avec
autre chose que Webpack.</p>
<h1 id="comment-int-grer-webpack-dans-votre-workflow"><a class="markdownIt-Anchor" href="#comment-int-grer-webpack-dans-votre-workflow">#</a> Comment intégrer Webpack dans votre workflow ?</h1>
<p>Dans un premier temps vous pourrez facilement intégrer Webpack en remplacement de
<a href="/posts/js/browserify-all-the-things/">browserify</a> ou d’une éventuelle
concaténation via des plugins Gulp, Grunt, etc.</p>
<p>Dans un second temps, vous pourrez très certainement remplacer une partie de vos
autres tâches pour ajuster/copier/déplacer vos assets (CSS, images…) et
ainsi réduire le code dédié à votre workflow. Il se pourrait alors que votre
utilisation d’un task-runner soit maintenant si réduite que vous pourriez vous
en passez en utilisant simplement
<a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">des scripts npm</a>.</p>
<p>Si jamais vous êtes limité, <a href="/posts/shell/utilitaires-ligne-commande/">vous pourrez bien entendu créer votre propre
commande</a>, qui sera réutilisable dans
n’importe quel contexte.</p>
<h1 id="webpack-en-pratique"><a class="markdownIt-Anchor" href="#webpack-en-pratique">#</a> Webpack en pratique</h1>
<p>Quelques ressources pour vous y mettre :</p>
<ul>
<li>Un premier <a href="/posts/webpack/premier-exemple">exemple détaillé de configuration et d’utilisation</a>
basé sur notre retour d’expérience.</li>
</ul>
<p>En anglais :</p>
<ul>
<li><a href="http://webpack.github.io/docs/tutorials/getting-started/">Tutoriel officiel</a></li>
<li><a href="http://okonet.ru/viennajs-webpack-introduction/">Slides d’introduction</a></li>
<li><a href="https://github.com/petehunt/webpack-howto">“How to” webpack</a></li>
</ul>
<p><a href="http://webpack.github.io/docs">Webpack possède une documentation</a>
assez fournie, mais pas vraiment facile à aborder lorsqu’on découvre le projet.
Aussi, n’hésitez pas à nous poser vos questions en commentaires.</p>
]]></description><link>http://putaindecode.fr/posts/webpack/</link><guid isPermaLink="true">http://putaindecode.fr/posts/webpack/</guid><pubDate>Mon, 20 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Il démarre Vim par erreur, ce qui se passe ensuite est tout simplement bluffant]]></title><description><![CDATA[<blockquote>
<p>À première vue, vous allez éprouver de la tristesse, mais ce qui se passe ensuite est tout simplement incroyable…</p>
</blockquote>
<blockquote>
<p>Alors qu’il était en train d’effectuer une mise en production,
ce développeur s’est confronté à une situation qui aurait pu complètement déraper.
Une intervention directement sur le serveur de production était obligatoire afin d’éditer la base de données au format .txt.</p>
</blockquote>
<blockquote>
<p>Après avoir passé plusieurs heures pour se connecter à distance via une connexion sécurisée,
Maxime est tombé nez à nez avec une console d’administration en ligne de commande !
Il était complètement désemparé par l’absence de fenêtre.</p>
</blockquote>
<blockquote>
<p>Ce qui s’est passé ensuite est tout simplement incroyable :
fort de sa persévérance, Maxime décide tout de même de se rapprocher du clavier !
Après une rapide recherche sur les Internets,
il tape la première commande qu’il trouve :</p>
</blockquote>
<blockquote>
<pre><code class="language-console"><span class="hljs-variable">$ </span>vim</code></pre>
</blockquote>
<blockquote>
<p>Alors qu’on pourrait imaginer un drame, comme il arrive souvent quand <a href="https://duckduckgo.com/?q=I+am+stuck+in+VIM">une personne tombe dans ce piège</a>,
Maxime ne s’est pas laissé abattre et a persisté dans sa démarche…</p>
</blockquote>
<p>Bon, assez plaisanté.</p>
<h2 id="pourquoi-j-essayerais-vim"><a class="markdownIt-Anchor" href="#pourquoi-j-essayerais-vim">#</a> <em>Pourquoi j’essayerais Vim ?</em></h2>
<p>J’ai commencé par Eclipse. Qu’il fallait réinstaller assez souvent sans quoi on perdait 10 minutes de sa vie à chaque ouverture d’autocomplete.
Je suis passé par NetBeans, WebStorm… Sans être convaincu. Plus récemment, j’étais assez content sous Sublime Text avant d’essayer Atom
(car en gros Atom est quasiment la même chose, en technologie web, open source et fait par GitHub).
Mais j’ai toujours eu envie de me la péter devant 2 écrans tout noir,
en ligne de commande, comme dans les super productions américaines.</p>
<p>Plus sérieusement, je passe de plus en plus de temps devant ma console…
Enfin vous savez, le terminal, pas l’autre truc un peu plus fun (et encore que).</p>
<p>J’ai toujours eu envie de comprendre pourquoi autant de gens (car mine de rien il y en a un paquet) utilisaient Vim,
et se moquaient un bon coup à chaque sortie d’un nouvel éditeur.
Car bon faut avouer, se moquer c’est facile.
Du coup un jour, j’ai démarré Vim.</p>
<h2 id="pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouv-dans-vim"><a class="markdownIt-Anchor" href="#pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouv-dans-vim">#</a> <em>Pourquoi j’ai rien compris quand je me suis retrouvé dans Vim ?</em></h2>
<p>Le truc le plus déroutant dans Vim, c’est les modes.
Et quand on ouvre Vim, on ne se retrouve pas dans le mode le plus logique (à première vue).</p>
<p>En fait, ce qu’on dit pas trop, c’est que Vim est toujours utilisé aujourd’hui car on peut l’utiliser uniquement au clavier.
Vous allez me répondre qu’on peut en faire de même avec tous les éditeurs de texte.</p>
<p>Mais <strong>Vim a clairement été développé pour minimiser les déplacements des mains</strong>.</p>
<p>C’est pour moi la chose la plus importante à retenir. Et la chose la plus attractive.
Les bons développeurs ont tous une bonne flemme au fond d’eux, c’est bien connu.</p>
<p>Pour un peu plus sur l’histoire de Vim, direction <a href="https://fr.wikipedia.org/wiki/Vim">wikipedia.org/wiki/Vim</a>.</p>
<h2 id="commencer-avec-vim"><a class="markdownIt-Anchor" href="#commencer-avec-vim">#</a> Commencer avec Vim</h2>
<p>Du coup, quand je suis dans Vim, comment ça se passe ?</p>
<p>Je passerai plus tard assez rapidement sur les différents points, vu que d’autres ressources,
dont notamment le livre <a href="https://vimebook.com/">Vim pour les humains</a>, le font très bien en douceur.</p>
<p>C’est d’ailleur grâce à ce livre que je me suis lancé.
Je tiens donc à remercier <a href="http://viserlalune.com/">Vincent Jousse</a> pour avoir pris le temps d’écrire cet ouvrage.</p>
<p>Profitez de cet ouvrage, en plus <a href="http://ploum.net/le-prix-libre-une-impossible-utopie/">le prix est libre</a>.
Et puis quand on pense au prix des licences de certains IDE…</p>
<p>Ce livre est fait pour n’importe qui, débutant ou pas.
Vraiment, mangez-en si vous souhaitez essayer Vim (oui je sais, manger un e-book comme ça, ça paraît pas évident).</p>
<p>J’ai essayé plusieurs fois sans trop savoir où commencer, sans succès.
Ce livre m’a aidé et se dévore en quelques dizaines de minutes (deux ou trois heures grand max),
clavier sous les mains (bah oui rien de mieux pour se lancer).</p>
<p>J’ai essayé et me voilà conquis, une fois que j’ai compris sa valeur ajoutée.</p>
<p>Pour bien s’y prendre, forcez-vous à travailler avec Vim au moins une journée en suivant les conseils que vous trouverez dans cet ouvrage.
Cela a fonctionné pour moi : je gagne déjà du temps au bout de quelques semaines d’utilisation.</p>
<p>Pourquoi pas vous ?</p>
<h2 id="pour-apprendre-vim"><a class="markdownIt-Anchor" href="#pour-apprendre-vim">#</a> Pour apprendre Vim</h2>
<p>Vous pouvez donc :</p>
<ul>
<li>lire l’e-book <a href="http://vimebook.com">Vim pour les humains</a></li>
<li>lancer la commande <code>vimtutor</code></li>
<li>jouer à <a href="http://vim-adventures.com/">Vim Adventures</a></li>
<li>vous entraîner sur des exemples concrets avec <a href="http://vimgolf.com/">VimGolf</a></li>
</ul>
<p>Voici aussi un cheatsheet indispensable qui permet de bien mémoriser le pourquoi des touches
(b = begin, w = word, e = end, r = replace, i = insert, a = append, o = open, ctrl f = forward, ctrl b = backward, etc).</p>
<p><img src="../vim-cheatsheet.gif" alt="cheatsheet VIM"></p>
<p>Vous remarquerez que souvent les commandes en majuscules font la même chose mais dans le sens inverse (f/F, o/O), ou de manière plus catégorique (d/D, y/Y).</p>
<h2 id="passer-vim-est-un-investissement"><a class="markdownIt-Anchor" href="#passer-vim-est-un-investissement">#</a> Passer à Vim est un investissement</h2>
<p>Point important : il faut avoir envie.
Il ne s’agit pas de changer simplement d’éditeur, car on doit complètement changer ses habitudes.
Plus aucun raccourci clavier que vous avez l’habitude d’utiliser ne va fonctionner.
Je me répète mais il faut se forcer un minimum avant d’imaginer les possibilités de cet éditeur.</p>
<p>Cela dit, on peut rapidement voir la puissance de Vim après quelques heures d’utilisation
(même si on peut aussi un peu rager en cherchant des commandes simples qu’on arrive pas à faire).</p>
<p>Sachez aussi que beaucoup d’éditeurs ont des modes Vim (Sublime Text, Atom et d’autres). Il doit bien y avoir une raison, non ?
Notez aussi que Vim est installé par défaut sur beaucoup d’environnement de type Unix.</p>
<p>Vim est configurable à souhait (via le fichier <code>.vimrc</code>) et possède même son propre language de scripts (Vim Script ou viml)
ce qui permet de créer de nouvelles fonctionnalités simplement. Et même du coup d’en faire des “plugins”.</p>
<p>Je vous prépare un prochain post pour vous faire un petit mémo condensé de ce qu’on peut faire avec, et surtout comment.</p>
<blockquote>
<p>:q^C:wq</p>
</blockquote>
]]></description><link>http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</link><guid isPermaLink="true">http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</guid><pubDate>Tue, 03 Mar 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[À la conquête des bugs]]></title><description><![CDATA[<p>Le Web, depuis sa création est un vaste champ de bataille. Que ce soit les problèmes de compatibilités, les formats ou les langages propriétaires, la volonté de faire du Web un monde ouvert ne date pas d’hier.</p>
<h2 id="au-d-part"><a class="markdownIt-Anchor" href="#au-d-part">#</a> Au départ</h2>
<p>Les débuts du Web furent compliqués. On assista à une guerre entre Netscape et Microsoft. Chacun voulant dominer le marché, en tentant d’imposer ses propres technologies. En 1996, Netscape propose au W3C JSSS (JavaScript-Based Style Sheets). Ce n’est d’ailleurs que depuis novembre 2000 que Netscape, basé sur le moteur Gecko (moteur de Mozilla Firefox), prend véritablement en charge le CSS. Microsoft pour sa part ne supportait par JavaScript à ses débuts et avait développé son propre langage JScript.</p>
<p>Ces problèmes de compatibilités, de technologies et de respect des normes vont considérablement ralentir l’évolution du Web.</p>
<h2 id="les-petits-nouveaux"><a class="markdownIt-Anchor" href="#les-petits-nouveaux">#</a> Les petits nouveaux</h2>
<p>L’arrivée des nouveaux navigateurs tels que Firefox, Chrome ou même Opera va inverser cette tendance. Les parts de marchés d’Internet Explorer baissant, les développeurs prenant conscience du potentiel du Web, vont déclencher une montée en puissance du Web.</p>
<p>On pourrait croire que cette concurrence ne va apporter que des points positifs, mais pas tant que ça. Les parts de marchés vont pousser les navigateurs (ou les développeurs) à supporter des propriétés non standardisées, à mettre en place des préfixes et à développer une monoculture.</p>
<h2 id="le-d-but-des-probl-mes"><a class="markdownIt-Anchor" href="#le-d-but-des-probl-mes">#</a> Le début des problèmes</h2>
<p>Les préfixes bien que partis d’une bonne idée, avaient pour objectif d’introduire les nouvelles propriétés CSS  toujours à l’état de proposition/discussion/standardisation. Cela a permis de pouvoir utiliser des propriétés telles que  <code>border-radius</code>, <code>transform</code>, <code>box-shadow</code> bien avant leurs finalisations. Le risque bien entendu, étant d’utiliser des propriétés qui pouvaient changer de spécification, comme ce fut le cas par exemple pour <code>flexbox</code>.</p>
<p>L’effet pervers a été aussi de ne pas utiliser tous les préfixes d’une propriété. Cela a eu pour conséquence de créer un Web (notamment sur le mobile) à deux facettes. Nous avions d’un coté les sites <code>-webkit</code> compatibles iPhone/iPad et le reste du monde.</p>
<p>Opera a d’ailleurs <a href="http://thenextweb.com/insider/2013/02/13/opera-300-million-users-webkit/">abandonné</a> son moteur Presto en février 2013 au profit du moteur WebKit.</p>
<p>Plusieurs discussions houleuses ont d’ailleurs eu lieu sur l’implémentation des propriétés <code>-webkit</code> dans les moteurs Gecko ou Presto. Idée abandonnée en cours de route.</p>
<p>Coup de théatre <a href="http://blogs.msdn.com/b/ie/archive/2014/07/31/the-mobile-web-should-just-work-for-everyone.aspx">récemment</a>, Microsoft a intégré dans son moteur certaines propriétés <code>-webkit</code> pour obtenir des sites Web mobiles (trop basés sur <code>-webkit</code>) compatibles avec Windows Phone 8.1.</p>
<h2 id="un-d-but-de-solution"><a class="markdownIt-Anchor" href="#un-d-but-de-solution">#</a> Un début de solution ?</h2>
<p>C’est dans ce contexte qu’est née l’initiative <a href="http://webcompat.com">webcompat.com</a>. Lancée initialement par des développeurs de chez <a href="https://hacks.mozilla.org/2014/06/introducing-webcompat-com/">Mozilla</a> et quelques autres <a href="https://github.com/webcompat/webcompat.com/graphs/contributors">contributeurs</a> en juin 2014.</p>
<p>Le site a un double objectif : rendre le Web le plus compatible possible et éliminer les bugs.</p>
<p>Le site accepte toutes sortes de bugs, que ce soit un problème de compatibilité entre navigateurs (<code>prefixe</code>, <code>sniffing UA</code>, etc), ou tout simplement un bug d’affichage, que vous soyez propriétaires ou simple utilisateurs du site.</p>
<p>Une fois le bug soumis, quiconque a la possibilité de proposer un diagnostic, de corriger le bug, voir de transmettre la solution aux équipes techniques du site en question (par Twitter, e-mail, GitHub, etc).</p>
<p>Le projet est libre et appartient à sa communauté.</p>
<p>Tout contributeur peut intervenir sur le site <a href="http://webcompat.com">webcompat.com</a> pour le <a href="https://github.com/webcompat/webcompat.com/issues?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted">développement</a>, ou même le <a href="https://github.com/webcompat/webcompat.com/issues?q=is%3Aopen+is%3Aissue+label%3Adesign">design</a>.  Mais bien sûr et surtout sur la correction de <a href="https://github.com/webcompat/web-bugs/issues?q=is%3Aopen+is%3Aissue">bugs</a>.</p>
<p>Microsoft vient d’ailleurs de <a href="http://blogs.msdn.com/b/ie/archive/2014/07/31/the-mobile-web-should-just-work-for-everyone.aspx">rejoindre</a> Mozilla sur l’initiative <a href="http://webcompat.com">webcompat.com</a>. En lançant leur dernière version de Window Phone 8.1 ils ont constaté les <a href="https://github.com/webcompat/web-bugs/issues?q=is%3Aissue+is%3Aopen+is%3Aclosed+label%3Aie">dégâts</a> de la monoculture des sites mobile.</p>
<p>Si comme eux, vous souhaitez rendre le Web plus compatible, n’hésitez pas à proposer votre aide. En effet, il est de notre responsabilité d’éviter tout monopole ou monoculture. Car même si les navigateurs ont leur part de responsabilité, nous, développeurs en avons une aussi.</p>
]]></description><link>http://putaindecode.fr/posts/bug-webcompat/</link><guid isPermaLink="true">http://putaindecode.fr/posts/bug-webcompat/</guid><pubDate>Tue, 21 Oct 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Comment contribuer ?]]></title><description><![CDATA[<p>Ici, chez <em>Putain de code !</em>, dans notre building 8 étages vitres teintées avec
masseuses et coke à volonté et à n’importe quelle heure de la journée, on sait
qu’on va forcément t’aider à comprendre pas mal de trucs, mais on sait aussi
qu’on peut faire des fois des erreurs dans les articles (à cause de la coke)
ou tout simplement qu’il existe des types encore plus hipster
que <a href="/#top-contributors">bloodyowl</a> et qui voudront profiter de
notre renomée inter<s>nationale</s>galactique pour se faire un peu de visibilité
en proposant un post. Du coup, on s’attend vraiment à ce que tu aides à faire
avancer le bouzin, que t’apportes ta pierre à l’édifice quoi (oui on t’apprend
des expressions aussi), ou ta PR au repo comme on dit dans le monde des
développeurs des internets.</p>
<h2 id="tl-dr"><a class="markdownIt-Anchor" href="#tl-dr">#</a> tl;dr</h2>
<h3 id="corriger-du-contenu-rapidement"><a class="markdownIt-Anchor" href="#corriger-du-contenu-rapidement">#</a> Corriger du contenu rapidement</h3>
<p>Pour corriger un post de manière simple nous te conseillons l’interface GitHub (via le lien “Modifier” en bas des articles).</p>
<h3 id="faire-des-modifications-avec-aper-u-sur-ta-machine"><a class="markdownIt-Anchor" href="#faire-des-modifications-avec-aper-u-sur-ta-machine">#</a> Faire des modifications avec aperçu sur ta machine</h3>
<p>Forke le projet sur GitHub, puis :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>git clone <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/</span><span class="hljs-constant">TON_PSEUDO_GITHUB</span>/putaindecode.fr.git
<span class="hljs-variable">$ </span>cd putaindecode.fr
<span class="hljs-variable">$ </span>npm run init
<span class="hljs-variable">$ </span>npm install
<span class="hljs-variable">$ </span>npm start</code></pre>
<p>Si tu as un fork en retard sur notre master, tu peux mettre ta master à jour:</p>
<pre><code class="language-console">$ git remote add upstream https://github.com/putaindecode/putaindecode.fr.git
$ git fetch upstream
$ git checkout <span class="hljs-keyword">master</span>
<span class="hljs-title">$</span> git merge upstream/<span class="hljs-literal">master</span></code></pre>
<p>Ensuite il te faut créer une branche. En préfixe, on recommande les suivants:</p>
<ul>
<li><code>fix.</code> pour des patchs</li>
<li><code>post.</code> pour proposer un post</li>
<li><code>feature.</code> pour proposer une fonctionnalité</li>
</ul>
<p>Exemple :</p>
<pre><code class="language-console">$ git checkout -<span class="hljs-tag">b</span> fix.nom-pertinent</code></pre>
<p>Ensuite fait ta popote sur les fichiers nécessaires, puis si tu es flemmard:</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>git add -<span class="hljs-constant">A </span>.
<span class="hljs-variable">$ </span>git commit -m <span class="hljs-string">"Correction de XXX dans le post sur YYY"</span>
<span class="hljs-variable">$ </span>git push -u</code></pre>
<p>Maintenant tu n’as plus qu’à te rendre sur l’interface de GitHub puis à proposer ta PR.</p>
<p>Cela dit, ci-dessous, nous te conseillons de lire la version beaucoup plus ludique des explications ci-dessus.</p>
<h2 id="github"><a class="markdownIt-Anchor" href="#github">#</a> GitHub</h2>
<ul>
<li>
<p>Déjà, si t’en as pas, crée toi un compte GitHub (avant qu’on te caillasse),
et vu que tu commences à lire des ressources sur notre site, crois-moi que
tu vas commencer à le faire chauffer plus vite que prévu.</p>
</li>
<li>
<p>Ensuite, il faut que tu installes tout le nécessaire pour bosser sur un
<em>repo</em> GitHub (oui on va commencer à utiliser des anglicismes dès maintenant
donc habitue-toi y, <em>repo</em> = dépôt de code, comme tu peux le constater, la
francisation, c’est moche), on va te faire un post qui va regrouper tout ce
qu’il te faut pour installer et configurer Git pour bosser sur GitHub.</p>
</li>
<li>
<p>Après, il faut que tu crées ce qu’on appelle un <em>fork</em> du repo. Un fork
c’est juste ta propre copie du repo. Bah ouais, tu vas pas directement
travailler sur notre repo et nous le crader sans qu’on puisse bouger
l’orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa
propre copie dans son coin avant de demander à papa si on a le droit
d’apporter les modifs sur le repo principal.</p>
</li>
<li>
<p>Pour ça, clique sur le bouton <em>Fork</em> en haut à droite du repo. GitHub va
créer une copie du repo sur ton propre compte GitHub, où tu pourras
travailler tranquillement.</p>
<figure>
  ![Bouton Fork](fork-button.jpg)
  <figcaption>Clique au fond à droite</figcaption>
</figure>
</li>
<li>
<p>Maintenant que t’as enfin notre magnifique repo dans ton compte, tu devrais
te sentir honoré. Une fois que t’as appelé toute ta famille et les 3
péquenauds qui te servent d’amis, tu dois pouvoir y coder dessus sur ton PC.
On va partir du principe que tu t’appelles Marc. Et que ton nom c’est
Assin. T’as donc choisi comme pseudo GitHub <code>marcassin</code> (oui t’aurais dû
réfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide
et tu vas cloner notre repo. Cloner = faire une copie d’un repo distant (sur
les serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP
dans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne
de commande (sous Windows tu y vas avec l’invite de commande mais on te
prévient qu’on va pas être copains longtemps, trouve un OS décent putain,
sous Mac OS X tu utilises le terminal, et sous Linux je pense qu’on n’a pas à
t’expliquer).</p>
<pre><code class="language-console">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/marcassin/putaindecode.fr.git putaindecode</code></pre>
</li>
<li>
<p>Ensuite tu dois ajouter ce qu’on appelle une remote. Une remote c’est une
référence du repo principal, le beau, le grand, le nôtre. En gros, ça va te
servir que si tu fais une modification ou une contribution sur notre site
aujourd’hui, et que dans un mois tu veuilles encore en faire, tu pourras
facilement rattraper tout ce qu’on aura fait entre temps. La remote en
rapport avec le repo principal, on l’appelle souvent <em>upstream</em>.</p>
<pre><code class="language-console">$ <span class="hljs-keyword">cd</span> putaindecode.fr
$ git remote <span class="hljs-built_in">add</span> upstream http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/putaindecode/putaindecode.fr.git
$ git fetch upstream</code></pre>
</li>
<li>
<p>Alors là, normalement, t’as le dossier propre et frais, pêché du matin. Vu
que notre site pète la classe, on l’a fait en utilisant
<a href="https://github.com/gulpjs/gulp">Gulp</a>.
Il te faudra donc installer les dépendances, tu verras c’est simple comme bonjour.
Pour faire ça, tu vas lire le
<a href="https://github.com/putaindecode/putaindecode.fr#readme">README.md</a>
à la racine du repo. On fait exprès de pas te le dire ici parce
que c’est un peu une convention pour tous les projets Open Source, et que ça
te fait pas de mal de commencer à apprendre à bien bosser.</p>
</li>
<li>
<p>Note: Si tu avais déjà récupéré le repo, il te faudra juste récupérer les
derniers changements sur une branche propre</p>
<pre><code class="language-console">$ git checkout <span class="hljs-keyword">master</span>
<span class="hljs-title">$</span> git fetch upstream
$ git merge upstream/<span class="hljs-literal">master</span></code></pre>
<p>Regarde quand même le README et fait la manip’ de mise à jour au cas où on aurait
changé quelques trucs par-ci, par-là.</p>
</li>
<li>
<p>Une fois ton site tout installé, t’as plus qu’à aller dans ton dossier grâce
à la ligne de commande, et à taper <code>$ npm start</code>, tu verras quelques
trucs s’exécuter, ne t’inquiète pas. À la fin du processus, ça
devrait te lancer le site en local dans le browser. Là, j’espère que tu te
rends compte qu’avec une seule ligne de commande on t’a fait tourner un site
complet. Et là on te voit déjà en train de baver et te rappeler tes longues
soirées en train d’installer PHP, MySQL, un WordPress, la bonne version des
plugins, de la conf à n’en plus finir… ah qu’est-ce que tu pouvais être
niais. Ça a quand même bien plus la classe notre solution, non ?</p>
</li>
<li>
<p>Maintenant que t’as tout, t’as plus qu’à lancer <s>notepad++</s> ton éditeur
favori et te préparer à modifier ou proposer les fichiers que tu veux. Ce
que t’as à retenir, c’est que tu vas surtout bosser dans le dossier <code>/src</code></p>
</li>
</ul>
<h2 id="correction-d-un-post-existant"><a class="markdownIt-Anchor" href="#correction-d-un-post-existant">#</a> Correction d’un post existant</h2>
<p>Bon ok, on a compris, t’es timide, tu te sens pas encore prêt à nous écrire un
magnifique post sur ton tout dernier projet, tu préfères juste nous aider à
améliorer notre contenu. Bah on te remercie quand même tu vois, parce qu’on
est des types sympas.</p>
<ul>
<li>
<p>Alors déjà, on n’aime pas juste donner une liste d’ordres sans expliquer pour
que tu puisses comprendre ce que tu fais. Donc notre site, il a été fait
à la main (on a pondu un générateur de site statique bien pimpé, parce que oui,
y’a pas que Wordpress pour faire un site) en se basant sur gulp
(un esclave qui te permet d’éxécuter des tâches répétitives en JavaScript)
et quelques autres truc cools. Tu pourrais éventuellement jeter un coup d’œil
<a href="https://github.com/putaindecode/putaindecode.fr/blob/master/package.json">aux dépendances du projet</a>,
histoire de savoir de quoi on cause.</p>
</li>
<li>
<p>Tous nos posts sont contenus dans <code>pages/posts/</code>. Si jamais c’est sur
autre chose qu’un post, farfouille un peu et tu trouveras, les noms des
dossiers sont assez explicites et de toute façon les URLs sur notre site
ressemblent bizarrement (en vrai c’est pas bizarre hein, t’avais compris)
aux noms des dossiers.</p>
</li>
<li>
<p>Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à
l’intérieur, c’est pas du HTML. C’est un truc bizzare avec des dièses et des
étoiles. On appelle ça du
<a href="http://fr.wikipedia.org/wiki/Markdown"><em>Markdown</em></a>. On va te laisser aller
chercher si tu veux connaitre plus en détail. Mais normalement en voyant le
reste du post autour de toi, tu devrais comprendre assez vite. Tu peux
toujours faire du HTML, mais franchement, le Markdown a été créé pour ce
genre de tâches, c’est un bon moment pour l’apprendre.</p>
</li>
<li>
<p>Avant de faire les modifications direct dans le fichier, on va te demander
de faire une branche, c’est une bonne pratique et ça nous permettra de voir
exactement ce que t’auras modifié, c’est beaucoup plus simple. Du coup tu
fais simplement un :</p>
<pre><code class="language-console">$ git checkout -<span class="hljs-tag">b</span> fix.nom-du-post</code></pre>
</li>
<li>
<p>Fais les modifications que tu veux dans le fichier, là on ne peut pas t’aider,
c’est à toi de jouer.</p>
</li>
<li>
<p>Normalement si t’avais bien lancé le <code>npm start</code> tout à l’heure, y’a un
processus <em>watch</em> (en gros un truc qui surveille ton projet) qui est lancé
et qui détecte que t’as changé un fichier, du coup, grâce au watch couplé à
un processus appelé <em>livereload</em> ton navigateur va rafraîchir les fichiers
nécessaires en direct. T’as rien à faire, c’est magique. Enfin si, tu dois juste
retourner dans ton browser, ça devrait déjà être à jour.</p>
</li>
<li>
<p>Une fois que tout est bon, tu peux passer à l’étape de validation de tes
modifications (étape commune pour la modification d’un post existant ou la
proposition d’un nouveau)</p>
</li>
</ul>
<h2 id="proposition-d-un-nouveau-post"><a class="markdownIt-Anchor" href="#proposition-d-un-nouveau-post">#</a> Proposition d’un nouveau post</h2>
<ul>
<li>
<p>Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te
prévient que si tu nous sors un post sur la liste des plugins jQuery les
plus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va
tracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi
nous, y’a des types qui sont pas du tout copains avec jQuery et qui sont pas
tendres du tout.<br>
Bon du coup quand t’as ton idée, <a href="https://github.com/putaindecode/putaindecode.fr/issues/new">tu la proposes directement comme issue</a>
afin de voir si ça intéresse du monde.</p>
</li>
<li>
<p>Il faut aussi que tu fasses attention à ne pas bosser sur le même post que
quelqu’un d’autre et pour ça tu dois aller jeter un coup d’oeil du côté des
issues en cours avec le label <code>post</code>. Allez, on est sympa, t’as <a href="https://github.com/putaindecode/putaindecode.fr/issues?labels=post&amp;page=1&amp;state=open">le
lien</a>.</p>
</li>
<li>
<p>Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir
commencer à écrire dans le fichier. Tout d’abord tu vas devoir créer une
nouvelle branche. C’est une pratique qu’on demande à tout le monde, même
nous en interne on bosse sur des branches. Donc tout d’abord :</p>
<pre><code class="language-console">$ git checkout -b <span class="hljs-built_in">post</span>.titre-court-du-<span class="hljs-built_in">post</span></code></pre>
<p>Ensuite il va falloir que tu crées les fichiers nécessaires pour le brouillon
du post.
Pour ça, tu vas dans <code>/pages/posts/</code> et tu regardes comment ça se passe.
C’est plutôt simple. Tu créés un dossier avec le nom qui va bien avec un fichier
<code>.jade</code> pour les metas de l’article, et un <code>.md</code> pour le contenu.</p>
</li>
<li>
<p>Tu peux maintenant éditer ton fichier (en MarkDown) dans le fichier .md,
Amuse-toi, créé ton contenu, rédige bien tout comme tu veux.</p>
</li>
<li>
<p>Tu devrais pouvoir te balader sur le site et trouver ton article sur la page
des posts: <a href="http://localhost:4242/posts/">http://localhost:4242/posts/</a> .
Avec la tâche <code>$ npm start</code> lancée normalement tout (ou presque) se rafraîchira
automatiquement.
Si ce n’est pas le cas, relance la tâche <code>$ npm start</code>.
Si là tu as une erreur qui t’échappes, on t’invite à
<a href="https://github.com/putaindecode/putaindecode.fr/issues/new">ouvrir une issue</a>.</p>
</li>
<li>
<p>En l’état, tu devrais pouvoir consulter sur le site lancé localement ton post,
voir s’il sort correctement et s’il est présentable à ton goût.
Tu pourras le consulter sur une URL du type
<code>http://localhost:4242/post/nom-du-post/</code>. Mais tu le sais déjà puisque t’as
bien suivi et que t’es passé par la page des brouillons.</p>
</li>
<li>
<p>Une fois que tout est bon, tu peux passer à l’étape de validation de tes
modifications (étape commune pour la modification d’un post existant ou la
proposition d’un nouveau)</p>
</li>
</ul>
<h2 id="validation-de-tes-modifications"><a class="markdownIt-Anchor" href="#validation-de-tes-modifications">#</a> Validation de tes modifications</h2>
<ul>
<li>
<p>Il faut tout d’abord pousser tes modifications sur ton <code>fork</code>. Pour ça on va
d’abord ajouter les fichier que tu as modifié à l’index de fichiers à
commit. Tu peux faire ça tout simplement avec un :</p>
<pre><code class="language-console">$ git <span class="hljs-built_in">add</span> -A pages/posts/nom-du-<span class="hljs-built_in">post</span></code></pre>
<p>Cette commande ajoute tous les fichiers dans le dossier que tu as créé.
Si tu as ajouté des fichiers à l’extérieur de ce dossier, tu devras les
ajouter. Exemple :</p>
<pre><code class="language-console">$ git <span class="hljs-keyword">add </span>images/memes/trollface.jpg</code></pre>
<p>Ensuite on va dire à git de valider ces modifications de code :</p>
<pre><code class="language-console">$ git <span class="hljs-operator"><span class="hljs-keyword">commit</span> -<span class="hljs-keyword">m</span> <span class="hljs-string">"Un petit message sympa expliquant le correctif/post"</span></span></code></pre>
<p>Et on va finir en disant qu’on veut envoyer tout ça sur ton fork qui est
situé sur GitHub :</p>
<pre><code class="language-console">$ git <span class="hljs-keyword">push </span>-u</code></pre>
</li>
<li>
<p>Voila ! Si tu vas voir ton <code>fork</code> sur GitHub tu verras ton commit et les
modifications que tu as apportées normalement. Il ne te reste plus qu’à nous
soumettre ces modifications. Pour ça tu vas faire ce qu’on appelle une Pull
Request (PR)</p>
</li>
<li>
<p>Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens
inverse à côté du nom de ta branche en dessous du nombre de commits /
branches / etc.</p>
<figure>
  ![Bouton Pull Request](pull-request-button.jpg)
  <figcaption>C'est bon tu le vois là le bouton ?</figcaption>
</figure>
</li>
<li>
<p>Sélectionne les bonnes branches et ajoute-nous un beau titre et une belle
description de Pull Request en essayant au moins de commencer par <code>Post: Nom du post</code>
ou <code>Fix: Nom du post</code></p>
</li>
<li>
<p>Et voilà ! Tu n’as qu’à attendre de nos nouvelles maintenant. D’ailleurs au
passage, si tu veux, tu peux en profiter pour nous suivre <a href="https://twitter.com/putaindecode">sur
twitter</a>, et tu pourras nous lâcher un
message avec ta PR ou ton issue en lien, histoire de nous mettre la pression.</p>
</li>
</ul>
<h2 id="hey-tu-veux-mieux-comprendre-git"><a class="markdownIt-Anchor" href="#hey-tu-veux-mieux-comprendre-git">#</a> Hey ! Tu veux mieux comprendre Git ?</h2>
<p>Pour découvrir Git plus en détails, on t’invite à lire notre article
<a href="/posts/git/versionner-avec-git/">Versionner avec Git</a></p>
]]></description><link>http://putaindecode.fr/posts/comment-contribuer/</link><guid isPermaLink="true">http://putaindecode.fr/posts/comment-contribuer/</guid><pubDate>Tue, 05 Nov 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les projets qu'on soutient]]></title><description><![CDATA[<ul>
<li><a href="https://github.com/putaindecode/forum">putaindecode/forum</a>,
un forum, tout simplement</li>
<li><a href="https://github.com/putaindecode/ed-209">ed-209</a>,
un bot IRC bien sympa, fait en JavaScript</li>
<li><a href="https://github.com/putaindecode/mdwn.in">mdwn.in</a>,
un service en ligne de rendu de Markdown</li>
<li><a href="https://github.com/putaindecode/cookie">cookie</a>,
une petite librairie très simple, en JavaScript, pour manipuler les cookies</li>
</ul>
]]></description><link>http://putaindecode.fr/projets/</link><guid isPermaLink="true">http://putaindecode.fr/projets/</guid></item><item><title><![CDATA[C'est quoi Putain de code ?]]></title><description><![CDATA[<p><em>Putain de code !</em>
Déjà, le nom commence bien.</p>
<p>On a cherché un nom qui claque bien et on s’est dit que celui là serait
pas trop mal : c’est SEO-friendly et puis tu l’as déjà dans la tête.</p>
<p>Mais qui est-on ? Que veut-on ? <del>Quel est notre réseau ?</del></p>
<p>On va commencer simple avec notre définition de ce qu’est du putain de code:</p>
<blockquote>
<p>Putain de code - /py.tɛ̃ də kɔd/ orthographe invariable, forme de locution nominale</p>
<ol>
<li>(Vulgaire) (Injurieux) (Péjoratif) Code source méprisable.</li>
</ol>
<blockquote>
<p>Mais vas-y, c’est quoi ce putain de code là ? Qui a pondu cette grosse merde qui rame autant ?</p>
</blockquote>
<ol start="2">
<li>(Très familier) (Injurieux) (Mélioratif) Code source exaltant.</li>
</ol>
<blockquote>
<p>Eh gro’ mate moi ce putain de code ! Comment je t’ai refactorisé ces 1337 lignes là. 42 lignes, mec. Et ça va carrément plus vite !</p>
</blockquote>
</blockquote>
<p>Maintenant que tu commences à te faire ton idée, on va prendre le temps de
t’expliquer ça un peu plus en détail de manière à ce qu’on gagne tous un peu de temps
en évitant les questions de <em>noob</em> auxquelles on a déjà prévu les réponses.</p>
<h2 id="le-concept"><a class="markdownIt-Anchor" href="#le-concept">#</a> Le concept</h2>
<p><em>Putain de code !</em>, c’est un regroupement de développeurs vraiment passionnés
par leur boulot.</p>
<p>Et c’est à force de voir du code qui pique les yeux qu’on s’est dit qu’il
fallait qu’on fasse quelque chose pour toi et tes semblables.</p>
<p><img src="WAAAT.gif" alt="WAAAT"></p>
<p>Notre idée est simple : partager du code et des méthodes de travail de qualité,
afin qu’on puisse tous s’améliorer ensemble.</p>
<h2 id="mais-pourquoi-encore-un-autre-site"><a class="markdownIt-Anchor" href="#mais-pourquoi-encore-un-autre-site">#</a> Mais pourquoi encore un autre site ?</h2>
<p>On est partis d’un constat simple : les internets ne regorgent pas vraiment de
sites de ressources de qualité en français (s’il vous plaît).</p>
<p>Faut bien avouer qu’on a en tous un peu plein le c** de trouver du résultat de
<em><a href="http://commentcamarche.net">commentcamarche.net</a></em> et autres <em><a href="http://developpez.net">developpez.net</a></em> en tête de gondole quand tu
fais des recherches. D’ailleurs on se demande pourquoi l’extension c’est .net
alors que souvent le contenu ne l’est pas vraiment…
Serait-ce <del>grâce</del> à cause de la technologie qu’ils utilisent derrière ?</p>
<p>Du coup, plutôt que de faire de la traduction de ressources anglophones,
on s’est dit qu’il fallait qu’on fasse un truc : partager nos expériences
et connaissances afin d’aider la communauté.</p>
<p>Et là, on s’est dit qu’on pouvait faire encore mieux.
Quitte à partager de la qualité, autant partager tout ça au plus grand nombre
possible, nan ?
Là, on s’est dit “ouais, soyons fous, tentons le coup”. On va donc tenter
de partager dans plusieurs langues, déjà deux pour commencer.</p>
<p>Découvrir, apprendre, progresser et approfondir nos connaissances autour de
différents sujets au quotidien, ça nous paraît carrément essentiel pour
rester de bons développeurs.
Il est donc impératif de remettre en question ses pratiques.
C’est un peu le fondement de notre démarche d’ailleurs.</p>
<h2 id="comment-a-marche"><a class="markdownIt-Anchor" href="#comment-a-marche">#</a> Comment ça marche ?™</h2>
<blockquote>
<p>PRs are welcome</p>
</blockquote>
<p>On ne prétend pas avoir la science infuse.
On accepte donc volontiers les contributions sur les articles quelles qu’en
soient leurs formes.</p>
<p>Dans les faits :</p>
<ul>
<li>tu peux corriger nos conneries directement dans l’article, en faisant <a href="/posts/comment-contribuer/#correction-d-un-post-existant">une
PR</a> ;</li>
<li>tout naturellement, tu peux commenter les articles ;</li>
<li>tu peux aussi <a href="https://github.com/putaindecode/putaindecode.fr/issues">soumettre des articles</a>,
on se fera un plaisir de les prendre en compte (sauf si c’est une review
hebdomadaire de plugins jQuery) ;</li>
<li>tu peux aussi simplement faire de la <a href="https://github.com/putaindecode/putaindecode.fr/pulls?q=is%3Aopen+label%3Apost+is%3Apr">relecture de propositions prêtes à être publiées</a>.</li>
</ul>
<p>L’idée générale c’est que tu peux faire un peu ce que tu veux, tant que tu fais ça proprement et que tu suis les
<a href="https://github.com/putaindecode/putaindecode.fr/blob/master/CONTRIBUTING.md">quelques règles de contributions</a>
que nous avons rédigées.</p>
<p>On veut avoir quelque chose de propre, mais simple avant tout.</p>
<p>On te souhaite une agréable lecture, en espérant que tu apprennes tout un tas
de trucs et que ça soit dans la bonne humeur.</p>
<p>Des bisous.</p>
]]></description><link>http://putaindecode.fr/c-est-quoi-putaindecode/</link><guid isPermaLink="true">http://putaindecode.fr/c-est-quoi-putaindecode/</guid></item></channel></rss>