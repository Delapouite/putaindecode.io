<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.io]]></title><description><![CDATA[putaindecode.io]]></description><link>http://putaindecode.io</link><generator>RSS for Node</generator><lastBuildDate>Tue, 01 Dec 2015 22:13:29 GMT</lastBuildDate><atom:link href="http://putaindecode.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Avantages à diviser ses storyboards sur iOS/OS X]]></title><description><![CDATA[<p>Aujourd’hui, on va parler d’un sujet qui parle à tous les devs iOS : les
<strong>storyboards</strong>.</p>
<blockquote>
<p>Pour faire court :  les storyboards sont les fichiers d’interface sous iOS/OS X.
C’est là où vous placer vos <code>vues</code> dans vos <code>scenes</code>, vous les positionnez
entre elles, vous pouvez créer des interactions entre les <code>scenes</code> pour passer
de l’une à l’autre. C’est proche des XAML de Visual ou des Layouts d’Android,
mais avec la notion de relation entre les <code>scenes</code> en plus. Ça permet de créer
graphiquement et simplement le workflow de l’application.</p>
</blockquote>
<h2 id="pourquoi-d-couper-son-storyboard"><a class="markdownIt-Anchor" href="#pourquoi-d-couper-son-storyboard">#</a> Pourquoi découper son storyboard</h2>
<p>Pouvoir relier aussi facilement toutes les <code>scenes</code> dans un même storyboard,
c’est génial. Mais alors pourquoi les diviser ?</p>
<h3 id="viter-des-conflits"><a class="markdownIt-Anchor" href="#viter-des-conflits">#</a> Éviter des conflits</h3>
<p>Si vous travaillez à plusieurs, vous avez sûrement déjà rencontré des
conflits lors de merges où tout le monde a décidé d’éditer le <code>storyboard</code> en
même temps. Le storyboard est donc corrompu et le seul moyen de le récupérer
est de prendre celui de quelqu’un et refaire les changements ou de corriger les
sources en croisant les doigts. Accompagné de 4 L de café.<br>
Avec plusieurs <code>storyboards</code> : chacun bosse sur sa partie graphique. Si <em>Bob</em>
travaille sur les <em>vues de comptes</em> et <em>Joe</em> sur les <em>settings</em> de l’app,
chacun a un storyboard et ne change pas ceux des autres. Ça fait beaucoup moins
de chance d’avoir des conflits, voire aucun si tout le monde se met d’accord !</p>
<h3 id="les-gros-projets-plus-faciles-diter-comprendre"><a class="markdownIt-Anchor" href="#les-gros-projets-plus-faciles-diter-comprendre">#</a> Les gros projets plus faciles à éditer/comprendre</h3>
<p>Pour les gros projets, avec beaucoup de <code>scenes</code>, ranger ces <code>scenes</code> par
groupes dans différents <code>storyboards</code> peut être un bon moyen de s’y retrouver
facilement. Vous n’avez pas à dézoomer à chaque fois que vous voulez chercher
une <code>scene</code> à l’autre bout du storyboard.</p>
<h3 id="augmenter-la-vitesse-de-compilation"><a class="markdownIt-Anchor" href="#augmenter-la-vitesse-de-compilation">#</a> Augmenter la vitesse de compilation</h3>
<p>Recompiler tout le storyboard juste pour un label changé ça ne sert pas à
grand chose et certains <code>storyboards</code> peuvent être long à compiler. Donc moins
d’éléments vous avez à recompiler, plus vite ça ira.</p>
<h3 id="r-utilisation-de-code"><a class="markdownIt-Anchor" href="#r-utilisation-de-code">#</a> Réutilisation de code</h3>
<p>Imaginons que vous bossez dans une boîte qui fait souvent les mêmes apps
pour les clients, vous pouvez vous faire des petits storyboards que vous
réutiliserez et customiserez grâce aux contrôleurs (couleur, font, etc). Ça peut
faire gagner du temps, mais aussi beaucoup en perdre si vous en abusez ⚠️.</p>
<h2 id="comment-faire"><a class="markdownIt-Anchor" href="#comment-faire">#</a> Comment faire</h2>
<p>Rentrons dans le vif du sujet, le côté technique. En quelques lignes de code :</p>
<pre><code class="language-swift"><span class="hljs-comment">// *** Swift ***</span>
<span class="hljs-comment">// Aller chercher le storyboard</span>
<span class="hljs-keyword">let</span> storyboardSettings = <span class="hljs-type">UIStoryboard</span>(name: <span class="hljs-string">"settings"</span>, bundle: <span class="hljs-literal">nil</span>)
<span class="hljs-comment">// Aller chercher le contrôleur qui est dans le storybard</span>
<span class="hljs-keyword">let</span> controllerSettings =
storyboardSettings.instantiateViewControllerWithIdentifier(<span class="hljs-string">"settingsController"</span>)
<span class="hljs-comment">// Présenter</span>
<span class="hljs-keyword">self</span>.presentViewController(controllerSettings,animated: <span class="hljs-literal">true</span>, completion: <span class="hljs-literal">nil</span>)</code></pre>
<pre><code class="language-objc"><span class="hljs-comment">// *** Objective C ***</span>
<span class="hljs-comment">// Aller chercher le sotyboard</span>
<span class="hljs-built_in">UIStoryboard</span> * storyboardSettings = [<span class="hljs-built_in">UIStoryboard</span> storyboardWithName:<span class="hljs-string">@"settings"</span>
bundle:<span class="hljs-literal">nil</span>];
<span class="hljs-comment">// Aller chercher le contrôleur qui est dans le storybard</span>
<span class="hljs-built_in">UIViewController</span>* controllerSettings = [storyboardSettings
instantiateViewControllerWithIdentifier:<span class="hljs-string">@"settingsController"</span>];
<span class="hljs-comment">// Présenter</span>
[<span class="hljs-keyword">self</span> presentViewController:controllerSettings animated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];</code></pre>
<p>Rien de plus simple ! Mais c’est bien connu, les développeurs iOS sont des
fainéants, alors il y a encore plus simple, sans taper une seule ligne de code :</p>
<ul>
<li>créez un nouveau storyboard pour votre <em>secteur</em>
(File→New→File→[OS]→User Interface),</li>
<li>ajoutez une <code>scene</code> (<code>UIViewController</code>), mettre l’une en <code>vue initial</code>
(sinon le compilateur n’aime pas),</li>
<li>nommez les <code>storyboardID</code> de chacune de ces <code>scenes</code> dans le menu
<code>Utilies&gt;Identity Inspector</code>,</li>
<li>dans votre storyboard original, dans le menu <code>Utilies&gt;Object Library</code> cherchez
<code>storyboard</code> et ajoutez une <strong><code>Storyboard References</code></strong>,</li>
<li>sur la référence dans <code>Utilises&gt;Attributes Inspector</code> rentrez le nom dans
votre storyboard (dans <em>storyboard</em>) et remplissez <em>Reference ID</em> avec le
<em>storyboardID</em> de la <code>scene</code>,</li>
<li>pour finir, ajoutez une <code>segue</code>, à partir d’un bouton (par exemple) vers les
<em>Storyboard Reference</em> voulus.</li>
</ul>
<p>Plus long à lire qu’à faire !</p>
]]></description><link>http://putaindecode.io/fr/articles/xcode/storyboards/diviser/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/xcode/storyboards/diviser/</guid><pubDate>Tue, 01 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : la déclaration de variables avec const, let et var]]></title><description><![CDATA[<p>ES6 (aussi appelé ES2015) vous apporte de nouvelles façons de déclarer vos
variables grâce à <code>let</code> et <code>const</code> mais garde aussi la déclaration par <code>var</code>
dans la spécification du langage.</p>
<p>Première étape, on oublie tout ce qu’on sait sur <code>var</code>.</p>
<h1 id="d-clarations"><a class="markdownIt-Anchor" href="#d-clarations">#</a> Déclarations</h1>
<h2 id="const"><a class="markdownIt-Anchor" href="#const">#</a> const</h2>
<p><code>const</code> vous permet de déclarer une variable à assignation unique bindée
lexicalement. Bon, ça fait un peu pompeux, alors pour les devs au fond de la
salle à côté du radiateur, ça veut simplement dire que vous pouvez déclarer une
variable qui ne contiendra qu’une valeur et qui sera scopée au niveau du bloc.</p>
<p>Si vous avez déjà lu des posts ou des ressources parlant de <code>const</code>, méfiez-vous
: ce ne sont pas des vraies constantes au sens <em>valeur</em> de variable. Ce sont des
constantes au niveau référence. C’est à dire que le contenu d’un tableau ou d’un
objet déclaré avec <code>const</code> bloque la réassignation de la variable, mais ne rend
pas la valeur immutable.</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">const</span> foo <span class="hljs-comment">// SyntaxError, la variable a besoin d'être assignée</span>
    <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"qux"</span>
    foo = <span class="hljs-string">"norf"</span> <span class="hljs-comment">// SyntaxError, la variable ne peut pas être réassignée</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", la variable appartient au scope de son bloc (le "if")</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", la variable appartient au scope de la fonction "fn"</span>
}</code></pre>
<p>Le fonctionnement <code>const</code> peut être utilisé de manière cool dans le cas
d’itérables :</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> el <span class="hljs-keyword">of</span> arr) {
    <span class="hljs-built_in">console</span>.log(el)
  }
}</code></pre>
<p>En effet, on pourrait croire qu’un <code>let</code> doit être utilisé ici, mais la
déclaration est évaluée à chaque passage de l’itérateur, <code>const</code> est donc un
meilleur choix !</p>
<h2 id="let"><a class="markdownIt-Anchor" href="#let">#</a> let</h2>
<p><code>let</code> vous permet de faire pareil que <code>const</code> mais sans la contrainte
d’assignation unique. Vous devriez donc instinctivement voir que les cas
d’utilisation pour <code>let</code> sont les mêmes que ceux de <code>var</code>, son ancêtre.
D’ailleurs, vous entendrez souvent : <code>let</code> est le nouveau <code>var</code> (<em><code>let</code> is the
new <code>var</code></em>). C’est en partie vrai car il est capable de faire les mêmes choses,
mais en mieux, car il a cette caractéristique d’être scopé au bloc courant.</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">var</span> foo2 = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">let</span> foo <span class="hljs-comment">// pas d'erreur, foo === undefined</span>
    <span class="hljs-keyword">var</span> foo2
    <span class="hljs-comment">// Attention, les déclarations "var" ne sont pas scopées au niveau bloc</span>
    <span class="hljs-comment">// foo2 est en réalité écrasé !</span>
    foo = <span class="hljs-string">"qux"</span>
    foo2 = <span class="hljs-string">"qux"</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", la variable appartient au scope de son blocs (le "if")</span>
    <span class="hljs-built_in">console</span>.log(foo2)
    <span class="hljs-comment">// "qux"</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", la variable appartient au scope de son bloc (la fonction "fn")</span>
  <span class="hljs-built_in">console</span>.log(foo2)
  <span class="hljs-comment">// "qux"</span>
}</code></pre>
<p>Vous pouvez par exemple utiliser <code>let</code> pour vos boucles, la variable servant à
l’itération est désormais scopée au niveau de cette boucle et n’entrera pas en
conflit avec votre code autour. Plus de problème de <code>i</code> déjà pris !</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=i; i&lt;<span class="hljs-number">10</span>; i++) {
    <span class="hljs-built_in">console</span>.log(i)
  }
  <span class="hljs-built_in">console</span>.log(i)
  <span class="hljs-comment">// 0</span>

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j=i; j&lt;<span class="hljs-number">10</span>; j++) {}
  <span class="hljs-built_in">console</span>.log(j)
  <span class="hljs-comment">// j is not defined</span>
}
fn2() <span class="hljs-comment">// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span></code></pre>
<p>Note : l’exemple avec <code>const</code> dans une boucle <code>for ... of</code> ne peut être
reproduit ici. En effet, la boucle <code>for</code> classique est impérative, et la
déclaration n’est effectuée qu’une seule fois au début de la boucle. Un <code>const</code>
n’est donc pas utilisable.</p>
<h2 id="var"><a class="markdownIt-Anchor" href="#var">#</a> var</h2>
<p>On a vu <code>const</code>, on a vu <code>let</code>. Avec ces deux nouveaux outils, il ne reste pas
de grande place pour <code>var</code>. À mon avis, le seul cas d’utilisation valable pour
<code>var</code> est lors de l’utilisation de <code>try</code>/<code>catch</code>, et ce n’est pas dans le cadre
d’un bug, mais juste de syntaxe et de préférence
(<a href="https://twitter.com/getify/status/658662478528643072">exemple</a>).</p>
<h1 id="pi-ge-du-hoisting-et-de-la-tdz-temporal-dead-zone"><a class="markdownIt-Anchor" href="#pi-ge-du-hoisting-et-de-la-tdz-temporal-dead-zone">#</a> Piège du hoisting et de la TDZ (<em>Temporal Dead Zone</em>)</h1>
<p>Pour rappel, JavaScript possède un mécanisme de hoisting, par exemple, vous
pouvez écrire :</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo) <span class="hljs-comment">// "bar"</span>
  <span class="hljs-keyword">var</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<p>Concrètement, le moteur d’exécution JavaScript va lire toutes les déclarations
et remonter celles avec <code>var</code> au début du scope de votre fonction.</p>
<p><code>let</code> et <code>const</code> ne bénéficient pas de ce mécanisme de hoisting, ce qui peut
mener à des problèmes de TDZ (<em>Temporal Dead Zone</em>). Vu que la déclaration de
votre variable n’est pas remontée au scope de la fonction, il existe un moment
où votre variable n’existe pas. Ce moment, c’est la TDZ.</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// ReferenceError, on est dans la TDZ pour la variable foo</span>
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<h1 id="outro"><a class="markdownIt-Anchor" href="#outro">#</a> Outro</h1>
<p>Comment choisir quelle déclaration de variable utiliser ? C’est très simple :</p>
<ul>
<li>Utilisez une déclaration par <code>const</code> (99% du temps, c’est le bon choix)</li>
<li>Si au fil de votre code vous changez sa valeur, modifiez pour un <code>let</code> (1%)</li>
<li>Si vous avez trouvé le pire cas d’utilisation du monde, changez pour un <code>var</code>
(je vous laisse faire le calcul)</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/const-let-var/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/const-let-var/</guid><pubDate>Tue, 01 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tester unitairement des composants React]]></title><description><![CDATA[<p>L’équipe de React a implémenté une fonctionnalité appelée
<a href="http://facebook.github.io/react/docs/test-utils.html#shallow-rendering">shallow rendering</a>
(rendu peu profond),
qui permet de rendre un composant avec un seul niveau de profondeur de rendu.</p>
<p>Cela permet du coup de vérifier ce que le rendu retourne sans avoir à se
soucier du comportement des composants enfants, qui ne sont pas instanciés ni
rendus. Cela ne nécessite pas de DOM.</p>
<p>Intéressant, n’est-ce pas ? Et d’ailleurs, le <em>shallow rendering</em> est
actuellement
<a href="https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26">la méthode recommandée pour tester vos composants React</a>.</p>
<p>Comme vous pourrez le voir dans un article listé à la fin de celui-ci,
le code permettant de tester des composants avec cette technique n’est pas
forcément très concis, contrairement à ce qu’on pourrait attendre.</p>
<p>Heureusement, <a href="https://github.com/vvo">quelqu’un</a> a codé un truc plutôt cool :
<a href="https://github.com/algolia/react-element-to-jsx-string">react-element-to-jsx-string</a>.
Comme le nom l’indique, cette librairie permet de rendre un composant React en
tant que chaîne JSX.</p>
<p>C’est maintenant les choses deviennent intéressantes :
avec ces concepts en tête (le shallow render et le rendu de composant en strings
JSX), on peut facilement ajouter de simple tests unitaires sur ses composants.</p>
<p><em>Il y a d’autres techniques pour tester des composants React, et la plupart
implique le DOM. Vous devrez donc éxecuter vos tests dans un navigateur (ou
en utilisant jsdom) : vos tests seront plus lents que la technique qui va suivre
(qui pour le coup est plus du vrai test unitaire, dans le sens où vous utilisez
moins de code et ne nécessitez pas un gros environnement).</em></p>
<h2 id="tester-facilement-des-composants-react-sans-dom"><a class="markdownIt-Anchor" href="#tester-facilement-des-composants-react-sans-dom">#</a> Tester facilement des composants React (sans DOM)</h2>
<p>On va partir avec ce simple composant :</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/index.js</span>

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { PropTypes } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

const Component = ({
  img,
  title,
  Loader,
  Title,
}) =&gt; (
  &lt;div&gt;
    {
      (!img || !img.src) &amp;&amp; Loader &amp;&amp;
      &lt;Loader /&gt;
    }
    {
      img &amp;&amp; img.src &amp;&amp;
      &lt;img src={ img.src } alt={ img.alt }/&gt;
    }
    {
      title &amp;&amp; Title &amp;&amp;
      &lt;Title text={ title } /&gt;
    }
  &lt;/div&gt;
)

Component.propTypes = {
  img: PropTypes.object,
  title: PropTypes.string,
  Loader: PropTypes.func.isRequired,
  Title: PropTypes.func.isRequired,
}

Component.displayName = <span class="hljs-string">"Picture"</span>

export default Component</code></pre>
<p>Ce composant affiche une image avec un composant pour le titre.
Si les données de l’image ne sont pas prêtes, on peut afficher un composant pour
indiquer le chargement.</p>
<p>Écrivons maintenant un petit test. Pour notre exemple, on va utiliser
<a href="https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4">tape</a>
couplé avec <a href="https://github.com/atabel/tape-jsx-equals">tape-jsx-equals</a>,
mais vous n’aurez pas de mal à trouver un paquet à
<a href="https://www.npmjs.com/search?q=expect+jsx">votre sauce sur npm</a>.</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/__tests__/index.js</span>

<span class="hljs-keyword">import</span> tape <span class="hljs-keyword">from</span> <span class="hljs-string">"tape"</span>
<span class="hljs-keyword">import</span> addAssertions <span class="hljs-keyword">from</span> <span class="hljs-string">"extend-tape"</span>
<span class="hljs-keyword">import</span> jsxEquals <span class="hljs-keyword">from</span> <span class="hljs-string">"tape-jsx-equals"</span>
const test = addAssertions(tape, { jsxEquals })

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { createRenderer } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-addons-test-utils"</span>

<span class="hljs-keyword">import</span> Picture <span class="hljs-keyword">from</span> <span class="hljs-string">".."</span>

// fixtures (empty and stateless react components)
const Loader = () =&gt; {}
const Title = () =&gt; {}

test(<span class="hljs-string">"PageContainer is properly rendered"</span>, (t) =&gt; {
  const renderer = createRenderer()

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;Loader /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Loader component if no image data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"should render an image if data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
      title={ <span class="hljs-string">"TITLE"</span> }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
      &lt;Title text=<span class="hljs-string">"TITLE"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Title if data are passed"</span>
  )

  t.end()
})</code></pre>
<p>Ces tests sont une couverture minimale pour vous assurer que vous ne cassez rien
lorsque vous travaillez sur votre composant.</p>
<p>Comme vous pouvez le constater, les tests sont assez simples à écrire et vont
droit au but.
<strong>Ce qui est intéressant ici, c’est que nous ne comparons pas à l’aide de
simples chaînes. Nous utilisons directement des composants React.</strong></p>
<p>Vous pouvez tranquillement exécuter l’exemple complet et le récupérer depuis le
repository :</p>
<p><a href="https://github.com/MoOx/react-component-unit-testing-example">github.com/MoOx/react-component-unit-testing-example</a></p>
<p>Cet exemple contient les commandes et dépendances
(définies dans le <code>package.json</code>)
dont vous aurez besoin.</p>
<h1 id="et-comment-tester-les-v-nements-comme-onclick"><a class="markdownIt-Anchor" href="#et-comment-tester-les-v-nements-comme-onclick">#</a> Et comment tester les évènements comme <code>onClick</code> ?</h1>
<p>Vous n’avez pas à reproduire le clic complètement.</p>
<p><strong>Vos tests n’ont pas besoin de vérifier que la prop <code>onClick</code> va bien être
exécutée lorsque vous cliquerez sur un élément du DOM.</strong>
<em>React couvre probablement cela dans sa suite de tests.</em></p>
<p>Ce que vous avez besoin de tester, c’est que la valeur que vous passez au
<code>onClick</code> fait bien ce que vous voulez.
En gros, si vous avez un bout de code qui ressemble à
<code>onClick={ yourCallback }</code>, vous n’avez tout simplement qu’à appeler directement
<code>yourCallback()</code> dans vos tests juste avant votre comparaison.
C’est bien assez !</p>
<p>Si vous voulez aller un peu plus loin, vous pouvez continuer par lire :</p>
<ul>
<li><a href="https://simonsmith.io/unit-testing-react-components-without-a-dom/"><em>Unit testing React components without a DOM</em></a>,
par Simon Smith, qui couvre le même sujet, sans la simplicité de la comparaison
JSX,</li>
<li><a href="https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/"><em>How we unit test React components using expect-jsx</em></a>
sur le blog d’Algolia, qui explique pourquoi ils ont choisi et créé les outils
pour cette approche.</li>
</ul>
<p>Avec ces exemples, nous espérons vraiment que vous n’aurez plus peur de tester
votre code et que vous n’hésiterez plus à couvrir tous vos composants React de
tests 😍.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/test-unitaires/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/test-unitaires/</guid><pubDate>Tue, 24 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unit testing React components]]></title><description><![CDATA[<p>The React team has implemented a feature called
<a href="http://facebook.github.io/react/docs/test-utils.html#shallow-rendering">shallow rendering</a>,
which</p>
<blockquote>
<p>lets you render a component “one level deep” and assert facts about
what its render method returns, without worrying about the behavior of child
components, which are not instantiated or rendered.
This does not require a DOM.</p>
</blockquote>
<p>Sounds good, right? And guess what, shallow rendering is currently the
<a href="https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26">preferred way to test your React components</a>.</p>
<p>As you can see in the post mentioned at the end of this one, the
actual code to test some components might seem a bit longer that what you could
expect.</p>
<p>Hopefully, <a href="https://github.com/vvo">someone</a> created something pretty cool:
<a href="https://github.com/algolia/react-element-to-jsx-string">react-element-to-jsx-string</a>.
As the name of the package says, this library helps to render a react component
into a JSX string.</p>
<p>Now things start to become interesting:
with those two things in mind (shallow render and react components as JSX strings),
we can easily add some basic unit tests to some components.</p>
<p><em>There are others techniques to test React components, and most of those
involve the DOM. This means you will need to run your tests in the browser (or
using jsdom): your tests will be slower than the following method
(which is more real unit testing since you execute less code and do not require
a huge environment).</em></p>
<h2 id="easy-unit-testing-react-components-without-a-dom"><a class="markdownIt-Anchor" href="#easy-unit-testing-react-components-without-a-dom">#</a> Easy unit testing React components (without a DOM)</h2>
<p>Let’s do this with the following (dumb) component:</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/index.js</span>

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { PropTypes } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

const Component = ({
  img,
  title,
  Loader,
  Title,
}) =&gt; (
  &lt;div&gt;
    {
      (!img || !img.src) &amp;&amp; Loader &amp;&amp;
      &lt;Loader /&gt;
    }
    {
      img &amp;&amp; img.src &amp;&amp;
      &lt;img src={ img.src } alt={ img.alt }/&gt;
    }
    {
      title &amp;&amp; Title &amp;&amp;
      &lt;Title text={ title } /&gt;
    }
  &lt;/div&gt;
)

Component.propTypes = {
  img: PropTypes.object,
  title: PropTypes.string,
  Loader: PropTypes.func.isRequired,
  Title: PropTypes.func.isRequired,
}

Component.displayName = <span class="hljs-string">"Picture"</span>

export default Component</code></pre>
<p>This component displays an image with a title component.
If the image data are not ready yet, it can display a loader component.</p>
<p>Now let’s write some simple test for it. For the example we will use
<a href="https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4">tape</a>
with the help of <a href="https://github.com/atabel/tape-jsx-equals">tape-jsx-equals</a>,
but you will find
<a href="https://www.npmjs.com/search?q=expect+jsx">all kind of flavors on npm</a>.</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/__tests__/index.js</span>

<span class="hljs-keyword">import</span> tape <span class="hljs-keyword">from</span> <span class="hljs-string">"tape"</span>
<span class="hljs-keyword">import</span> addAssertions <span class="hljs-keyword">from</span> <span class="hljs-string">"extend-tape"</span>
<span class="hljs-keyword">import</span> jsxEquals <span class="hljs-keyword">from</span> <span class="hljs-string">"tape-jsx-equals"</span>
const test = addAssertions(tape, { jsxEquals })

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { createRenderer } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-addons-test-utils"</span>

<span class="hljs-keyword">import</span> Picture <span class="hljs-keyword">from</span> <span class="hljs-string">".."</span>

// fixtures (empty and stateless react components)
const Loader = () =&gt; {}
const Title = () =&gt; {}

test(<span class="hljs-string">"PageContainer is properly rendered"</span>, (t) =&gt; {
  const renderer = createRenderer()

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;Loader /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Loader component if no image data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"should render an image if data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
      title={ <span class="hljs-string">"TITLE"</span> }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
      &lt;Title text=<span class="hljs-string">"TITLE"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Title if data are passed"</span>
  )

  t.end()
})</code></pre>
<p>These tests are the minimum coverage to ensure you don’t break anything when you work
on your component.</p>
<p>As you can see, tests here are pretty easy to write &amp; straightforward.<br>
<strong>The interesting part is that you don’t compare using strings.
You can use real React components.</strong></p>
<p>You can easily run this full example by getting it from this repository:</p>
<p><a href="https://github.com/MoOx/react-component-unit-testing-example">github.com/MoOx/react-component-unit-testing-example</a></p>
<p>This example contains all the commands and dependencies
(defined in the <code>package.json</code>)
that you might need.</p>
<h1 id="what-about-testing-events-like-onclick"><a class="markdownIt-Anchor" href="#what-about-testing-events-like-onclick">#</a> What about testing events like <code>onClick</code>?</h1>
<p>You don’t need to reproduce the entire click.</p>
<p><strong>Your tests don’t need to check that your <code>onClick</code> prop will be executed when
you click on a DOM element.</strong>
<em>React probably have tests to cover this.</em></p>
<p>You only need to test that the <code>onClick</code> prop value will do what you want.
So if you have something like <code>onClick={ yourCallback }</code>,
just call directly <code>yourCallback()</code> in your test just before your comparison.
That’s enough!</p>
<p>If you want to go deeper, you might also read:</p>
<ul>
<li><a href="https://simonsmith.io/unit-testing-react-components-without-a-dom/"><em>Unit testing React components without a DOM</em></a>,
by Simon Smith, that covers the same topic without the simplicity of the JSX
comparisons,</li>
<li><a href="https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/"><em>How we unit test React components using expect-jsx</em></a>
on Algolia blog, that explains why they choose and create tools for this approach.</li>
</ul>
<p>With all those examples, we hope you will stop being afraid to test your code
and will not hesitate to cover all your React components with tests 😍.</p>
]]></description><link>http://putaindecode.io/en/articles/js/react/unit-testing/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/react/unit-testing/</guid><pubDate>Tue, 24 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Un favicon vite fait bien fait]]></title><description><![CDATA[<p>Oublions un instant CSS et JavaScript pour parler d’un sujet vraiment
important : le favicon.</p>
<p>Alors d’accord, le favicon n’est que le petit détail qu’on expédie en fin de
projet. Mais oubliez-le et votre client comprendra tout de suite qu’il manque
quelque chose.</p>
<p>Dans ce post, nous allons voir comment s’acquitter de cette tâche dans les temps
et les règles de l’art. Et nous ferons intervenir un outil dont je suis l’heureux
auteur.</p>
<h2 id="vite-fait"><a class="markdownIt-Anchor" href="#vite-fait">#</a> Vite fait</h2>
<p>Pourquoi vite fait ? Parce qu’on ne peut pas consacrer trop de temps au favicon.
L’optimisation pour les smartphones, l’amélioration du score PageSpeed ou
encore l’augmentation du taux de conversion, voilà des sujets sur lesquels on
peut plancher des heures, des jours ou bien plus. Mais le favicon, franchement,
est-ce vraiment la raison à invoquer pour expliquer le retard d’un projet ? Un
détail qu’on vous dit !</p>
<p>Pour créer un favicon vite fait :</p>
<ul>
<li>Créez un <code>favicon.ico</code> avec n’importe quel générateur trouvé sur le net.
Déclarez-le avec <code>&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</code>.
Ou peut-être <code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</code> ? Non parce qu’on trouve les deux. Dans le doute,
déclarez-le deux fois.</li>
<li>Créez une Touch icon (pour iOS et les autres). Si on en croit les résultats
pour “apple touch icon size” sur Google, la taille maximale est 144x144.</li>
</ul>
<p>Voilà. Si vous faites tout ça, vous vous serez acquitté de la tâche rapidement.
Bon, ça sera mal fait, mais fait. C’est un début.</p>
<h2 id="bien-fait"><a class="markdownIt-Anchor" href="#bien-fait">#</a> Bien fait</h2>
<p>À présent, penchons-nous sur les difficultés qui nous attendent.</p>
<h3 id="c-est-la-taille-qui-compte"><a class="markdownIt-Anchor" href="#c-est-la-taille-qui-compte">#</a> C’est la taille qui compte</h3>
<p>Ça ne fait pas plaisir à entendre et pourtant nous sommes au cœur du problème
(nous parlons bien de favicon).</p>
<p><code>favicon.ico</code> devrait-il être en 16x16 ou 32x32 ? <a href="https://msdn.microsoft.com/library/gg491740(v=vs.85).aspx">Les deux, selon
Microsoft</a>. Quelle
est la taille de la Touch icon d’Apple ? <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW2">180x180 depuis iOS 8</a>.
La tuile <code>square70x70logo</code> pour Windows 8 et 10, c’est… du 70x70, hein ?
Moui, mais <a href="https://msdn.microsoft.com/library/dn455106(v=vs.85).aspx">idéalement, 128x128</a>.</p>
<p>Ça n’est pas tout : encore faut-il trouver ces informations. Google est
assez variable sur ce point. Il met dans le mille pour une recherche concernant
le favicon classique (16x16 <em>et</em> 32x32), mais échoue, on l’a vu, pour la
Touch icon. Les éditeurs ne sont pas en reste. Si <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW2">Apple indique bien les
dimensions attendues pour l’iPhone 6</a>,
il a en revanche <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html">oublié de mettre à jour sa page qui sort pourtant en premier résultat pour la recherche “apple touch icon”</a> (152x152 d’après elle).</p>
<p>Le <a href="https://github.com/audreyr/favicon-cheat-sheet">favicon cheat sheet</a> est une
ressource intéressante à ce titre, quoique pas à jour à l’heure où ces lignes
sont écrites.</p>
<p>Bref, le temps de rassembler toutes ces informations et l’après-midi s’est envolé. Oups.</p>
<p>Ce que je décris ici est le premier problème auquel je me suis frotté il y
a un peu plus de deux ans, alors que j’achevais mon premier site responsive et
que je voulais une icône digne de ce nom.</p>
<h3 id="le-design-vraiment"><a class="markdownIt-Anchor" href="#le-design-vraiment">#</a> Le design. Vraiment.</h3>
<p>Allez, j’ai fait dans l’anxiogène avec ces histoires de taille mais en réalité
ce problème a été largement amoindri ces derniers mois avec l’arrivée de
générateurs de favicon de nouvelle génération. Et vous en aurez pour votre
argent (d’autant qu’ils sont gratuits) : envoyez votre image et vous vous
retrouverez avec plus d’une vingtaine d’images. C’est beaucoup, presque trop
diront certains.</p>
<p>Mais cette solution cache un problème presque plus grave. Si votre image
originale passera bien sur une platforme, elle risque fort de ne pas
correspondre à une autre.</p>
<p>Prenons l’exemple des icônes pour Android et iOS. Elles servent surtout au <em>Add
to homescreen</em>, lorsque votre visiteur vous fait l’honneur d’ajouter un lien
vers votre site sur l’écran de son smartphone. Pas vraiment le moment de le
décevoir. Sur Android, beaucoup d’icônes ne sont pas carrées mais exploitent
la transparence, notamment les applications natives de Google.</p>
<p><img src="google_apps.png" alt=""></p>
<p>Bonne idée, donc, de suivre ce principe pour notre propre icône. C’est cette
voie qu’a choisie mon cerveau auxilière, je veux parler de StackOverflow, et sa
Touch icône transparente.</p>
<p><img src="so_android.png" alt=""></p>
<p>Sur iOS et son univers tout de parallélépipèdes aux coins arrondis, point de
transparence en revanche. L’icône de StackOverflow se voit affublée d’un fond
noir. Le résultat n’est pas si mauvais, mais était-ce vraiment voulu ?</p>
<p><img src="so_ios.png" alt=""></p>
<p>Passer son image à la moulinette pour en tirer une vingtaine d’icônes est une
fausse bonne idée. Elle donne la dangereuse illusion d’un travail bien fait
alors qu’en réalité vous n’avez pas de réel moyen de savoir ce que vous venez
de faire. Sauf à tester vos icônes sur différents appareils et navigateurs, mais
là ce sont encore quelques heures qui partent en fumée.</p>
<p>Et voilà quel était le second problème que j’ai découvert dans ma quête d’une
icône correcte. Un <code>-resize</code> d’ImageMagick et un script bash un peu brutal ne
suffisent pas.</p>
<p>Cela a donné le coup d’envoi à
<a href="https://realfavicongenerator.net/">RealFaviconGenerator.net</a>, un générateur de
favicon qui devait vraiment solutionner le problème.</p>
<p>Il n’y a pas grand chose à dire sur le sujet, et c’est le but: n’oublions pas
que nous n’avons que peu de temps. Rendez-vous sur <a href="http://RealFaviconGenerator.net">RealFaviconGenerator.net</a>,
postez votre image, éditez vos icônes plate-forme par plate-forme et vous voilà
avec ce qu’il faut d’images, de fichiers annexes et de code HTML pour
configurer votre favicon.</p>
<p><img src="favicon_editor.png" alt=""></p>
<p>Voilà, c’est terminé.</p>
<h3 id="se-mettre-la-page"><a class="markdownIt-Anchor" href="#se-mettre-la-page">#</a> Se mettre à la page</h3>
<p>Ou presque.</p>
<p>Il y a encore quelques années, il était normal de télécharger un framework
JavaScript à la main puis de le déposer tel quel dans un projet Web.
Aujourd’hui, cela est considéré comme une mauvaise pratique et on préférera
utiliser un package manager.</p>
<p>Est-il souhaitable d’industrialiser le favicon de la même manière ? Voyons voir
ce qu’il s’est passé en un an :</p>
<ul>
<li>L’Iphone 6 est sorti, et avec lui la touch icon en 180x180 (avant c’était
152x152).</li>
<li>Android Chrome a cessé d’utiliser l’icône en 196x196 qui était autrefois
spécifiée. À la place, il utilise une icône en 192x192 (et snobe la précédente
quoi qu’il arrive).</li>
<li>Oubliez cette histoire d’icône en 192x192, Android Chrome utilise désormais
un manifeste et plusieurs versions d’icônes pour les différentes densités
d’écran.</li>
<li>Apple a sorti une nouvelle icône au format SVG pour les “pinned tabs” de
Safari pour Mac OS X El Capitan.</li>
</ul>
<p>Autrement dit, si vous avez créé un favicon il y a un peu plus d’un an, il y a
fort à parier qu’il rende mal sur un iPad de dernière génération et le résultat
sur Android pourrait être assez aléatoire (Chrome utilisera une icône PNG qui
n’est pas pour lui ou bien une Touch icon).</p>
<p>À cet effet,
<a href="https://realfavicongenerator.net/api">RealFaviconGenerator propose une API</a>.
Tout ce qu’il est possible de faire via l’UI peut être reproduit via l’API.
Hum… une API… de la doc à lire… Manifestement, ce n’est pas de cette
façon qu’on va accélérer les choses. Mais tout n’est pas perdu car le code peut
être généré automatiquement.</p>
<p>Actuellement, RealFaviconGenerator supporte Grunt et Gulp. Par exemple, après
avoir créé votre favicon, cliquez sur l’onglet “Gulp”. Vous avez le fragment de
Gulpfile ainsi que les instructions pour intégrer votre favicon à votre
processus de build, au même titre que la minification des CSS ou le processing
des Coffee scripts.</p>
<p><img src="gulp_instructions.png" alt=""></p>
<p>Les règles :</p>
<ul>
<li><code>generate-favicon</code> : génère les icônes. Elle prend quelques
secondes et c’est le genre de règle qu’on n’exécute qu’une fois de temps en
temps, lorsqu’il y a du changement dans le paysage des favicons.</li>
<li><code>inject-favicon-markups</code> : injecte les déclarations d’icônes
dans les pages HTML. À exécuter à chaque modification de page, autant dire
qu’elle va souvent servir.</li>
<li><code>check-for-favicon-update</code> : vérifie s’il y a du nouveau sur
RealFaviconGenerator. Si c’est le cas, elle fera échouer votre build bien
comme il faut. Un peu brutal mais ça a le mérite d’être clair. Si vous
avez un système d’intégration continue, arrangez-vous pour ajouter cette règle
à votre radar.</li>
</ul>
<p>La favicon a toujours été un parent pauvre des projets web, à juste titre.
Avec la prolifération des plates-formes, le négliger est de plus en plus hasardeux.
J’ai conçu RealFaviconGenerator pour apporter un peu d’ordre à tout cela. Ce
n’est pas la seule initiative. Hayden Bleasel développe
<a href="https://github.com/haydenbleasel/favicons">favicons</a> qui ambitionne d’être
<a href="https://github.com/google/web-starter-kit/issues/599">intégré au Web Starter Kit de Google</a>.</p>
<p>Et maintenant, c’est à vous : que pensez-vous de la formule “génération de
Gulp/Grunt/autre” ? Quelles sont les technos que vous aimeriez trouver ?</p>
]]></description><link>http://putaindecode.io/fr/articles/favicon/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/favicon/</guid><pubDate>Tue, 17 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Gérer son thème WordPress avec Webpack]]></title><description><![CDATA[<h1 id="pourquoi-webpack-pour-g-rer-son-th-me-wordpress"><a class="markdownIt-Anchor" href="#pourquoi-webpack-pour-g-rer-son-th-me-wordpress">#</a> Pourquoi Webpack pour gérer son thème WordPress ?</h1>
<p>La réponse est la même qu’à la simple question
<a href="/fr/articles/js/webpack/">“pourquoi Webpack ?”</a>.
L’intérêt principal est d’obtenir des rapports d’erreurs liés à
la gestion des assets (images, fonts, etc).</p>
<p>Qu’y a-t-il de si particulier à savoir pour utiliser Webpack pour gérer un thème
WordPress ? Pas grand chose, mais voici de quoi vous faire gagner (peut-être)
un peu de temps.</p>
<p>Il y a certainement plusieurs façons de gérer son thème WordPress
avec Webpack. Celle que je vous propose va se limiter à des choses
simples en concentrant le code dans le répertoire du thème pour plus de
modularité.</p>
<p>Pour commencer, deux choses importantes à savoir :</p>
<ul>
<li>Ne mettez pas de CSS dans le fameux <code>style.css</code> à la racine de votre thème,
laissez juste le cartouche en commentaire (sans lequel WordPress ne détectera
pas votre thème…) ;</li>
<li>créez un dossier <code>src</code> dans votre thème, où nous
mettrons nos “sources”, la partie du thème “compilé” sera dans un dossier
<code>dist</code> et n’aura donc pas besoin d’être versionnée.</li>
</ul>
<p>La seule petite chose à laquelle il faut faire attention finalement, c’est de
bien configurer le <code>publicPath</code> de Webpack afin que les fichiers qu’il génère
soient bien dans le bon chemin, et que les ressources liées (dans les fichiers CSS
par exemple) comportent les bons chemins relatifs (à la racine du site).</p>
<p>Avec l’arborescence suivante, nous n’aurons pas de difficulté à faire une
configuration portable :</p>
<pre><code>-<span class="ruby"> htdocs
</span>  -<span class="ruby"> wp-content
</span>    -<span class="ruby"> themes
</span>      -<span class="ruby"> putaindetheme
</span>        -<span class="ruby"> node_modules
</span>        -<span class="ruby"> src
</span>          -<span class="ruby"> index.js
</span>          -<span class="ruby"> index.css
</span>          -<span class="ruby"> images/*
</span>          -<span class="ruby"> fonts/*
</span>        -<span class="ruby"> style.css
</span>        -<span class="ruby"> webpack.config.babel.json
</span>        -<span class="ruby"> package.json
</span>-<span class="ruby"> package.json</span></code></pre>
<p>En plus de cela, nous pouvons ajouter une sorte de raccourci via un
<code>package.json</code> supplémentaire à la racine de notre projet :</p>
<pre><code class="language-json">{
  "<span class="hljs-attribute">private</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">start</span>": <span class="hljs-value"><span class="hljs-string">"cd htdocs/wp-content/themes/putaindetheme &amp;&amp; npm start"</span></span>,
    "<span class="hljs-attribute">build</span>": <span class="hljs-value"><span class="hljs-string">"cd htdocs/wp-content/themes/putaindetheme &amp;&amp; npm run build"</span>
  </span>}
</span>}</code></pre>
<p>Ce petit raccourci nous évitera de devoir nous taper en CLI tout le chemin du
thème et nous pourrions même, pourquoi pas, rajouter un
<code>&quot;prestart&quot;: &quot;open http://yourlocalhost.tld&quot;</code> afin d’ouvrir automatiquement
le projet dans le navigateur lorsque nous démarrerons notre développement via
<code>$ npm start</code>.</p>
<p>Voyons rapidement donc le <code>package.json</code> du thème ainsi que la config Webpack.</p>
<p><code>package.json</code></p>
<pre><code class="language-json">{
  "<span class="hljs-attribute">private</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,
  "<span class="hljs-attribute">scripts</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">start</span>": <span class="hljs-value"><span class="hljs-string">"webpack --config=webpack.config.babel.js --watch"</span></span>,
    "<span class="hljs-attribute">build</span>": <span class="hljs-value"><span class="hljs-string">"webpack --config=webpack.config.babel.js -p"</span>
  </span>}</span>,
  "<span class="hljs-attribute">devDependencies</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">babel</span>": <span class="hljs-value"><span class="hljs-string">"^5.8.12"</span></span>,
    "<span class="hljs-attribute">babel-core</span>": <span class="hljs-value"><span class="hljs-string">"^5.8.12"</span></span>,
    "<span class="hljs-attribute">babel-loader</span>": <span class="hljs-value"><span class="hljs-string">"^5.3.2"</span></span>,
    "<span class="hljs-attribute">css-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.15.6"</span></span>,
    "<span class="hljs-attribute">eslint</span>": <span class="hljs-value"><span class="hljs-string">"^0.24.1"</span></span>,
    "<span class="hljs-attribute">eslint-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.14.2"</span></span>,
    "<span class="hljs-attribute">extract-text-webpack-plugin</span>": <span class="hljs-value"><span class="hljs-string">"^0.8.2"</span></span>,
    "<span class="hljs-attribute">file-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.8.4"</span></span>,
    "<span class="hljs-attribute">json-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.5.2"</span></span>,
    "<span class="hljs-attribute">postcss-cssnext</span>": <span class="hljs-value"><span class="hljs-string">"^2.1.0"</span></span>,
    "<span class="hljs-attribute">postcss-import</span>": <span class="hljs-value"><span class="hljs-string">"^7.0.0"</span></span>,
    "<span class="hljs-attribute">postcss-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.6.0"</span></span>,
    "<span class="hljs-attribute">postcss-url</span>": <span class="hljs-value"><span class="hljs-string">"^5.0.2"</span></span>,
    "<span class="hljs-attribute">style-loader</span>": <span class="hljs-value"><span class="hljs-string">"^0.12.3"</span></span>,
    "<span class="hljs-attribute">webpack</span>": <span class="hljs-value"><span class="hljs-string">"^1.10.5"</span>
  </span>}</span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">normalize.css</span>": <span class="hljs-value"><span class="hljs-string">"^3.0.3"</span>
  </span>}
</span>}</code></pre>
<p>Quelques petites notes sur ce contenu :</p>
<ul>
<li><code>private</code> sert à éviter la publication de votre “paquet” sur npm, ainsi qu’à
devoir remplir certains champs tels que <code>name</code> et compagnie ;</li>
<li>nous mettrons dans <code>devDependencies</code> les dépendances pour le développement et
dans <code>dependencies</code> les dépendances qui seront dans le build final. Ici, j’ai
simplement mis <code>normalize.css</code> pour exemple, mais vous pourriez très bien avoir
aussi jQuery (:trollface:) ou React ;</li>
<li>les scripts utilisent <code>webpack.config.babel.js</code> afin de pouvoir définir la
configuration en es6/7 via <em>babel</em>.</li>
</ul>
<p>Voyons maintenant la config <code>webpack.config.babel.js</code> :</p>
<pre><code class="language-js"><span class="hljs-comment">// <span class="hljs-doctag">Note:</span> le code ci-dessous est mal rendu</span>
<span class="hljs-comment">// Une issue est ouverte à ce propos</span>
<span class="hljs-comment">// https://github.com/isagalaev/highlight.js/issues/958</span>

<span class="hljs-keyword">import</span> <span class="hljs-string">"babel/polyfill"</span>
<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>
<span class="hljs-keyword">import</span> ExtractTextPlugin <span class="hljs-keyword">from</span> <span class="hljs-string">"extract-text-webpack-plugin"</span>
<span class="hljs-keyword">import</span> postcssImport <span class="hljs-keyword">from</span> <span class="hljs-string">"postcss-import"</span>
<span class="hljs-keyword">import</span> postcssUrl <span class="hljs-keyword">from</span> <span class="hljs-string">"postcss-url"</span>
<span class="hljs-keyword">import</span> postcssCssnext <span class="hljs-keyword">from</span> <span class="hljs-string">"postcss-cssnext"</span>

const production = process.argv.includes(`-p`)

const theme = path.basename(__dirname)
const src = path.join(__dirname, `src`)

export default {
  entry: {
    index: [`${ src }/index.js<span class="hljs-string">`],
  },

  output: {
    path: path.join(__dirname, `</span>dist<span class="hljs-string">`),
    filename: `</span>[name].js<span class="hljs-string">`,
    publicPath: `</span>wp-content/themes/${ theme }/dist/<span class="hljs-string">`,
  },
  resolve: {
    extensions: [
      `</span><span class="hljs-string">`,
      `</span>.js<span class="hljs-string">`,
      `</span>.json<span class="hljs-string">`,
    ],
  },

  module: {
    loaders: [
      {
        test: /\.json$/,
        loader: `</span>json-loader<span class="hljs-string">`,
      },
      {
        test: /\.js$/,
        loaders: [
          `</span>babel-loader<span class="hljs-string">`,
          `</span>eslint-loader<span class="hljs-string">`,
        ],
        include: src,
      },
      {
        test: /\.css$/,
        loader: ExtractTextPlugin.extract(
          `</span>style-loader<span class="hljs-string">`,
          [
            `</span>css-loader<span class="hljs-string">`,
            `</span>postcss-loader<span class="hljs-string">`,
          ].join(`</span>!<span class="hljs-string">`)
        ),
      },
      {
        test: /\.(ico|jpe?g|png|gif)$/,
        loader: `</span>file-loader?name=[path][name].[ext]&amp;context=${ src }/<span class="hljs-string">`,
      },
    ],
  },

  plugins: [
    new ExtractTextPlugin(`</span>[name].css<span class="hljs-string">`, {disable: !production}),
  ],

  postcss: function() {
    // https://github.com/postcss/postcss-loader/issues/31
    const webpack = this

    return [
      postcssImport({
        onImport: (files) =&gt; files.forEach(webpack.addDependency),
      }),
      postcssUrl(),
      postcssCssnext({
        browsers: `</span>last <span class="hljs-number">2</span> versions<span class="hljs-string">`,
      }),
    ]
  },
}</span></code></pre>
<p><em>Bien entendu, libre à vous d’adapter les loaders Webpack à utiliser, ainsi que
la configuration PostCSS par exemple.</em> Faites un tour sur notre article de
<a href="/fr/articles/js/webpack/premier-exemple/">premier exemple de configuration Webpack</a> afin
d’y voir plus clair.</p>
<p>Il nous reste maintenant à ajouter dans notre thème WordPress les
références à nos points d’entrées CSS et JavaScript que sont <code>index.css</code> et
<code>index.js</code>.</p>
<p>Pour faire simplement, dans votre fichier <code>functions.php</code> (oui, le fichier qui a un nom
qui n’indique pas du tout ce pour quoi tout le monde se sert du fichier, c’est à
dire la configuration du thème au runtime…), on va ajouter une petite constante
qui servira à adapter votre thème en fonction de l’environnement :</p>
<pre><code class="language-php"><span class="hljs-comment">// ENV est à définir dans votre configuration Apache par exemple.</span>
<span class="hljs-comment">// Si vous ne voulez pas y toucher, vous pouvez plutôt définir d'une autre façon</span>
<span class="hljs-comment">// en testant le SERVER_NAME par exemple</span>
define(<span class="hljs-string">'ENV'</span>, getenv(<span class="hljs-string">'ENV'</span>));

<span class="hljs-comment">// en local, on pourrait définir ENV à "development"</span></code></pre>
<p><em>Nous pourrions dans ce fichier utiliser l’API de Wordpress pour enregister nos
<code>index.css</code> et <code>index.js</code> via les méthodes <code>wp_(de)register_</code>, mais nous
resterons simples pour l’exemple.</em></p>
<p>Vu qu’on utilise le <code>style-loader</code> de Webpack en développement, on ne va ajouter
notre feuille de style qu’en production (dans le <code>&lt;head&gt;</code>).</p>
<pre><code class="language-php"><span class="hljs-preprocessor">&lt;?php</span> <span class="hljs-keyword">if</span> (ENV != <span class="hljs-string">"development"</span>): <span class="hljs-preprocessor">?&gt;</span>
  &lt;link rel=<span class="hljs-string">"stylesheet"</span> href=<span class="hljs-string">"&lt;?php echo get_bloginfo('template_directory') ?&gt;/dist/index.css"</span> /&gt;
<span class="hljs-preprocessor">&lt;?php</span> <span class="hljs-keyword">endif</span>; <span class="hljs-preprocessor">?&gt;</span></code></pre>
<p>Pensez aussi à supprimer la référence à <code>style.css</code> dans <code>header.php</code>.</p>
<p>Dans la même idée mais en plus simple, on va ajouter dans notre <code>footer.php</code>.</p>
<pre><code class="language-php">&lt;script src=<span class="hljs-string">"&lt;?php echo get_bloginfo('template_directory') ?&gt;/dist/index.js"</span>&gt;&lt;/script&gt;</code></pre>
<p>Rien de bien compliqué finalement.</p>
<p><em>Attention si votre thème hérite d’un autre,
<code>get_bloginfo('template_directory')</code> ne pointera pas vers votre thème mais le
thème parent. Il vous faudra donc ajuster le code 😑.</em></p>
<hr>
<p>Pour le test vous pouvez mettre dans les CSS et JS :</p>
<p><code>index.css</code></p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"normalize.css"</span></span>;
<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background</span>:<span class="hljs-value"> red</span></span>;
}</span></code></pre>
<p>Notez ici que par la façon dont nous avons défini Webpack ci-dessus, vous
devriez placer et référencer vos assets (images &amp; co), depuis <code>src</code>. Exemple :</p>
<pre><code class="language-css"><span class="hljs-tag">html</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background</span>:<span class="hljs-value"> <span class="hljs-function">url</span>(./images/background.jpg)
  <span class="hljs-comment">/* =&gt; wp-content/themes/putaindetheme/src/images/background.jpg */</span>
</span></span></span>}</code></pre>
<p>Ensuite, dans <code>index.js</code>, je vous laisse vous débrouiller :)</p>
<pre><code class="language-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Hey !"</span>)</code></pre>
<p>Libre à vous maintenant d’ajouter vos dépendances favorites et de remplir vos
<code>index.css</code> et <code>index.js</code> avec une gestion d’erreurs autre que des requêtes HTTP
en 404 !</p>
]]></description><link>http://putaindecode.io/fr/articles/wordpress/webpack/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/wordpress/webpack/</guid><pubDate>Tue, 20 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Créer un site web gratuitement avec GitHub Pages]]></title><description><![CDATA[<p>Pour une fois, on ne va pas trop parler de code dans cet article, mais
simplement de comment créer en quelques minutes un site web basique et
l’héberger gratuitement sur la plateforme <a href="http://github.com">github.com</a>.</p>
<p>Transférez cet article à toute personne qui souhaiterait avoir un site web mais
qui pense encore que c’est trop compliqué :)</p>
<p>Dans un premier temps, vous devez simplement avoir quelques connaissances de
base :</p>
<ul>
<li><strong>HTML</strong> : une bonne <a href="https://developer.mozilla.org/fr/docs/Web/Guide/HTML/Introduction">introduction</a></li>
<li><strong>GitHub</strong> : créez un compte gratuit ici : <a href="http://github.com">github.com</a></li>
</ul>
<p>Nous allons utiliser <a href="http://github.com">github.com</a> pour héberger notre
<strong>site web statique</strong> dans un <em>repository</em> (un dossier). Ce service
incontournable permet de stocker le code du site, de le
<a href="https://fr.wikipedia.org/wiki/Logiciel_de_gestion_de_versions">versionner</a>, et
de le publier gratuitement sur Internet dans des conditions optimales
(CDN, anti-DDoS…)</p>
<p><strong>Attention</strong> : tous les fichiers hébergés sur votre compte GitHub gratuit sont
publics, à moins de souscrire à un compte privé payant, donc n’y stockez rien
de sensible/secret.</p>
<h2 id="qu-est-ce-qu-un-site-web-statique"><a class="markdownIt-Anchor" href="#qu-est-ce-qu-un-site-web-statique">#</a> Qu’est-ce qu’un site web statique ?</h2>
<p>Pour la plupart des sites, les solutions de blog (CMS de type WordPress et
autres) sont largement surdimensionnées. Elles requièrent un hébergement
particulier (PHP ou autre), des connaissances techniques pour l’installation,
et surtout une maintenance à moyen/long-terme à cause des mises à jour
de sécurité surprises et autres correctifs de bugs à appliquer.</p>
<p>Or, il est possible de créer des sites webs modernes et performants qui n’ont
pas besoin de code côté serveur (donc pas de PHP), et peuvent donc être hébergés
n’importe où, et à moindre coût. Le code du site sera uniquement composé de
HTML, CSS et JavaScript, et s’exécutera directement dans le navigateur du
visiteur, ce qui présente de nombreux avantages :</p>
<ul>
<li>simple et efficace</li>
<li>pas de maintenance</li>
<li>pas de risque de hacking</li>
<li>performances optimales</li>
<li>liberté totale</li>
</ul>
<p>De plus, en 2015, n’importe quel service en ligne digne de ce nom propose une
<a href="https://www.mashape.com">API</a> qui permet d’intégrer directement sur votre site
des fonctionnalités tierces, sans avoir besoin de code côté serveur, donc cette
approche pure <strong>client-side</strong> n’a <strong>pas de limites</strong>.</p>
<p>Dans ce premier article nous allons voir comment créer un site web basique à
base de HTML/CSS, mais nous verrons par la suite comment utiliser un
<a href="http://staticgen.com">générateur de site web statique</a> pour créer des sites
webs plus avancés.</p>
<h2 id="cr-er-le-repository-github"><a class="markdownIt-Anchor" href="#cr-er-le-repository-github">#</a> Créer le repository GitHub</h2>
<p>Créez votre compte GitHub, puis un nouveau <em>repository</em> pour votre site web :
<a href="https://github.com/new">https://github.com/new</a> (exemple : supersite)</p>
<p>Le repository sera créé à cette adresse :
<a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a></p>
<h2 id="cr-er-un-site-web-avec-github-page-generator"><a class="markdownIt-Anchor" href="#cr-er-un-site-web-avec-github-page-generator">#</a> Créer un site web avec <em>GitHub page generator</em></h2>
<p>Grâce aux templates par défaut, créez votre site <em>single-page</em> en 3 clics.</p>
<p>Allez sur la page du projet :  <a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a></p>
<ul>
<li>Puis <strong>Repository settings</strong> (icône en bas à droite)</li>
<li><strong>Automatic page generator</strong> puis <strong>Launch</strong></li>
<li>Éditez le texte du site</li>
<li>Sélectionnez votre template préféré puis <strong>Publish Page</strong></li>
</ul>
<p>Attendez quelques secondes et allez sur : <a href="http://USERNAME.github.io/supersite">http://USERNAME.github.io/supersite</a> pour découvrir le résultat final.</p>
<p><strong>✔</strong> Site web en ligne et dispo pour le monde entier :)</p>
<h2 id="modifier-le-site-en-ligne"><a class="markdownIt-Anchor" href="#modifier-le-site-en-ligne">#</a> Modifier le site en ligne</h2>
<p>Allez sur la page du projet, <a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a>.</p>
<p>C’est ici que l’on retrouve tout le code et les fichiers du site.</p>
<p>Cliquez sur le fichier à modifier, typiquement <code>index.html</code> qui est la page
d’accueil, cliquez sur l’icône “crayon” en haut à droite pour éditer le fichier
et appliquez vos changements.</p>
<p>Une fois les changements effectués, complétez le formulaire “Commit changes”
en-dessous, avec un titre explicite permettant d’identifier votre modification.</p>
<p>Exemple : “Ajout des infos de contact”.</p>
<p>Cliquez sur <strong>Commit changes</strong>, attendez quelques secondes et allez sur
<a href="http://USERNAME.github.io/supersite">http://USERNAME.github.io/supersite</a>
pour admirer les changements.</p>
<p><strong>✔</strong> Site web mis à jour :)</p>
<h2 id="diter-le-site-sur-son-ordinateur"><a class="markdownIt-Anchor" href="#diter-le-site-sur-son-ordinateur">#</a> Éditer le site sur son ordinateur</h2>
<p>Pour pouvoir éditer plus facilement le site, ajouter/modifier des fichiers…
vous pouvez le récupérer sur votre machine, et vous pourrez alors utiliser
votre <a href="http://atom.io">éditeur de texte préféré</a> pour le modifier.</p>
<p>Installez et configurez l’application GitHub : <a href="http://mac.github.com">mac.github.com</a>
ou <a href="http://windows.github.com">windows.github.com</a></p>
<ul>
<li><strong>Clone</strong> : va rapatrier les fichiers de votre site sur votre ordinateur</li>
<li><strong>Éditez</strong> les fichiers directement</li>
<li><strong>Testez</strong> si le site fonctionne comme prévu</li>
<li>Puis choisissez <strong>Commit</strong> pour enregistrer vos modifications</li>
<li>Et enfin <strong>Sync</strong> pour renvoyer vos fichiers sur GitHub et mettre à jour
le site pour le reste du monde.</li>
</ul>
<p><strong>✔</strong> Site web mis à jour :)</p>
<h2 id="tester-le-site-sur-votre-machine"><a class="markdownIt-Anchor" href="#tester-le-site-sur-votre-machine">#</a> Tester le site sur votre machine</h2>
<p>Vous pouvez ouvrir le fichier <code>index.html</code> dans un navigateur pour voir le
résultat.</p>
<p><strong>Note :</strong> Si vous avez ajouté Google Maps ou une API JavaScript, vous devrez
lancer un serveur web pour pouvoir voir le résultat. Par exemple, lancez
<code>python -m SimpleHTTPServer</code> dans votre terminal depuis le dossier du site
(où se trouve <code>index.html</code>) puis ouvrez <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a> dans votre navigateur.
(Ceci est dû à une <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Same_origin_policy_for_JavaScript">restriction de sécurité</a>)</p>
<h2 id="installer-un-superbe-template"><a class="markdownIt-Anchor" href="#installer-un-superbe-template">#</a> Installer un superbe template</h2>
<p>Si vous voulez des templates différents de ceux proposés par GitHub,
vous devez simplement remplacer les fichiers présents dans le dossier
du projet.</p>
<p>Choisissez par exemple un des templates gratuits de haute qualité
disponibles sur <a href="http://html5up.net">html5up.net</a> ou sur
<a href="http://pixelarity.com">pixelarity.com</a> (payant).</p>
<p>Téléchargez les sources et placez les fichiers dans votre projet.</p>
<p>Éditez les fichiers, testez, puis commit &amp; sync, et voilà :)</p>
<h2 id="et-apr-s"><a class="markdownIt-Anchor" href="#et-apr-s">#</a> Et après ?</h2>
<ul>
<li>Apprenez la syntaxe Markdown : <a href="https://en.support.wordpress.com/markdown-quick-reference/">réference</a></li>
<li>Apprenez Git : <a href="https://try.github.io">try.github.io</a></li>
<li>Apprenez JavaScript : <a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a>
et <a href="https://ericelliottjs.com/product/programming-javascript-applications-paper-ebook-bundle/">le livre d’Eric Elliott</a></li>
<li>Lisez tous les articles de <a href="/">Putain de code !</a></li>
</ul>
<hr>
<h2 id="faq"><a class="markdownIt-Anchor" href="#faq">#</a> FAQ</h2>
<h3 id="comment-installer-un-nom-de-domaine"><a class="markdownIt-Anchor" href="#comment-installer-un-nom-de-domaine">#</a> Comment installer un nom de domaine ?</h3>
<ul>
<li>Achetez un nom de domaine sur <a href="http://gandi.net">gandi.net</a> ou
un autre fournisseur sérieux (surtout pas chez pas 1&amp;1, lws ou
autre discounter douteux)</li>
<li>Éditez la “Zone DNS” du domaine et suivez les
<a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">instructions GitHub pour DNS</a></li>
<li>ajoutez un fichier <code>CNAME</code> dans votre projet, contenant la ligne
<code>www.myproject.com</code>.</li>
</ul>
<p>Les changements DNS peuvent mettre jusqu’à 24h pour se propager
donc essayez <a href="http://www.myproject.com">www.myproject.com</a> un peu plus tard.</p>
<p>Ces pages d’aide sur GitHub pourront vous être utiles : <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">Custom domain</a>, <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">DNS setup</a>.</p>
<h3 id="comment-ajouter-une-page"><a class="markdownIt-Anchor" href="#comment-ajouter-une-page">#</a> Comment ajouter une page ?</h3>
<p>Pour créer simplement des pages supplémentaires, ajoutez un
nouveau fichier HTML, par exemple <code>produits.html</code>, dans le projet et
faites un lien vers cette page depuis l’index, par exemple
<code>&lt;a href=&quot;produits.html&quot;&gt;Consulter les produits&lt;/a&gt;</code>.</p>
<h3 id="comment-analyser-le-trafic-de-mon-site"><a class="markdownIt-Anchor" href="#comment-analyser-le-trafic-de-mon-site">#</a> Comment analyser le trafic de mon site ?</h3>
<p>Si vous voulez tracker vos visiteurs, savoir d’où ils viennent, ce qu’ils
font et où ils vont, créez un compte sur
<a href="http://www.google.com/analytics">Google Analytics</a> et ajoutez le code de
tracking sur vos pages HTML.</p>
<h3 id="comment-ajouter-une-carte"><a class="markdownIt-Anchor" href="#comment-ajouter-une-carte">#</a> Comment ajouter une carte ?</h3>
<p>Suivez les <a href="http://leafletjs.com/examples/quick-start.html">instructions Leaflet</a>, la cartographie open-source et gratuite qui bénéficie d’une communauté active.</p>
<p>Si vous avez juste besoin d’une carte sous forme d’image fixe, générez le code HTML ici :
<a href="http://staticmapmaker.com">staticmapmaker.com</a> et copiez le code dans votre page.</p>
<h3 id="comment-ajouter-un-syst-me-de-commentaires"><a class="markdownIt-Anchor" href="#comment-ajouter-un-syst-me-de-commentaires">#</a> Comment ajouter un système de commentaires ?</h3>
<p>Créez un compte sur <a href="http://disqus.com">disqus.com</a> et ajoutez le code JavaScript sur
votre page.</p>
<h3 id="comment-ajouter-un-formulaire-de-contact"><a class="markdownIt-Anchor" href="#comment-ajouter-un-formulaire-de-contact">#</a> Comment ajouter un formulaire de contact ?</h3>
<p>Créez un compte sur <a href="http://typeform.com">typeform.com</a>, créez votre formulaire et
ajoutez le code JavaScript “embed” sur votre page.</p>
<p>Vous pouvez aussi créer un compte sur <a href="http://mailchimp.com">mailchimp.com</a>, créer un
formulaire et l’ajouter sur votre page grâce au code “embed”.</p>
<h3 id="comment-recevoir-des-paiements"><a class="markdownIt-Anchor" href="#comment-recevoir-des-paiements">#</a> Comment recevoir des paiements ?</h3>
<p>Créez un compte sur <a href="http://stripe.com">stripe.com</a> et ajoutez le code JavaScript sur
votre page.</p>
<h3 id="qu-est-ce-que-gh-pages"><a class="markdownIt-Anchor" href="#qu-est-ce-que-gh-pages">#</a> Qu’est-ce que gh-pages ?</h3>
<p><code>gh-pages</code> est une branche spéciale de votre code sur GitHub (une version du
code) qui publie et héberge <em>automagiquement</em> votre site.</p>
<h3 id="comment-tre-pr-sent-sur-google"><a class="markdownIt-Anchor" href="#comment-tre-pr-sent-sur-google">#</a> Comment être prêsent sur Google ?</h3>
<p>Créez du contenu de <strong>qualité</strong>, ciblé, <strong>unique</strong> sur Internet et <strong>utile</strong> à
vos visiteurs. Créez du lien avec des sites et communautés sur le même thème.</p>
<p>Naturellement, d’autres sites parleront alors du vôtre, vous enverront des
visiteurs et vous feront monter progressivement dans les résultats au fil des mois.</p>
<hr>
<p>Voilà pour ce premier pas vers le développement web !</p>
<p>Les commentaires ci-dessous sont là pour recevoir vos remarques et questions :)</p>
]]></description><link>http://putaindecode.io/fr/articles/github/pages/site-web-gratuit/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/github/pages/site-web-gratuit/</guid><pubDate>Fri, 31 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Premier exemple d'utilisation de Webpack]]></title><description><![CDATA[<p>Si vous êtes intéressé par
<a href="/fr/articles/js/webpack/">les problématiques que peut résoudre Webpack</a>,
vous serez sûrement intéressé par cette petite configuration détaillée, qui vous
permettra de faire vos premiers pas avec cet outil.</p>
<p>Nous allons mettre en place une configuration assez basique qui
va permettre :</p>
<ul>
<li>d’avoir une partie JavaScript pour votre application/site web,</li>
<li>de consommer vos CSS en tant que modules,</li>
<li>de consommer les assets de vos CSS en tant que module (images, fonts…),</li>
<li>d’avoir un fichier JS, un fichier CSS et vos assets à côté.</li>
</ul>
<p><em>Note: si vous êtes sur une application JavaScript, vous ne serez pas obligé
d’utiliser la partie pour l’extraction de la CSS en fichier.
En effet, Webpack consomme tout ce qui est possible en JavaScript.
Les styles peuvent être introduit via des balises <code>&lt;styles&gt;</code> dynamiquement
(via le <code>style-loader</code>).
L’extraction prend du sens si vous avez un rendu serveur et que vous souhaitez
avoir des styles au plus tôt, via une CSS dediée.</em></p>
<p>La configuration de Webpack se fait via un fichier JavaScript.
Par défaut, il doit être nommé <code>webpack.config.js</code>.
Ne tournons pas autour du pot et voyons un fichier de configuration
correspondant à ce que nous venons de décrire.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">"path"</span>)
<span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">"webpack"</span>)
<span class="hljs-keyword">var</span> ExtractTextPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"extract-text-webpack-plugin"</span>)

<span class="hljs-comment">// on peut passer à notre commande de build l'option --production</span>
<span class="hljs-comment">// on récupère sa valeur ici en tant que booléen</span>
<span class="hljs-keyword">var</span> production = process.argv.indexOf(<span class="hljs-string">"--production"</span>) &gt; -<span class="hljs-number">1</span>

<span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-comment">// nos points d'entrée, par clé</span>
  <span class="hljs-comment">// (on peut en définir plusieurs)</span>
  entry: {
    index: [
      <span class="hljs-string">"./src/index.js"</span>,
    ],
  },

  <span class="hljs-comment">// description de nos sorties</span>
  output: {
    <span class="hljs-comment">// ./dist</span>
    path: path.join(__dirname, <span class="hljs-string">"dist"</span>),
    <span class="hljs-comment">// nous aurons (vu notre point d'entrée)</span>
    <span class="hljs-comment">// - dist/index.js</span>
    filename: <span class="hljs-string">"[name].js"</span>,
    <span class="hljs-comment">// notre base url</span>
    publicPath: <span class="hljs-string">"/"</span>,
  },

  resolve: {
    <span class="hljs-comment">// ici, on peut ajouter nos extensions à résoudre lors d'un require()</span>
    <span class="hljs-comment">// on va rester simple en n'autorisant rien, ou .js(on) (comme en nodejs et</span>
    <span class="hljs-comment">// browserify)</span>
    extensions: [
      <span class="hljs-string">""</span>,
      <span class="hljs-string">".js"</span>,
      <span class="hljs-string">".json"</span>,
    ],
  },

  <span class="hljs-built_in">module</span>: {
    <span class="hljs-comment">// liste de nos loaders</span>
    <span class="hljs-comment">// ! \\ à noter que les loaders sont exécutés en ordre inverse</span>
    <span class="hljs-comment">// les premiers en dernier, en utilisant la sortie du suivant</span>
    loaders: [
      {
        <span class="hljs-comment">// pour tous les fichiers qui finissent par .js</span>
        test: <span class="hljs-regexp">/\.js$/</span>,
        <span class="hljs-comment">// ... en prenant bien soin d'exclure les node_modules</span>
        exclude: <span class="hljs-regexp">/node_modules/</span>,

        <span class="hljs-comment">// on ajoute les loaders babel et eslint</span>
        <span class="hljs-comment">// à vous de voir ce que vous aurez besoin</span>
        <span class="hljs-comment">// ("rien" est une option tout à fait valable si vous codez en ES5</span>
        <span class="hljs-comment">// sans linter)</span>
        loaders: [
          <span class="hljs-string">"babel"</span>,
          <span class="hljs-string">"eslint"</span>,
        ],

        <span class="hljs-comment">// à noter que l'on peut définir les loaders de cette façon</span>
        <span class="hljs-comment">// loader: "babel!eslint",</span>

        <span class="hljs-comment">// à noter aussi, Webpack va tenter de loader des modules ayant dans</span>
        <span class="hljs-comment">// leur nom "-loader". Si ce n'était pas le cas, ou que votre loader</span>
        <span class="hljs-comment">// ne comporte pas -loader, vous pouvez spécifier le nom entier :</span>
        <span class="hljs-comment">// loader: "babel-loader!eslint-loader",</span>
      },
      <span class="hljs-comment">// à l'inverse de node et browserify, Webpack ne gère pas les json</span>
      <span class="hljs-comment">// nativement, il faut donc un loader pour que cela soit transparent</span>
      {
        test: <span class="hljs-regexp">/\.json$/</span>,
        loaders: [
          <span class="hljs-string">"json"</span>,
        ],
      },
      {
        <span class="hljs-comment">// pour nos CSS, on va utiliser un plugin un peu particulier</span>
        <span class="hljs-comment">// qui va nous permettre de require() nos CSS comme un module</span>
        <span class="hljs-comment">// mais qui va tout de même permettre de sortir tout cela dans un seul</span>
        <span class="hljs-comment">// fichier .css pour la production</span>
        <span class="hljs-comment">// (selon un paramètre qu'on définira ci-dessous)</span>
        test: <span class="hljs-regexp">/\.css$/</span>,
        <span class="hljs-comment">// cette méthode possède 2 paramètres :</span>
        <span class="hljs-comment">// + loaders à utiliser si ce module est désactivé</span>
        <span class="hljs-comment">// + loaders à utiliser dans tous les cas en amont</span>
        loader: ExtractTextPlugin.extract(
          <span class="hljs-comment">// si on extract pas, on utilisera le loader suivant</span>
          <span class="hljs-comment">// (ce module chargera les styles dans des tags &lt;style&gt;, suffisant</span>
          <span class="hljs-comment">// en mode dév)</span>
          <span class="hljs-comment">// en production vous devrez vous charger d'utiliser un</span>
          <span class="hljs-comment">// &lt;link rel="stylesheet" ...</span>
          <span class="hljs-string">"style"</span>,
          <span class="hljs-comment">// dans tous les cas, on utilisera cssnext ainsi que le loader CSS</span>
          <span class="hljs-comment">// de base (celui-ci permet de gérer les ressources dans le CSS</span>
          <span class="hljs-comment">// en temps que modules: images, font etc)</span>
          <span class="hljs-string">"css!cssnext"</span>
        ),
        <span class="hljs-comment">// Si vous n'avez pas besoin d'avoir une CSS à part, vous pouvez</span>
        <span class="hljs-comment">// simplement supprimer la partie "loader" ci-dessus et utiliser plutôt</span>
        <span class="hljs-comment">// loaders: [</span>
        <span class="hljs-comment">//  "style",</span>
        <span class="hljs-comment">//  "css",</span>
        <span class="hljs-comment">//  "cssnext",</span>
        <span class="hljs-comment">// ],</span>
        <span class="hljs-comment">// À noter que dans ce cas, il vous faudra supprimer le plugin</span>
        <span class="hljs-comment">// ExtractTextPlugin dans la liste plus bas</span>
      },
      <span class="hljs-comment">// pour la suite, on va rester simple :</span>
      <span class="hljs-comment">// un require() en utilisant le file-loader retournera une string avec</span>
      <span class="hljs-comment">// le nom du fichier et (le plus important) copiera le fichier suivant</span>
      <span class="hljs-comment">// le paramètre "name" dans l'output.path que nous avons défini tout</span>
      <span class="hljs-comment">// au début de notre configuration.</span>
      <span class="hljs-comment">// Notez qu'il dégagera la partie context du nom lors du retour en string</span>
      <span class="hljs-comment">// et la remplacera par le l'output.path défini pour la copie.</span>
      {
        <span class="hljs-comment">// on chargera tous les formats d'images qui nous intéressent en tant</span>
        <span class="hljs-comment">// que fichiers.</span>
        test: <span class="hljs-regexp">/\.(ico|jpe?g|png|gif)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
          <span class="hljs-comment">// Vous remarquerez ici la méthode utilisée pour définir</span>
          <span class="hljs-comment">// des options pour les loaders. Il en existe d'autres avec les</span>
          <span class="hljs-comment">// versions les plus récentes en utilisant la clé "query"</span>
        ],
      },
      {
        <span class="hljs-comment">// idem pour les fonts</span>
        test: <span class="hljs-regexp">/\.(woff|ttf|otf|eot\?#.+|svg#.+)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
        ],
      },
      {
        <span class="hljs-comment">// ici on se permet de loader des fichiers html et txt tels quels</span>
        test: <span class="hljs-regexp">/\.(html|txt)$/</span>,
        loaders: [
          <span class="hljs-string">"file?name=[path][name].[ext]&amp;context=./src"</span>,
        ],
      },
    ],
  },

  <span class="hljs-comment">// en plus des loaders, qui premettent eux de modifier et/ou d'exploiter le</span>
  <span class="hljs-comment">// contenu des modules, nous avons des plugins, plus globaux au processus</span>
  plugins: (
    [
      <span class="hljs-comment">// une partie importante dans notre cas : on active l'extraction CSS (en</span>
      <span class="hljs-comment">// production seulement)</span>
      <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">"[name].css"</span>, {disable: !production}),

      <span class="hljs-comment">// ce plugin permet de transformer les clés passés en dur dans les</span>
      <span class="hljs-comment">// modules ainsi vous pourrez faire dans votre code js</span>
      <span class="hljs-comment">// if (__PROD__) { ... }</span>
      <span class="hljs-keyword">new</span> webpack.DefinePlugin({
        __PROD__: production
      }),
    ]
    <span class="hljs-comment">// en production, on peut rajouter des plugins pour optimiser</span>
    .concat(
      production
      ? [
        <span class="hljs-comment">// ici on rajoute uglify.js pour compresser nos sorties</span>
        <span class="hljs-comment">// (vous remarquerez que certain plugins sont directement livrés dans</span>
        <span class="hljs-comment">// le package webpack).</span>
        <span class="hljs-keyword">new</span> webpack.optimize.UglifyJsPlugin({
          compress: {
            warnings: <span class="hljs-literal">false</span>,
          },
        }),
      ]
      : []
    )
  ),

  <span class="hljs-comment">// certains modules permettent de définir des options en dehors de la</span>
  <span class="hljs-comment">// définition des loaders</span>
  cssnext: {
    sourcemap: !production,
    compress: production,
  },
}</code></pre>
<p><em>Ce fichier est à peu près ce que nous utilisons pour notre site à l’heure où
est écrit cet article.</em></p>
<p>Une fois Webpack mis en place, vous aurez bien moins l’impression de bricoler
surtout quand il s’agit de consommer des assets de modules tiers (par exemple
Font Awesome).</p>
<p>Sachez que vous pouvez très facilement écrire vos propres loaders pour wrapper
l’utilisation d’un outil qui n’aurait pas encore de loader.
<a href="https://github.com/cssnext/cssnext-loader/blob/master/index.js">Exemple du loader cssnext</a>.</p>
<h2 id="utilisation"><a class="markdownIt-Anchor" href="#utilisation">#</a> Utilisation</h2>
<p>Il y a plusieurs façon d’utiliser maintenant notre configuration, la plus simple
étant surement via CLI :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>npm install webpack
<span class="hljs-variable">$ </span>webpack</code></pre>
<p>Cela devrait suffire à s’occuper de notre configuration. Cette commande comporte
bien entendu tout un tas d’options qui correspondent souvent à ce que nous
avons défini juste avant.
Cela étant dit, il parait plus maintenable de gérer une fichier plutôt qu’une
ligne de commande de 3 km.</p>
<p>Vous devriez avoir ainsi tout le résultat dans <code>dist/</code>.</p>
<p><em>Note: Si vous rencontrez des erreurs du type
<code>Error: Cannot resolve module 'file'</code>, c’est tout simplement que vous n’avez pas
installé les loaders nécessaire. En l’occurence il faudrait installer le
<code>file-loader</code>.</em></p>
<p>Pour avoir tous les loaders nécessaires comme dans l’exemple ci-dessus:</p>
<pre><code class="language-console">$ npm <span class="hljs-tag">i</span> -D babel-loader eslint-loader babel-eslint
$ npm <span class="hljs-tag">i</span> -D json-loader
$ npm <span class="hljs-tag">i</span> -D style-loader css-loader cssnext-loader
$ npm <span class="hljs-tag">i</span> -D file-loader</code></pre>
<p><em>Note à propos de babel et eslint: pour le moment, il vous faudra spécifier dans
votre configuration eslint: <code>parser: babel-eslint</code>.</em></p>
<p>Il y a tout un tas de façon d’utiliser Webpack via une tripotée de plugins
(Gulp, Grunt, etc.) mais nous allons voir justement ici comment ne pas avoir
recours à ces solutions, ce qui nous permettra ainsi de s’alléger.</p>
<h3 id="utilisation-en-d-veloppment"><a class="markdownIt-Anchor" href="#utilisation-en-d-veloppment">#</a> Utilisation en développment</h3>
<p>Webpack CLI possède une option <code>--watch</code> qui va surveiller les sources et mettre
à jour tout le nécessaire à la moindre modification.
À la différence de browserify, cette fonctionnalité est dans le core et très
bien intégré.
De plus, le cache de Webpack est plutôt bien foutu. La première compilation peut
paraître un peu lente, mais la suite est vraiment au top.</p>
<pre><code class="language-console">$ webpack <span class="hljs-comment">--watch -d</span></code></pre>
<p>L’option <code>-d</code> permet d’activer les source maps.</p>
<p>À côté de ces options, Webpack va plus loin.</p>
<p>En développement, nous avons besoin de servir toutes les ressources que notre
processus va gérer.
Plutôt que d’utiliser le système de fichier classique, abusé par Grunt et tout
de même utilisé par Gulp &amp; co, Webpack fournit un <code>webpack-dev-server</code>.</p>
<p>Ce petit serveur local permettra de servir tout ce dont nous avons besoin
(nos JS, CSS, images, etc.) sans avoir recours au système de fichiers.</p>
<p>Comme pour la commande <code>webpack</code>, le serveur de développement propose aussi
une CLI basée sur l’option <code>--watch</code> mais sans l’inconvénient de l’écriture sur
disque :</p>
<pre><code class="language-console">$ webpack-dev-server <span class="hljs-comment">--content-base dist/</span></code></pre>
<p><em>Source: <a href="http://webpack.github.io/docs/webpack-dev-server.html">http://webpack.github.io/docs/webpack-dev-server.html</a></em></p>
<p>Une fois que votre serveur est démarré, pourrez tester que votre point d’entrée
marche avec <code>http://localhost:8080/index.js</code>.</p>
<p>Il existe bien entendu une API, que nous utilisons à l’heure actuelle sur notre
site, afin d’ajuster notre configuration Webpack en développement, pour
d’ajouter des fonctionnalités comme le “hot loading”.</p>
<p>Vous avez à votre disposition
<a href="https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/webpack-dev-server.js">notre script dev-server</a>
(écrit en ES6/7), ainsi que son utilisation
<a href="https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/build.js#L154-L159">dans notre build</a>.</p>
<p><em>Note : pour avoir une éventuelle version plus à jour, regardez l’historique de
ces fichiers au cas où nous ayons poussé des ajustements (ou remplacer le hash
par “master” dans l’url et priez).</em></p>
<h4 id="hot-re-loading"><a class="markdownIt-Anchor" href="#hot-re-loading">#</a> Hot (re)loading</h4>
<p>Ce serveur possède bien entendu des fonctionnalités similaires au classique
“livereload”, appelé <em>hot mode</em> (ou hot loading).</p>
<p>Tout comme pour le livereload, il faut intégrer dans sa page un script
particulier. Il y a plusieurs façons de faire :</p>
<ul>
<li>intégrer <code>http://localhost:8080/webpack-dev-server.js</code> via un tag script</li>
<li>ajouter <code>webpack/hot/dev-server</code> dans les tableaux des points d’entrées</li>
</ul>
<p><em>Source: <a href="http://webpack.github.io/docs/webpack-dev-server.html#hot-mode">http://webpack.github.io/docs/webpack-dev-server.html#hot-mode</a></em></p>
<p>Notre script dev-server référencé juste avant s’occupe d’ajouter la ressource
automatiquement en mode dev.</p>
<p>À la différence d’un simple livereload, ce hot loading permet des choses qu’on
aurait jusqu’alors pas vraiment imaginées, comme du hot reload de JavaScript de
composant React (sans rafraichissment complet de page, donc sans perte d’état).</p>
<p><strong>Vous êtes invité à regarder la vidéo que vous trouverez sur la page du
<a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>.</strong></p>
<p>Nous n’irons pas plus loin sur ce hot mode, car il nécessiterait un articlé dédié
(non pas que ce soit compliqué mais plus parce que c’est un sujet à part).</p>
<h3 id="utilisation-en-production"><a class="markdownIt-Anchor" href="#utilisation-en-production">#</a> Utilisation en production</h3>
<pre><code class="language-console">$ webpack <span class="hljs-comment">--production</span></code></pre>
<p>Notre configuration détecte l’option <code>--production</code> et ajuste déjà en
conséquence.
Il faut éventuellement utiliser la variable prévue pour ajuster vos loaders s’il
propose des options d’optimisation.</p>
<p>Maintenant, il n’y aura plus qu’à voir tout le résultat dans <code>dist/</code>.</p>
<hr>
<p>Nous avons vu ici un exemple assez simple qui peut être utilisé pour un site web
ou une appplication simple.</p>
<p>Une question se pose alors :</p>
<blockquote>
<p>À la vue de ce que peut gérer Webpack et ses loaders, est-il pertinent de
continuer à utiliser des task runners pour nos assets et compagnie ?</p>
</blockquote>
<p><strong>La réponse est non.</strong> 😱</p>
<p>Vous verrez assez rapidement que vous devriez pourvoir tout jeter à la poubelle.
Sans trop de regrets, puisque Webpack va vous permettre de consommer tout ce que
nous avions l’habitude de bricoler / copier / ajuster…</p>
<p>Nous l’avons fait pour notre site, pourquoi pas vous ?</p>
<p>Et notre interface n’as pas changé d’un poil puisque nous utilisons toujours les
mêmes commandes via les
<a href="https://docs.npmjs.com/misc/scripts">npm scripts</a>:</p>
<ul>
<li><code>npm start</code> pour dév</li>
<li><code>npm run build --production</code> avant de déployer en production.</li>
</ul>
<p>Il existe encore beaucoup de leviers à toucher dans le cas
d’applications full JavaScript afin d’améliorer bien des points.</p>
<p>Vous trouverez facilement tout un tas de
<a href="https://duckduckgo.com/?q=webpack+boilerplate">boilerplates Webpack</a>
avec des améliorations diverses et variées selon vos besoins.</p>
<p>Soyez curieux !</p>
]]></description><link>http://putaindecode.io/fr/articles/js/webpack/premier-exemple/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/webpack/premier-exemple/</guid><pubDate>Tue, 21 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Webpack]]></title><description><![CDATA[<h1 id="pourquoi-webpack"><a class="markdownIt-Anchor" href="#pourquoi-webpack">#</a> Pourquoi Webpack ?</h1>
<p>Webpack a pour objectif de vous faciliter la vie, notamment en vous aidant à
organiser <a href="/fr/articles/frontend/2015-etat-lieux-javascript-modulaire/">votre application JS en modules</a>.
Le projet est déjà très populaire, particulièrement dans la communauté React, ce qui
parait logique vu qu’il s’agit de développer des composants.</p>
<p>Webpack apporte à ce niveau des fonctionnalités intéressantes :</p>
<ul>
<li>disposer de toutes les ressources statiques (CSS, images, fontes) en tant que
module,</li>
<li>intégrer et consommer des bibliothèques tierces très simplement en tant
que module,</li>
<li>séparer votre <code>build</code> en plusieurs morceaux, chargés à la demande,</li>
<li>garder un chargement initial très rapide si besoin,</li>
<li>personnaliser la plupart des étapes du processus,</li>
<li>adapté pour les gros projets.</li>
</ul>
<p>Avant Webpack, nous avions beau avoir des super task-runners comme
<a href="/fr/articles/js/grunt/">Grunt</a>
ou
<a href="/fr/articles/js/gulp/">Gulp</a>,
il faut avouer qu’on bricolait quand même pas mal.</p>
<p>Et vous avez sûrement mieux à faire que de devoir modifier des configurations ou
des définitions de tâches pour ajuster les copies d’images ou de fontes, ou
encore ajuster des URL générées.
Il y avait avec ces solutions une grande partie de rafistolage, où l’on se
devait de faire très attention à la moindre réorganisation de code, sous peine
de casser une partie du rendu.</p>
<p>Prenons par exemple une image de fond déclarée en CSS via un
<code>background: url(...)</code>.
Qui vous préviendra lorsque celle-ci aura été supprimée ou déplacée,
et que la référence n’est donc plus bonne ?
Peut-être vos logs de serveur web ? En recherchant les erreurs HTTP 404…</p>
<p>Vous avez la responsabilité de gérer vos tâches et leurs résultats tout en vous
assurant du bon fonctionnement car vous êtes la glu entre tous ces morceaux.</p>
<h1 id="qu-est-ce-que-webpack"><a class="markdownIt-Anchor" href="#qu-est-ce-que-webpack">#</a> Qu’est-ce que Webpack ?</h1>
<p>Pas besoin de s’appeler Einstein pour comprendre les intentions de Webpack en
interprétant le nom : web + pack. Faire un pack prêt pour le web.</p>
<p>Nativement, Webpack s’occupe uniquement de ressources JavaScript.
Webpack propose un système de <em>loader</em> qui permet de transformer tout et
n’importe quoi en JavaScript (mais pas que).
Ainsi, tout est consommable en tant que module.</p>
<p>Webpack prend à charge la fonction <code>require()</code> (connue et utilisée dans node.js et
browserify) et permet de définir des nouveaux comportements.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.js"</span>)
<span class="hljs-comment">// "classique" pour ceux qui utilisent node.js/browserify</span>

<span class="hljs-comment">// nouveauté avec Webpack</span>
<span class="hljs-keyword">var</span> myStyles = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.css"</span>)
<span class="hljs-comment">// si vous utilisez le css-loader par exemple, toutes les directives url()</span>
<span class="hljs-comment">// se comporteront comme des require(), ainsi, vous pourrez appliquer</span>
<span class="hljs-comment">// des loaders sur tous vos assets et vous aurez des erreurs à la compilation</span>
<span class="hljs-comment">// si une ressource est manquante.</span>

<span class="hljs-comment">// vous pourrez aussi consommer des SVG en tant que chaînes (eg: raw-loader)</span>
<span class="hljs-keyword">var</span> mySVG = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./my-module.svg"</span>)

<span class="hljs-comment">// ou inclure des fichiers dans votre build (via file-loader)</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">"index.html"</span>)</code></pre>
<p>C’est cette partie qui est aujourd’hui la plus intéressante et la plus flexible.</p>
<figure>
  <img src="index.jpg" alt="" />
  <figcaption>
    Webpack transforme une multitude de fichiers en lots par responsabilité
  </figcaption>
</figure>
<p>Webpack va donc pouvoir s’occuper aussi bien de vos modules JavaScript
(CommonJS, AMD, UMD…),
mais aussi de <a href="https://github.com/css-modules/css-modules">vos modules CSS</a>,
de vos fichiers SVG, gif, png, etc. ainsi que potentiellement n’importe quel
type de fichier pour peu que vous preniez le temps d’écrire un <em>loader</em>
(rassurez-vous, il existe déjà un loader pour tous les fichiers que vous
manipulez couramment).</p>
<p>En plus de cela, il a été pensé afin de permettre la séparation de votre pack
(votre gros fichier JavaScript compilé) en plusieurs morceaux, selon vos
besoins : vous pourrez ainsi ajuster la balance entre performance et lazy
loading.</p>
<p>Avec les solutions existantes, il est actuellement très difficile d’arriver
facilement à ce que propose Webpack, pour ne pas dire impossible.</p>
<p>Il est possible d’avoir l’équivalent avec
<a href="/fr/articles/js/browserify/">browserify</a> comme l’a indiqué son auteur
dans un article
<a href="https://gist.github.com/substack/68f8d502be42d5cd4942">browserify for Webpack users</a>
(qui est une réponse à la ressource
<a href="https://github.com/webpack/docs/wiki/webpack-for-browserify-users">Webpack for browserify users</a>
).</p>
<p>Il est clair que cela n’est pas aussi simple qu’avec Webpack qui est beaucoup
plus flexible de par sa conception et ses objectifs initiaux.</p>
<p>Par exemple, browserify pourra appliquer d’éventuelles transformations
uniquement au code local et donc pas dans <code>node_modules/*</code>.
Cela peut être problématique et nous conduit forcément à finir par du
bricolage si on veut consommer des assets de modules de manière transparente.</p>
<p>Ne parlons pas du
<a href="http://webpack.github.io/docs/hot-module-replacement-with-webpack.html">hot loading</a>
(remplacement de code à la volée)
qui n’est pas du tout facile à mettre en place (pour le moment) avec
autre chose que Webpack.</p>
<h1 id="comment-int-grer-webpack-dans-votre-workflow"><a class="markdownIt-Anchor" href="#comment-int-grer-webpack-dans-votre-workflow">#</a> Comment intégrer Webpack dans votre workflow ?</h1>
<p>Dans un premier temps vous pourrez facilement intégrer Webpack en remplacement de
<a href="/fr/articles/js/browserify/">browserify</a> ou d’une éventuelle
concaténation via des plugins Gulp, Grunt, etc.</p>
<p>Dans un second temps, vous pourrez très certainement remplacer une partie de vos
autres tâches pour ajuster/copier/déplacer vos assets (CSS, images…) et
ainsi réduire le code dédié à votre workflow. Il se pourrait alors que votre
utilisation d’un task-runner soit maintenant si réduite que vous pourriez vous
en passez en utilisant simplement
<a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">des scripts npm</a>.</p>
<p>Si jamais vous êtes limité, <a href="/fr/articles/npm/utilitaire-cli/">vous pourrez bien entendu créer votre propre
commande</a>, qui sera réutilisable dans
n’importe quel contexte.</p>
<h1 id="webpack-en-pratique"><a class="markdownIt-Anchor" href="#webpack-en-pratique">#</a> Webpack en pratique</h1>
<p>Quelques ressources pour vous y mettre :</p>
<ul>
<li>Un premier <a href="/fr/articles/js/webpack/premier-exemple">exemple détaillé de configuration et d’utilisation</a>
basé sur notre retour d’expérience.</li>
</ul>
<p>En anglais :</p>
<ul>
<li><a href="http://webpack.github.io/docs/tutorials/getting-started/">Tutoriel officiel</a></li>
<li><a href="http://okonet.ru/viennajs-webpack-introduction/">Slides d’introduction</a></li>
<li><a href="https://github.com/petehunt/webpack-howto">“How to” webpack</a></li>
</ul>
<p><a href="http://webpack.github.io/docs">Webpack possède une documentation</a>
assez fournie, mais pas vraiment facile à aborder lorsqu’on découvre le projet.
Aussi, n’hésitez pas à nous poser vos questions en commentaires.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/webpack/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/webpack/</guid><pubDate>Mon, 20 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les Dockerfiles]]></title><description><![CDATA[<p>Dans <a href="/fr/articles/docker/">l’article précédent</a>, je vous ai
présenté le fonctionnement de base de Docker. Mais cela vous limitait à
l’usage des images que vous pouviez trouver sur le <a href="https://registry.hub.docker.com/">Docker
Hub</a>. Afin de vraiment pouvoir utiliser
Docker au maximum, il serait appréciable de pouvoir créer des images adaptées à
nos projets et c’est là l’utilité des Dockerfiles.</p>
<h1 id="les-dockerfiles"><a class="markdownIt-Anchor" href="#les-dockerfiles">#</a> Les Dockerfiles</h1>
<p>Les Dockerfiles sont des fichiers qui permettent de construire une image Docker
adaptée à nos besoins, étape par étape. Rentrons dans le vif du sujet en créant
une image permettant de lancer un projet JavaScript.</p>
<p>Pour commencer, créez un nouveau fichier <code>Dockerfile</code> à la racine de votre
projet.</p>
<p>La première chose à faire dans un Dockerfile est de définir de quelle image
vous héritez. Pour cet exemple, je vous propose d’utiliser une image de Debian
comme base (ce qui est une bonne pratique, car cette image
est plutôt légère en comparaison avec celle d’Ubuntu par exemple).</p>
<pre><code><span class="hljs-tag">FROM</span> <span class="hljs-tag">debian</span><span class="hljs-pseudo">:jessie</span></code></pre>
<p><code>FROM</code> permet de définir notre image de base, vous pouvez l’utiliser uniquement
une fois dans un Dockerfile.</p>
<p>Comme nous voulons créer une image pour une application JavaScript full-stack,
nous devons commencer par installer Node.js. Pour ce faire, on va télécharger
l’archive Node.js directement depuis le site officiel à l’aide de curl que nous
allons aussi devoir installer.</p>
<pre><code><span class="hljs-constant">RUN</span> apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">apt</span>/<span class="hljs-title">lists</span>/*</span>

<span class="hljs-constant">RUN</span> curl -<span class="hljs-constant">LO</span> <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -<span class="hljs-constant">C</span> /usr/local --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz</code></pre>
<p><code>RUN</code> permet d’exécuter une commande à l’intérieur de votre image comme si vous
étiez devant un shell unix.</p>
<p>La première commande nous permet d’installer curl et de nettoyer ensuite le
gestionnaire de paquets afin que notre image soit un peu plus légère.</p>
<p>Avec la deuxième commande, nous téléchargeons le binaire de Node.js que nous
installons ensuite à ça place, et on n’oublie pas de supprimer l’archive
ensuite.</p>
<p>Vous pouvez vous demander pourquoi j’exécute plusieurs commandes sur une même
instruction <code>RUN</code> ? Eh bien, cela permet simplement de limiter le nombre
d’instructions dans votre Dockerfile ce qui rendra votre image finale plus
légère.</p>
<p>Maintenant, nous allons ajouter les sources de notre projet dans l’image et
télécharger nos dépendances.</p>
<pre><code><span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/</span></code></pre>
<p><code>ADD</code> permet d’ajouter des fichiers locaux ou distants à l’intérieur de votre
image, il est le plus souvent utilisé pour importer les sources de votre projet
ou des fichiers de configuration.</p>
<p><code>WORKDIR</code> permet de changer le répertoire courant de votre image, toutes les
commandes qui suivront seront exécutées à partir de ce répertoire.</p>
<p>Avec la dernière instruction, nous ajoutons les sources de notre projet à
l’intérieur de l’image, mais vous allez vous demander pourquoi nous ne l’avons
pas fait en même temps que l’ajout des fichiers de dépendances. Eh bien, cela
nous permet d’économiser beaucoup de temps !</p>
<p>Quand Docker crée une nouvelle image à partir d’un Dockerfile, il exécute chaque
instruction dans un conteneur, et le résultat de cette instruction est
sauvegardé sous forme de couche. Au final, une image est un assemblage de
plusieurs couches (une par instruction). Et donc, quand vous reconstruisez une
image pour la seconde fois, les instructions qui n’impliquent pas de changements
ne sont pas réexécutées, car la couche est récupérée depuis l’image précédente. Par
contre, si l’instruction implique un changement quelconque, elle est réexécutée
ainsi que toutes les instructions suivantes.</p>
<p>Dans notre cas, les sources auront tendance à beaucoup changer, et donc ne pas
retélécharger les dépendances à chaque changement dans le code est un réel gain
de temps !</p>
<p>Maintenant, nous allons indiquer quel port et dossier nous souhaitons partager
avec l’extérieur du conteneur.</p>
<pre><code><span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">3000</span>

<span class="hljs-built_in">VOLUME</span> <span class="bash">/app/<span class="hljs-built_in">log</span></span></code></pre>
<p><code>EXPOSE</code> et <code>VOLUME</code> permettent respectivement d’indiquer quel port et quel
dossier nous souhaitons partager.</p>
<p>Et pour finir, nous pouvons indiquer quelle instruction doit s’exécuter au
lancement de votre conteneur grâce à l’instruction <code>CMD</code>.</p>
<pre><code>CMD <span class="hljs-keyword">node</span><span class="hljs-identifier"> </span><span class="hljs-title">server</span>.js</code></pre>
<p>Voici un résumé de notre Dockerfile :</p>
<pre><code><span class="hljs-comment"># Image de base</span>
<span class="hljs-built_in">FROM</span> debian:jessie

<span class="hljs-comment"># Installation de curl avec apt-get</span>
<span class="hljs-built_in">RUN</span> <span class="bash">apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/lib/apt/lists/*
</span>
<span class="hljs-comment"># Installation de Node.js à partir du site officiel</span>
<span class="hljs-built_in">RUN</span> <span class="bash">curl -LO <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span> --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz
</span>
<span class="hljs-comment"># Ajout du fichier de dépendances package.json</span>
<span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-comment"># Changement du repertoire courant</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-comment"># Installation des dépendances</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-comment"># Ajout des sources</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/
</span>
<span class="hljs-comment"># On expose le port 3000</span>
<span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">3000</span>

<span class="hljs-comment"># On partage un dossier de log</span>
<span class="hljs-built_in">VOLUME</span> <span class="bash">/app/<span class="hljs-built_in">log</span>
</span>
<span class="hljs-comment"># On lance le serveur quand on démarre le conteneur</span>
<span class="hljs-built_in">CMD</span> <span class="bash">node server.js</span></code></pre>
<p>Avant de transformer ce Dockerfile en une image, vous devez créer un fichier de
plus, le <code>.dockerignore</code>, ce fichier permet comme un <code>.gitignore</code> de ne pas
inclure certain fichiers dans votre image Docker, et c’est très important afin
d’éviter d’inclure les dépendances de votre projet dans votre image
(<code>node_modules</code> dans notre cas) qui sont propres à votre
système, mais pas au système du conteneur. Voici à quoi votre <code>.dockerignore</code>
doit ressembler :</p>
<pre><code><span class="hljs-tag">node_modules</span>
<span class="hljs-class">.git</span></code></pre>
<p>Pour transformer ce Dockerfile en une image Docker, vous devez utiliser cette
commande :</p>
<pre><code class="language-console">$ docker build -t fullstack-js .
Sending build context to Docker daemon 4.381 MB
Sending build context to Docker daemon
Step 0 : FROM debian:jessie
 -<span class="ruby">--&gt; bf84c1d84a8f
</span>Step 1 : RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">93258459</span>a279
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>fffcf3749a2
</span>Removing intermediate container 93258459a279
Step 2 : RUN curl -LO "https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz" &amp;&amp; tar -xzf node-v0.12.5-linux-x64.tar.gz -C /usr/local --strip-components=1 &amp;&amp; rm node-v0.12.5-linux-x64.tar.gz
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> a3a17d584bae
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>eaa62ace8de
</span>Removing intermediate container a3a17d584bae
Step 3 : ADD *.json /app/
 -<span class="ruby">--&gt; <span class="hljs-number">1</span>e8ffd7e10a8
</span>Removing intermediate container 5db20e8b8ed2
Step 4 : WORKDIR /app
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">7</span>b84b06642b1
</span> -<span class="ruby">--&gt; <span class="hljs-number">9</span>c0e2287c34d
</span>Removing intermediate container 7b84b06642b1
Step 5 : RUN npm install
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0523</span>df6e9aac
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">6</span>d7327ebee3<span class="hljs-number">0</span>
</span>Removing intermediate container 0523df6e9aac
Step 6 : ADD . /app
 -<span class="ruby">--&gt; <span class="hljs-number">13</span>bdbe70c6fa
</span>Removing intermediate container 3c83d82c1d53
Step 7 : EXPOSE 3000
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">51</span>e252173b12
</span> -<span class="ruby">--&gt; <span class="hljs-number">6</span>c62eb1197e2
</span>Removing intermediate container 51e252173b12
Step 8 : VOLUME /app/log
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">4</span>af0bb73307b
</span> -<span class="ruby">--&gt; <span class="hljs-number">15</span>b6190de473
</span>Removing intermediate container 4af0bb73307b
Step 9 : CMD node server.js
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">9522</span>c6b9bf95
</span> -<span class="ruby">--&gt; aaf20fb25dac
</span>Removing intermediate container 9522c6b9bf95
Successfully built aaf20fb25dac</code></pre>
<p>L’option <code>-t</code> permet de nommer votre image docker, ce qui vous servira lorsque
vous voudrez lancer votre conteneur. Et le <code>.</code> est le repertoire où se trouve
le Dockerfile, dans notre cas le dossier courant.</p>
<p>Maintenant, vous pouvez lancer votre conteneur de cette manière :</p>
<pre><code class="language-console">$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> -p 3000:3000 -v $(<span class="hljs-keyword">pwd</span>)/<span class="hljs-keyword">log</span>:/<span class="hljs-keyword">app</span>/<span class="hljs-keyword">log</span> fullstack-js</code></pre>
<p>Cette commande permet de lancer notre image en partageant le port et un dossier
avec votre ordinateur, si vous voulez plus de détails sur le fonctionnement du
client Docker, je vous invite à lire mon <a href="/fr/articles/docker/">article
précédent</a>.</p>
<hr>
<p>Dans cet article, vous avez pu voir comment créer votre propre Dockerfile,
maintenant vous pouvez créer des images Docker parfaitement adaptées à votre
projet, et même plus. En cherchant sur Internet, vous pourrez trouver des images
Docker pour tout et n’importe quoi, comme des images pour lancer Chrome dans un
conteneur par exemple. Pour en savoir plus, je vous redirige vers le
blog de <a href="https://blog.jessfraz.com/post/docker-containers-on-the-desktop/">Jessie
Frazelle</a>.</p>
<p>Dans le prochain article, je vous parlerai de docker-compose, un outil qui
permet de lancer des applications multi-conteneurs facilement.</p>
]]></description><link>http://putaindecode.io/fr/articles/docker/dockerfile/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/docker/dockerfile/</guid><pubDate>Thu, 02 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[SemVer, c'est quoi ?]]></title><description><![CDATA[<p><em>Ce post a été largement inspiré de la mauvaise expérience que j’ai pu avoir
avec l’évolution de <a href="http://backbonejs.org/">Backbone.js</a> qui, ne respectant pas SemVer, m’a posé des
problèmes lors de mise à jour de versions. Les node_modules (dépendances de
dépendances) sont aussi en question.</em></p>
<p>Depuis quelques temps, vous devez entendre le terme <strong>SemVer</strong> par-ci par-là
mais peut-être que vous ne savez pas ce que c’est ou que vous ne savez pas
comment l’appliquer. Et je vous comprends, j’ai mis un peu de temps à maitriser
le sujet.</p>
<p>Pour faire simple, <strong>SemVer</strong> (voulant dire <em>Semantic Versioning</em>) est une
gestion sémantique des versions. En d’autres termes, une façon de numéroter les
versions de manière logique, cohérente, parlante, ayant du sens. Ce n’est
cependant pas forcément une norme, vous n’êtes pas obligé(e) de la respecter
mais ce serait vraiment, vraiment dommage car il tend justement à l’être.</p>
<p>Mais tout d’abord, posons les bases, qu’est-ce qu’une version ?</p>
<p>Une version s’applique à un produit, une application, une bibliothèque, un OS,
tout ce qui a une progression en informatique. Cela permet de définir
l’avancement du produit. La majorité du temps (sauf pour quelques hérétiques),
cela s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code>, <code>Y</code> et <code>Z</code> sont des entiers (pas
forcément des chiffres d’ailleurs, cela peut être supérieur à 9) soit <code>1.0.10</code>
par exemple. Il est possible que vous voyiez cette forme <code>vX.Y.Z</code> comme <code>v1.0.10</code>
mais en toute franchise, je ne l’apprécie pas. J’aime que mon tag équivaille à
ma version en elle-même. Purement personnel.</p>
<p>Maintenant que nous savons ce qu’est une version, voyons voir ce qu’est
réellement <strong>SemVer</strong>.</p>
<p><strong>SemVer</strong> est un moyen cohérent, pertinent de nommer ses versions afin de
savoir rapidement quelles modifications ont été apportées à votre projet.</p>
<p>Voyons voir ce que dit la documentation officielle de
<a href="http://semver.org/lang/fr/">SemVer</a></p>
<blockquote>
<p>Étant donné un numéro de version MAJEUR.MINEUR.CORRECTIF, il faut incrémenter :</p>
</blockquote>
<blockquote>
<p>le numéro de version MAJEUR quand il y a des changements
rétro-incompatibles,<br>
le numéro de version MINEUR quand il y a des changements rétro-compatibles,<br>
le numéro de version de CORRECTIF quand il y a des corrections d’anomalies
rétro-compatibles</p>
</blockquote>
<blockquote>
<p>Des libellés supplémentaires peuvent être ajoutés pour les versions de
pré-livraison et pour des méta-données de construction sous forme d’extension du
format MAJEURE.MINEURE.CORRECTIF.</p>
</blockquote>
<p>On comprend effectivement l’idée de <strong>SemVer</strong> (et la suite du site explique
comment l’appliquer) mais je trouve que l’on peut mieux expliquer.</p>
<p>Pour comprendre <strong>SemVer</strong>, il faut se mettre dans la peau de l’utilisateur qui
va se servir de votre production.</p>
<p>En effet, <strong>SemVer</strong> est un contrat que vous signez avec vos utilisateurs, une
forme de respect qui leur permet d’adapter leur code ou non en fonction des
versions que vous proposez.</p>
<p>Si je devais définir à quelqu’un ce qu’est <strong>SemVer</strong>, je lui dirais ceci :</p>
<blockquote>
<p>SemVer s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code> est “majeur”, <code>Y</code> est “mineur”,
<code>Z</code> est “patch”.</p>
</blockquote>
<blockquote>
<p>Qu’est-ce que cela veut dire. Cela veut dire que si vous avez corrigé un bug
dans votre lib et que cela n’affecte en rien le code écrit par votre
utilisateur, alors incrémentez <code>Z</code> (+0.0.1).</p>
</blockquote>
<blockquote>
<p>Si vous avez fait des ajouts dans votre app qui peuvent être intéressants pour
l’utilisateur et mérite une certaine attention afin d’améliorer le code qui
utilise votre lib, alors incrémentez <code>Y</code> (+0.1.0).</p>
</blockquote>
<blockquote>
<p>Si en revanche, vous avez cassé ne serait-ce qu’une partie de l’API (“breaking
changes”), que vous avez <em>juste</em> changé des noms de méthodes / fonctions déjà
existantes (et donc sûrement utilisées par quelqu’un d’autre), que finalement
cela nécessite <strong>forcément</strong> une modification de la part de l’utilisateur sous
peine que sa propre app ne fonctionne plus, alors incrémentez <code>X</code> (+1.0.0).</p>
</blockquote>
<p>C’est vraiment une question de respect envers qui vous proposez votre lib. Par
<strong>SemVer</strong>, je vous informe des potentielles modifications ou lectures de
documentation que vous devez faire. Il ne faut vraiment pas voir ça comme une
évolution de votre propre code.</p>
<p>Par exemple, vous avez refactorisé tout votre code mais l’API n’a pas changé.
Alors <code>Z</code> suffit. Et si vous avez ajoutez des méthodes, c’est plutôt <code>Y</code>.
Pourtant il y a eu une quantité phénoménale de code modifié. Des lignes et des
lignes. Est-ce pour autant que vous devez incrémentez <code>X</code> ? Non. Surtout lorsque
les tests automatisés n’ont pas été modifiés et passent toujours.</p>
<p>En revanche, vous ne faites qu’une petite modification de nom de méthode qui ne
vous semble pas appropriée, ça ne vous prend qu’une ligne de modification, vous
pourriez croire que c’est uniquement <code>Z</code> à changer ? Non plus. Là, vous modifiez
le contrat que l’utilisateur a acquiescé en utilisant votre lib ; vous avez
alors la responsabilité de lui indiquer que son code doit absolument changer
sinon celui-ci ne marchera plus correctement.</p>
<p>En bref, ne voyez pas l’évolution de votre projet avec <strong>SemVer</strong> mais le
contrat que vous signez implicitement avec vos utilisateurs.</p>
<p>Oh et oui, surtout, surtout, ce n’est pas parce que vous êtes arrivé(e) à <code>9</code>
dans <code>Y</code> ou <code>Z</code> que le nombre le précédant doit augmenter. Par exemple <em>mineur</em>
sur <code>1.9.0</code> ? Alors <code>1.10.0</code> et non <code>2.0.0</code>.</p>
<p>J’espère qu’avec ceci, vous vous sentirez plus à l’aise.</p>
<h2 id="tips-npm"><a class="markdownIt-Anchor" href="#tips-npm">#</a> Tips npm</h2>
<p>Avec npm, il est possible de mettre à jour rapidement son <code>package.json</code> et tag
git en utilisant la commande <code>$ npm version</code>. Comme ceci :</p>
<pre><code class="language-console">$ npm version (major|<span class="hljs-string">minor</span>|<span class="hljs-string">patch)</span></code></pre>
<p>Cela vous incrémentera le <code>package.json</code>  et vous fera un beau commit + tag dans
git tel que :</p>
<pre><code class="language-console">* b474d9c (HEAD -&gt; master, tag: <span class="hljs-number">1.5</span><span class="hljs-number">.3</span>, origin/master) <span class="hljs-number">1.5</span><span class="hljs-number">.3</span>`.</code></pre>
<p>Et pour éviter d’avoir le “v” dans les tags git qui est par défaut dans npm,
faites :</p>
<pre><code class="language-console">$ npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">tag</span>-<span class="hljs-keyword">version</span>-prefix <span class="hljs-string">""</span></code></pre>
<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog">#</a> Changelog</h2>
<p><strong>SemVer</strong> va de pair avec les <a href="http://keepachangelog.com/">changelog</a>. Mettre à
jour le changelog vous permet d’indiquer très rapidement ce qui a été modifié
sans que l’utilisateur ait forcément à regarder votre code. Il est surtout très
important lors d’ajouts de fonctionnalités ou de modifications (majeures et
mineures) afin de voir directement les méthodes / fonctions affectées mais aussi
dans le cas d’un patch de voir le gain obtenu de cette nouvelle mise à jour. À
ajouter directement dans le <code>README.md</code> à la fin ou carrément dans un fichier ou
des fichiers dédiés à ça.
Voici un <a href="https://github.com/cssnext/cssnext/blob/master/CHANGELOG.md">exemple</a>.</p>
<hr>
<p>Stay safe, use <strong>SemVer</strong>.</p>
<p>Ressources :</p>
<ul>
<li><a href="http://semver.org/">site officiel</a></li>
<li><a href="http://semver-ftw.org/">semver-ftw</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/semver/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/semver/</guid><pubDate>Tue, 16 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction à Docker]]></title><description><![CDATA[<p>Avant de vous parler de Docker je vais vous raconter une histoire que tout
développeur a vécu au moins une fois.</p>
<p>Il était une fois un jeune développeur qui codait tranquillement sur son
ordinateur. Il était pressé car comme tout étudiant qui se
respecte il devait présenter son travail le lendemain matin. Après des heures de
travail, l’application était là, et elle fonctionnait à merveille ! Le
lendemain, notre codeur arriva tout fier pour sa présentation, avec son projet
sur une clé usb. Il le transfère sur l’ordinateur de son pote et là, ça
ne fonctionne pas !</p>
<h2 id="quel-est-le-probl-me"><a class="markdownIt-Anchor" href="#quel-est-le-probl-me">#</a> Quel est le problème ?</h2>
<p>L’application de notre jeune développeur ne fonctionne pas sur l’ordinateur de son ami à cause d’un problème d’environnement. Entre deux systèmes, il
peut y avoir des différences de version sur les dépendances ou encore des
bibliothèques manquantes.</p>
<p>Ici, notre problème se limite à 2 systèmes, mais imaginez une équipe de 10
personnes avec des ordinateurs sous OS X, Linux ou même Windows, un serveur de
test sous Ubuntu 12.04, et un serveur de production sous CentOS 7.
S’assurer que leur application fonctionne bien sur tous ces environnements peut
s’avérer être un vrai cauchemar !</p>
<p>Mais il existe des solutions et parmi l’une d’entre elles nous avons…</p>
<h2 id="docker"><a class="markdownIt-Anchor" href="#docker">#</a> Docker</h2>
<h3 id="c-est-quoi-docker"><a class="markdownIt-Anchor" href="#c-est-quoi-docker">#</a> C’est quoi Docker ?</h3>
<p>Docker est une plateforme qui va vous permettre d’exécuter votre code à
l’intérieur d’un conteneur indépendamment de la machine sur laquelle vous êtes !
Un conteneur ressemble à une machine virtuelle sauf qu’il n’embarque pas tout un
système d’exploitation avec lui ce qui lui permet de s’exécuter en quelque
secondes et d’être beaucoup plus léger.</p>
<p>Docker peut donc résoudre notre problème d’environnement, car quelle que soit la
machine que nous utiliserons, le code s’exécutera de la même manière.</p>
<p>La plateforme Docker est composée de deux éléments :</p>
<ul>
<li>Le démon Docker qui s’exécute en arrière-plan et qui s’occupe de gérer vos
conteneurs</li>
<li>Le client Docker qui vous permet d’interagir avec le démon par l’intermédiaire
d’un outil en ligne de commande</li>
</ul>
<p>Si vous voulez plus d’informations sur le fonctionnement interne de Docker je
vous redirige vers l’article du site officiel : <a href="https://docs.docker.com/introduction/understanding-docker">Understanding
Docker</a></p>
<h3 id="comment-l-installer"><a class="markdownIt-Anchor" href="#comment-l-installer">#</a> Comment l’installer ?</h3>
<p>Le client Docker fonctionne sur tous les systèmes d’exploitation. En revanche,
le démon Docker utilise des fonctionnalités du noyau Linux afin de gérer
les conteneurs. Il ne fonctionne donc que sur Linux. Heureusement la majorité des
serveurs utilise Linux, et pour vos ordinateurs sous OS X, ou même Windows, il
existe une solution.</p>
<p>Si vous utilisez une machine avec une distribution Linux vous pourrez lancer le
démon Docker directement sur cette dernière, par contre avec Windows ou OS X
vous devrez lancer le démon dans une machine virtuelle, mais rassurez-vous,
c’est très simple !</p>
<p>Pour le guide d’installation de Docker en fonction de votre système je vous
redirige de nouveau vers le site officiel : <a href="https://docs.docker.com/installation/#installation">Guide
d’installation</a></p>
<h3 id="un-premier-exemple"><a class="markdownIt-Anchor" href="#un-premier-exemple">#</a> Un premier exemple</h3>
<p>Avant de commencer, vous allez devoir télécharger une image Docker qui servira
de base à vos prochains conteneurs.</p>
<p>Pour cet exemple, on va partir d’une image Ubuntu :</p>
<pre><code class="language-console">$ docker pull <span class="hljs-string">ubuntu:</span>trusty
<span class="hljs-string">trusty:</span> Pulling from ubuntu
<span class="hljs-string">e9e06b06e14c:</span> Pull complete
<span class="hljs-string">a82efea989f9:</span> Pull complete
<span class="hljs-number">37</span><span class="hljs-string">bea4ee0c81:</span> Pull complete
<span class="hljs-number">07</span><span class="hljs-string">f8e8c5e660:</span> Already exists
<span class="hljs-string">ubuntu:</span><span class="hljs-string">trusty:</span> The image you are pulling has been verified. <span class="hljs-string">Important:</span> image verification is a tech preview feature and should not be relied on to provide security.
<span class="hljs-string">Digest:</span> <span class="hljs-string">sha256:</span><span class="hljs-number">014</span>fa1d5b72b4fe0ec2b4642610fbbfdd52f502da8e14e80de07bd1dd774e4ef
<span class="hljs-string">Status:</span> Downloaded newer image <span class="hljs-keyword">for</span> <span class="hljs-string">ubuntu:</span>trusty</code></pre>
<p>Cette commande va télécharger depuis le Docker Hub l’image de la version 14.04
(trusty) d’Ubuntu. Il existe bien d’autres images que vous pourrez trouver
<a href="https://registry.hub.docker.com">sur le registry Docker</a>.</p>
<p>Pour voir les images que vous avez téléchargées, utilisez cette commande :</p>
<pre><code class="language-console">$ docker images
REPOSITORY    TAG       IMAGE ID        CREATED       VIRTUAL SIZE
ubuntu        trusty    <span class="hljs-number">07f</span>8e8c5e660    <span class="hljs-number">4</span> weeks ago   <span class="hljs-number">188.3</span> MB</code></pre>
<p>Sur ma machine, l’image d’Ubuntu fais 188.3 MB, je vous avais dit que c’était
léger en comparaison à une machine virtuelle !</p>
<p>Maintenant, nous allons lancer un conteneur et rentrer à l’intérieur :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>docker run -it <span class="hljs-symbol">ubuntu:</span>trusty bash
root<span class="hljs-variable">@2cdceb5ff771</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span></code></pre>
<p>Cette commande crée un conteneur à partir de l’image <code>ubuntu:trusty</code>, y lance le
programme <code>bash</code> et y attache votre shell grâce aux options <code>-it</code></p>
<p>Vous pouvez maintenant exécuter les commandes que vous voulez, elle
s’exécuteront à l’intérieur du conteneur, par exemple :</p>
<pre><code class="language-console">root@<span class="hljs-number">2</span>cdceb5ff771:/<span class="hljs-comment">#</span>
$ apt-<span class="hljs-keyword">get</span> moo
                 (__)
                 (oo)
           /<span class="hljs-comment">------\/</span>
          / |    ||
         *  /\<span class="hljs-comment">---/\</span>
            ~~   ~~
...<span class="hljs-string">"Have you mooed today?"</span>...</code></pre>
<p>Vous pouvez quitter le conteneur en faisant un <code>Ctrl-d</code></p>
<p>Maintenant que vous êtes retourné sur votre machine, vous pouvez afficher la
liste des conteneurs lancés avec cette commande :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>docker ps
<span class="hljs-constant">CONTAINER</span> <span class="hljs-constant">ID</span>    <span class="hljs-constant">IMAGE</span>   <span class="hljs-constant">COMMAND</span>   <span class="hljs-constant">CREATED</span>   <span class="hljs-constant">STATUS</span>    <span class="hljs-constant">PORTS</span>   <span class="hljs-constant">NAMES</span></code></pre>
<p>Il n’y a rien ? C’est normal ! En quittant le conteneur ce dernier s’est arrêté
aussi. Pour l’afficher quand même, il suffit d’entrer cette commande :</p>
<pre><code class="language-console">$ docker ps -a
CONTAINER ID    IMAGE           COMMAND   CREATED         STATUS                    PORTS   NAMES
<span class="hljs-number">2</span>cdceb5ff771    ubuntu:trusty   <span class="hljs-string">"bash"</span>    <span class="hljs-number">12</span> <span class="hljs-function">minutes ago  <span class="hljs-title">Exited</span> <span class="hljs-params">(<span class="hljs-number">0</span>)</span> 2 minutes ago          loving_newton</span></code></pre>
<p>Et pour supprimer ce conteneur ?</p>
<pre><code class="language-console">$ docker rm <span class="hljs-number">2</span>cdc
<span class="hljs-number">2</span>cdc</code></pre>
<p>Évidemment, remplacez ‘2cdc’ par le <code>CONTAINER ID</code> approprié.</p>
<p>Passons maintenant à un deuxième exemple plus concret avec une application web.</p>
<h2 id="un-deuxi-me-exemple-avec-node-js"><a class="markdownIt-Anchor" href="#un-deuxi-me-exemple-avec-node-js">#</a> Un deuxième exemple avec Node.js</h2>
<p>Pour commencer, vous allez récupérer l’image docker officiel de Node.js en
faisant :</p>
<pre><code class="language-console">$ docker pull <span class="hljs-string">node:</span><span class="hljs-number">0.12</span><span class="hljs-number">.4</span>
<span class="hljs-number">0.12</span><span class="hljs-number">.4</span>: Pulling from node
<span class="hljs-number">7711</span><span class="hljs-string">db4bb553:</span> Pull complete
<span class="hljs-string">d1744e6e9471:</span> Pull complete
<span class="hljs-number">9332645</span><span class="hljs-string">b03a3:</span> Pull complete
<span class="hljs-string">a52a290821b3:</span> Pull complete
<span class="hljs-number">3575</span><span class="hljs-string">f1347ce7:</span> Already exists
<span class="hljs-number">39</span><span class="hljs-string">bb80489af7:</span> Already exists
<span class="hljs-string">df2a0347c9d0:</span> Already exists
<span class="hljs-number">7</span><span class="hljs-string">a3871ba15f8:</span> Already exists
<span class="hljs-string">a2703ed272d7:</span> Already exists
<span class="hljs-string">c9e3effdd23a:</span> Already exists
<span class="hljs-string">node:</span><span class="hljs-number">0.12</span><span class="hljs-number">.4</span>: The image you are pulling has been verified. <span class="hljs-string">Important:</span> image verification is a tech preview feature and should not be relied on to provide security.
<span class="hljs-string">Digest:</span> <span class="hljs-string">sha256:</span><span class="hljs-number">81</span>fb0812dd5e81f768773a121c8a6daced36893210c5ed50b504c4abcb04e10c
<span class="hljs-string">Status:</span> Downloaded newer image <span class="hljs-keyword">for</span> <span class="hljs-string">node:</span><span class="hljs-number">0.12</span><span class="hljs-number">.4</span></code></pre>
<p>Puis créez un fichier <code>server.js</code> avec le contenu suivant :</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>)

<span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>{
  res.end(<span class="hljs-string">'Coucou depuis Docker'</span>)
});

server.listen(<span class="hljs-number">3000</span>)</code></pre>
<p>Et maintenant, pour lancer notre application à l’intérieur d’un conteneur, vous
devez faire :</p>
<pre><code class="language-console">$ docker run -d --name <span class="hljs-keyword">node</span><span class="hljs-identifier"></span><span class="hljs-title">-app</span> -p <span class="hljs-number">3000</span>:<span class="hljs-number">3000</span> -v $(pwd):/app <span class="hljs-keyword">node</span><span class="hljs-identifier"></span><span class="hljs-title">:0</span>.<span class="hljs-number">12.4</span> <span class="hljs-keyword">node</span><span class="hljs-identifier"> </span><span class="hljs-title">/app</span>/server.js
e9ca3cd8f90b8554ca99ec8ba15a039f827005bd8fecbf80d72ce7267006a6df</code></pre>
<p>Si vous vous rendez sur <code>localhost:3000</code> (ou l’IP de la VM si êtes sur Windows
ou Mac), vous verrez : ‘Coucou depuis Docker’</p>
<p>C’est beau, mais comment ça marche ? Examinons les options une par une :</p>
<ul>
<li><code>-d</code> : cette option permet de lancer le conteneur en mode démon et donc de
tourner en tâche de fond à la différence de <code>-it</code> qui lançait le conteneur au
premier plan et nous donnait un accès direct au conteneur.</li>
<li><code>--name node-app</code> : cette option permet simplement de nommer notre conteneur,
ce qui peut servir pour l’arrêter et le relancer plus simplement (et à d’autres
choses plus complexes dont je parlerai dans un prochain article).</li>
<li><code>-p 3000:3000</code> : cette option permet de partager le port de votre machine avec
le port du conteneur. Le premier nombre est le port de votre machine et le
deuxième le port dans le conteneur.</li>
<li><code>-v $(pwd):/app</code> : cette option permet de partager un dossier avec votre
conteneur, ici, nous partageons le dossier courant (où se trouve notre fichier
<code>server.js</code>) avec le dossier <code>/app</code> dans le conteneur (attention si vous êtes
sur Mac ou Windows uniquement votre ‘home’ est partagé).</li>
<li><code>node:0.12.4</code> : l’image Docker que vous voulez utiliser.</li>
<li><code>node /app/server.js</code> : la commande à exécuter dans le conteneur.</li>
</ul>
<p>Et maintenant ? Vous pouvez afficher le conteneur en faisant : <code>docker ps</code>, l’arrêter
avec : <code>docker stop node-app</code> et le supprimer avec <code>docker rm node-app</code>.</p>
<hr>
<p>Dans cet article, nous avons vu comment récupérer des images Docker depuis le
Docker Hub et comment les instancier afin de créer des conteneurs. Mais pour aller
plus loin, ce serait bien si nous pouvions créer nos propres images, c’est ce que
nous apprendrons à faire à l’aide des Dockerfile dans le prochain article.</p>
]]></description><link>http://putaindecode.io/fr/articles/docker/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/docker/</guid><pubDate>Thu, 11 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les webhooks GitHub]]></title><description><![CDATA[<p>Vous avez pu lire récemment une <a href="/fr/articles/ci/deploiement-continu/">introduction sur l’intégration
continue</a> qui mène vers <a href="/fr/articles/ci/">le déploiement
continu</a>. Si vous utilisez GitHub pour héberger vos
sources et que vous cherchez un moyen très simple (peut-être un peu trop) de
mettre en place le déploiement continu <em>sans serveur d’intégration continue
dédié</em>, alors les webhooks peuvent répondre parfaitement à votre besoin.</p>
<h2 id="les-quoi"><a class="markdownIt-Anchor" href="#les-quoi">#</a> Les quoi ?</h2>
<p>Les webhooks permettent de lancer une action de façon automatique par
l’intermédiaire d’un ou plusieurs événements depuis un dépôt
<a href="http://github.com">GitHub</a>. Concrètement, il va être possible de déployer son
projet sur un serveur de production, sauvegarder son site Internet, ou même
mettre à jour des stats dès qu’un commit sera envoyé ou même une issue ouverte.
Il est possible de faire tout ce que l’on veut dans la limite de son imagination
comme l’explique GitHub.</p>
<h2 id="comment-a-marche"><a class="markdownIt-Anchor" href="#comment-a-marche">#</a> Comment ça marche ?</h2>
<p>Le fonctionnement est on ne peut plus simple, un événement (merge, push, release
etc.) va déclencher une requête HTTP POST vers l’URL que vous avez configurée.
Le reste de l’exécution se fera sur le serveur où pointe l’URL, libre à vous
d’écrire le script que vous voulez pour effectuer les opérations que vous
souhaitez.</p>
<p>Il faut cependant être conscient que la simplification a un coût, à savoir que
même si une PR ou un commit venaient à rendre inopérant votre projet l’événement
se lancerait quand même.</p>
<h2 id="la-mise-en-place"><a class="markdownIt-Anchor" href="#la-mise-en-place">#</a> La mise en place</h2>
<p>Seul le propriétaire d’un dépôt dispose des droits nécessaires pour configurer
un webhook. Il suffit pour cela de se rendre dans <code>Settings</code> puis <code>Webhooks &amp; Services</code> :</p>
<p><img src="setting_webhook.jpg" alt="Settings Webhooks GitHub"></p>
<p>Un petit clic sur <code>Add webhook</code> et vous obtenez une interface encore une fois
très simple :</p>
<p><img src="configuration_webhook.jpg" alt="Configuration Webhooks GitHub"></p>
<p>Cette interface se compose de trois parties :</p>
<ol>
<li>l’URL vers laquelle votre requête sera lancée</li>
<li>une secret key pour sécuriser votre requête</li>
<li>l’événement qui va déclencher votre requête</li>
</ol>
<p>La partie événement est relativement complète et là encore vous disposez de
trois possibilités :</p>
<ol>
<li>se déclenche au push</li>
<li>se déclenche à chaque événement</li>
<li>à vous de choisir les événements (un ou plusieurs) qui vous conviennent</li>
</ol>
<p>Une fois le <em>Webhook</em> activé un premier test ou plus exactement un <code>ping</code> va se
lancer. Il permettra de détecter que votre serveur répond bien à la requête :</p>
<p><img src="test_webhook.jpg" alt="Test Webhooks request GitHub"></p>
<p>La requête envoyée est très basique et embarque un JSON sur les informations de
votre dépôt (description, URL) et une liste des API mises à disposition. Le
reste du travail doit se faire sur votre serveur par l’intermédiaire de votre
API/script, etc.</p>
<p>Voici un petit exemple utilisant <code>express</code> :</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express"</span>)
<span class="hljs-keyword">var</span> app = express()
<span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"body-parser"</span>)
<span class="hljs-keyword">var</span> xhub = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express-x-hub"</span>)

<span class="hljs-comment">//Const</span>
<span class="hljs-keyword">var</span> xhubSecret = <span class="hljs-string">"MySecretKey"</span>
<span class="hljs-keyword">var</span> port = <span class="hljs-string">"8085"</span>
<span class="hljs-keyword">var</span> host = <span class="hljs-string">"localhost"</span>

<span class="hljs-comment">//Secret key</span>
app.use(xhub({ algorithm: <span class="hljs-string">"sha1"</span>, secret: xhubSecret }))

<span class="hljs-comment">// Configure express json</span>
app.use(bodyParser.json())

<span class="hljs-comment">// Main : Start the express http server</span>
<span class="hljs-keyword">var</span> server = app.listen(port, host, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(
    <span class="hljs-string">"App listening at http://%s:%s"</span>,
    server.address().address,
    server.address().port
  )
})

<span class="hljs-comment">// Add default route</span>
app.post(<span class="hljs-string">"/webhook"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{
  <span class="hljs-keyword">if</span>(!req.isXHubValid()){
    res.status(<span class="hljs-number">400</span>).send(<span class="hljs-string">'Invalid X-Hub Request'</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Secret key is invalid"</span>)
    <span class="hljs-keyword">return</span>
  }

  <span class="hljs-keyword">var</span> command = req.headers[<span class="hljs-string">"x-github-event"</span>]

  <span class="hljs-keyword">switch</span>(command) {

    <span class="hljs-comment">//Event create (Branch, or tag created)</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"create"</span>:
      res.send(<span class="hljs-string">"Event create trigger"</span>)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Create event"</span>)
      <span class="hljs-keyword">break</span>

    <span class="hljs-comment">//Event release (Release published in a repository)</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"release"</span>:
      res.send(<span class="hljs-string">"Event release trigger"</span>)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Release Event"</span>)
      <span class="hljs-keyword">break</span>

    <span class="hljs-keyword">default</span>:
      res.status(<span class="hljs-number">400</span>).send(<span class="hljs-string">"Event not supported : "</span> + command)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Event not supported : "</span> + req.headers[<span class="hljs-string">"X-Github-Event"</span>])
  }
})</code></pre>
<p>Pour vous donner une idée de ce que peut envoyer GitHub, voici deux gists :</p>
<ul>
<li><a href="header.txt">Headers</a></li>
<li><a href="payload.json">Payload</a></li>
</ul>
<h2 id="this-is-just-the-beginning"><a class="markdownIt-Anchor" href="#this-is-just-the-beginning">#</a> This is just the beginning</h2>
<p>Cette solution est un début de piste pour le déploiement continu, mais elle ne
doit pas se faire sans une solution de test que ce soit coté GitHub ou coté
serveur.</p>
<p>Si vous souhaitez plus d’informations ou même pousser un peu plus la mise en
place des webhooks, GitHub a comme à son habitude publié un
<a href="https://developer.github.com/webhooks/">guide</a> très bien détaillé et complet.</p>
]]></description><link>http://putaindecode.io/fr/articles/github/webhooks/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/github/webhooks/</guid><pubDate>Tue, 09 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction to cssnext]]></title><description><![CDATA[<p>From <a href="http://cssnext.io/">the official website</a>:</p>
<blockquote>
<p><strong>cssnext</strong> is a CSS transpiler that allows you to use tomorrow’s CSS syntax today. It transforms CSS specs that are not yet implemented in popular browsers into more compatible CSS.</p>
</blockquote>
<h2 id="what-does-it-mean"><a class="markdownIt-Anchor" href="#what-does-it-mean">#</a> What does it mean?</h2>
<p>Since CSS3, you may have heard that CSS is divided into several independent documents called “modules”. Those modules can have different levels of stability and <a href="http://www.w3.org/Style/CSS/current-work#legend">statuses</a>. It can take quite some time for the browsers to implement those modules and even more for the W3C to give them the ultimate status of <a href="http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C">Recommandation</a>.</p>
<p>With <strong>cssnext</strong>, you can use the syntax of <a href="http://www.xanthir.com/b4Ko0">CSS Module Level 4</a> such as <em>custom properties</em> or <em>custom media queries</em>. <strong>cssnext</strong> will transform this new strange syntax into something that the browser can actually understand.</p>
<p>In short, it makes you <strong>taste the future</strong>.</p>
<p>I don’t know about you but speaking as someone who loves to experiment with cutting-edge technologies, I think this is pretty cool!</p>
<p>You should take a look at the <a href="http://cssnext.io/features/">feature list</a>.</p>
<h3 id="what-about-my-current-css-preprocessor"><a class="markdownIt-Anchor" href="#what-about-my-current-css-preprocessor">#</a> What about my current CSS preprocessor?</h3>
<p>Forget about the dangers of mixins, @extend and infinite nesting; mostly caused by overzealous use and/or misuse of such tools, but still.</p>
<p>Guess what, you don’t really need this.</p>
<p>You should give <strong>cssnext</strong> a shot and go back to Vanilla CSS. And with a nice and clean touch of <a href="https://github.com/sturobson/BEM-resources">BEM syntax</a>, you will <a href="http://philipwalton.com/articles/side-effects-in-css/">feel alive again</a>.</p>
<h2 id="examples"><a class="markdownIt-Anchor" href="#examples">#</a> Examples</h2>
<p>Let’s take a look at the features that <strong>cssnext</strong> offers at the moment.</p>
<p>First of all, be sure to check out the <a href="http://cssnext.io/playground/">playground on the official website</a>.</p>
<h3 id="automatic-vendor-prefixes"><a class="markdownIt-Anchor" href="#automatic-vendor-prefixes">#</a> Automatic vendor prefixes</h3>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<p>This will be transformed by <strong>cssnext</strong> via Autoprefixer in:</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
      <span class="hljs-rule"><span class="hljs-attribute">-ms-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> -webkit-transform <span class="hljs-number">1s</span></span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<h3 id="custom-properties-var-limited-to-root"><a class="markdownIt-Anchor" href="#custom-properties-var-limited-to-root">#</a> Custom properties &amp; var() limited to <code>:root</code></h3>
<p>Also known as the much awaited <a href="http://www.w3.org/TR/css-variables/">CSS variables</a>.</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--primary-Color</span>:<span class="hljs-value">                 <span class="hljs-hexcolor">#E86100</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--secondary-Color</span>:<span class="hljs-value">               <span class="hljs-hexcolor">#2c3e50</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--r-Grid-baseFontSize</span>:<span class="hljs-value">           <span class="hljs-number">1rem</span></span></span>;
}</span></code></pre>
<p>You can use them this way:</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--primary-Color)</span></span>;
}</span>
<span class="hljs-class">.h1</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--secondary-Color)</span></span>;
}</span>
<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--r-Grid-baseFontSize)</span></span>;
}</span></code></pre>
<h3 id="custom-media-queries"><a class="markdownIt-Anchor" href="#custom-media-queries">#</a> Custom Media Queries</h3>
<p>Simply-named and semantic aliases (<a href="http://dev.w3.org/csswg/mediaqueries/#custom-mq">check the specs</a>).</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-medium (width &lt;= <span class="hljs-number">40rem</span>)</span>;
<span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-large (max-width: <span class="hljs-number">50em</span>)</span>;</code></pre>
<p>Usage:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-medium) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.2</span>)</span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-large) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.4</span>)</span></span>; }</span>
}</code></pre>
<p>For example, let’s take:</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--fontSize</span>:<span class="hljs-value"> <span class="hljs-number">1.2rem</span></span></span>;
}</span></code></pre>
<p>The output will be:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">40rem</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.44rem</span></span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">50em</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.68rem</span></span></span>; }</span>
}</code></pre>
<h3 id="custom-selectors"><a class="markdownIt-Anchor" href="#custom-selectors">#</a> Custom selectors</h3>
<p>Take a look at the <a href="http://dev.w3.org/csswg/css-extensions/#custom-selectors">specs</a> first.
Let’s say we want to apply some styles to all headings.</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-selector</span> :--heading h1, h2, h3, h4, h5, h6</span>;

<span class="hljs-pseudo">:--heading</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
}</span></code></pre>
<p>This will output the following:</p>
<pre><code class="language-css">h1,
h2,
h3,
h4,
h5,
h6 { margin-top; 0; }</code></pre>
<h3 id="color"><a class="markdownIt-Anchor" href="#color">#</a> <code>color()</code></h3>
<p>A simple <a href="http://dev.w3.org/csswg/css-color/#modifying-colors">color function</a> to apply <em>color adjusters</em> (hue, lightness, tint, and so on) to a base color.</p>
<p>Examples:</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">red</span>(+<span class="hljs-number">30</span>) <span class="hljs-function">green</span>(-<span class="hljs-number">50</span>) <span class="hljs-function">blue</span>(<span class="hljs-number">6%</span>) <span class="hljs-function">alpha</span>(.<span class="hljs-number">65</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">saturation</span>(-<span class="hljs-number">8%</span>) <span class="hljs-function">whiteness</span>(+<span class="hljs-number">50%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">lightness</span>(<span class="hljs-number">5%</span>) <span class="hljs-function">blackness</span>(-<span class="hljs-number">25%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">tint</span>(<span class="hljs-number">80%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">shade</span>(<span class="hljs-number">75%</span>))</span></span>;
}</span></code></pre>
<p>The code above will be transformed into…</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">43</span>, <span class="hljs-number">136</span>, <span class="hljs-number">230</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">73</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0.65</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">181</span>, <span class="hljs-number">201</span>, <span class="hljs-number">222</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">213</span>, <span class="hljs-number">231</span>, <span class="hljs-number">250</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">11</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>)</span></span>;
}</span></code></pre>
<p><strong>cssnext</strong> also offers the following color-related features.</p>
<h4 id="hwb"><a class="markdownIt-Anchor" href="#hwb">#</a> hwb()</h4>
<p>From the <a href="http://dev.w3.org/csswg/css-color/#the-hwb-notation">specifications</a>, HWB (Hue-Whiteness-Blackness) is similar to HSL but easier for humans to work with.</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">hwb</span>(<span class="hljs-number">125</span>, <span class="hljs-number">32%</span>, <span class="hljs-number">47%</span>)</span></span>;
}</span></code></pre>
<p>Output:</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">33</span>, <span class="hljs-number">135</span>, <span class="hljs-number">42</span>)</span></span>;
}</span></code></pre>
<h4 id="gray"><a class="markdownIt-Anchor" href="#gray">#</a> gray()</h4>
<p>Grays are <a href="http://dev.w3.org/csswg/css-color/#grays">so cool</a> they have a function of their own.</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">120</span>, <span class="hljs-number">50%</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">17%</span>, <span class="hljs-number">25%</span>)</span></span>;
}</span></code></pre>
<p>This will output:</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">0.5</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0.25</span>)</span></span>;
}</span></code></pre>
<h4 id="rrggbbaa"><a class="markdownIt-Anchor" href="#rrggbbaa">#</a> #rrggbbaa</h4>
<p><strong>cssnext</strong> transforms the <a href="http://dev.w3.org/csswg/css-color/#hex-notation">hexadecimal notations</a> #RRGGBBAA and #RGBA into rgba().</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#5c69</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#C73D5C59</span></span></span>;
}</span></code></pre>
<p>Output:</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">85</span>, <span class="hljs-number">204</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0.6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">199</span>, <span class="hljs-number">61</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0.34902</span>)</span></span>;
}</span></code></pre>
<h4 id="rebeccapurple"><a class="markdownIt-Anchor" href="#rebeccapurple">#</a> rebeccapurple</h4>
<p>Simply transforms the color <a href="https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-"><code>rebeccapurple</code></a> into <code>rgb(102, 51, 153)</code>.</p>
<h3 id="filter-properties"><a class="markdownIt-Anchor" href="#filter-properties">#</a> filter properties</h3>
<p>A whole <em>new</em> world of <a href="http://www.w3.org/TR/filter-effects/">image modifications</a>!</p>
<pre><code class="language-css"><span class="hljs-class">.awesome-Image</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
}</span>

<span class="hljs-class">.awesome-Picture</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
}</span></code></pre>
<p>Will be transformed into:</p>
<pre><code class="language-css"><span class="hljs-class">.awesome-Image</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">url</span>(<span class="hljs-string">'data:image/svg+xml;charset=utf-8,&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;&lt;filter id="filter"&gt;&lt;feColorMatrix type="matrix" color-interpolation-filters="sRGB" values="0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0" /&gt;&lt;feColorMatrix type="hueRotate" color-interpolation-filters="sRGB" values="23" /&gt;&lt;/filter&gt;&lt;/svg&gt;#filter'</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
}</span>

<span class="hljs-class">.awesome-Picture</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">url</span>(<span class="hljs-string">'data:image/svg+xml;charset=utf-8,&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;&lt;filter id="filter"&gt;&lt;feGaussianBlur stdDeviation="8" /&gt;&lt;/filter&gt;&lt;/svg&gt;#filter'</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
}</span></code></pre>
<h3 id="rem-units"><a class="markdownIt-Anchor" href="#rem-units">#</a> rem units</h3>
<p>Nothing extraordinary here, it generates <strong>pixel fallback for rem units</strong>.
Oh, come on! Do we really need an example for this one? Alright, here you go!</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<p>Output:</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">40px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<h2 id="bonus-features"><a class="markdownIt-Anchor" href="#bonus-features">#</a> Bonus features</h2>
<p>The two following features are not really related to CSS specifications. However, they are definitely worth mentioning in this introduction.</p>
<h3 id="import"><a class="markdownIt-Anchor" href="#import">#</a> <code>import</code></h3>
<p>What if you could import inline local files and modules (<code>node_modules</code> or <code>web_modules</code>) to output a bundled CSS file? Yes, <a href="https://github.com/sass/sass/issues/193">I’m looking at you Sass users</a>, ahem. Well, with <strong>cssnext</strong>, you can.</p>
<h3 id="compress"><a class="markdownIt-Anchor" href="#compress">#</a> <code>compress</code></h3>
<p>As you may have guessed, this is just an option to compress <em>or not</em> your output file. By the way, this option uses <a href="https://github.com/ben-eb/cssnano">cssnano</a>.</p>
<h3 id="usage"><a class="markdownIt-Anchor" href="#usage">#</a> Usage</h3>
<p>Below is a basic example of these two features. I used <a href="https://github.com/cssnext/gulp-cssnext">gulp-cssnext</a>, one of the <a href="http://cssnext.io/setup/">many plugins</a> to help you start with <strong>cssnext</strong>.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>),
    cssnext = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-cssnext"</span>);

gulp.task(<span class="hljs-string">'styles'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  gulp.src(<span class="hljs-string">"css/index.css"</span>)
  .pipe(cssnext({
    compress: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// default is false</span>
  }))
  .pipe(gulp.dest(<span class="hljs-string">"./dist/"</span>))
});</code></pre>
<p>Then, in my <code>index.css</code> file, I will have:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"normalize.css"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/normalize.css/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"cssrecipes-defaults"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/cssrecipes-defaults/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"project-modules/partner"</span></span>; <span class="hljs-comment">/* relative to css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"typo"</span></span>; <span class="hljs-comment">/* same level as my main index.css located in css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"highlight"</span> (min-width: <span class="hljs-number">25em</span>)</span>;</code></pre>
<p>And the final output will be:</p>
<pre><code class="language-css"><span class="hljs-comment">/* content of ./node_modules/normalize.css/index.css */</span>
<span class="hljs-comment">/* content of ./node_modules/cssrecipes-defaults/index.css */</span>
<span class="hljs-comment">/* content of project-modules/partner.css */</span>
<span class="hljs-comment">/* content of typo.css */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">25em</span>) </span>{
  <span class="hljs-comment">/* content of highlight.css */</span>
}</code></pre>
<p>I know the feeling. Now you’re in love too. :)</p>
<p>Well, just to wrap it up here, let’s say that the main purpose of <strong>cssnext</strong> is to build things according to the W3C specifications keeping in mind that, theoretically, it can be removed later on (when not needed anymore).</p>
<p>Meanwhile, there is still work to do: here you can find a <a href="https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+label%3Aready">list of features that are waiting to be implemented</a>.</p>
<p>Now it’s your time to play. Be sure to check the <a href="https://github.com/cssnext/cssnext">GitHub repository</a>, follow <a href="https://twitter.com/cssnext">@cssnext</a> on Twitter to get the latest news and join the <a href="https://gitter.im/cssnext/cssnext">cssnext room on Gitter</a> if you have any questions.</p>
<ul>
<li><a href="http://cssnext.io/">Official website</a></li>
</ul>
]]></description><link>http://putaindecode.io/en/articles/css/preprocessors/cssnext/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/css/preprocessors/cssnext/</guid><pubDate>Tue, 02 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introducción a cssnext]]></title><description><![CDATA[<p>Según la <a href="http://cssnext.io/">página oficial</a>:</p>
<blockquote>
<p><strong>cssnext</strong> es un <em>transpiler</em> que permite utilizar desde hoy la sintaxis CSS del mañana y transformar las especificaciones CSS que aún no están implementadas en los navegadores más populares en CSS compatible.</p>
</blockquote>
<h2 id="qu-significa-esto-exactamente"><a class="markdownIt-Anchor" href="#qu-significa-esto-exactamente">#</a> ¿Qué significa esto exactamente?</h2>
<p>Desde que apareció CSS3, quizás hayas escuchado que el CSS se divide en varios documentos independientes llamados “módulos”. Estos módulos pueden tener diferentes niveles de estabilidad y <a href="http://www.w3.org/Style/CSS/current-work#legend">estados</a>. A los navegadores les puede requirir bastante tiempo poner en práctica dichos módulos y aún más al W3C atribuirles el estado final de <a href="http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C">Recomendación</a>.</p>
<p>Con <strong>cssnext</strong> se puede usar la sintaxis de los <a href="http://www.xanthir.com/b4Ko0">módulos CSS Nivel 4</a>, tales como <em>propiedades personalizadas (custom properties)</em> o <em>media queries personalizados</em>. <strong>cssnext</strong> va a transformar esta nueva y curiosa sintaxis en algo que el navegador será capaz de entender.</p>
<p>En resumen, se <strong>adelanta al futuro</strong>.</p>
<p>No sé vosotros, pero yo me considero alguien a quien le gusta experimentar con las últimas technologías y me parece que ¡esto mola bastante!</p>
<p>No dejéis de echar un vistazo a la <a href="http://cssnext.io/features/">lista de funciones</a>.</p>
<h3 id="y-qu-pasa-con-el-preprocesador-css-que-estoy-utilizando-ahora"><a class="markdownIt-Anchor" href="#y-qu-pasa-con-el-preprocesador-css-que-estoy-utilizando-ahora">#</a> ¿Y qué pasa con el preprocesador CSS que estoy utilizando ahora?</h3>
<p>No os preocupéis más por los peligros de los mixins, @extend y el <em>nesting</em> infinito, en gran parte causados por el uso indebido e innecesario de estas herramientas.</p>
<p>¿Adivinad qué? No necesitáis nada de esto.</p>
<p>Deberiáis probar <strong>cssnext</strong> y volver al Vanilla CSS de toda la vida. Además, con una buena pizca de <a href="https://github.com/sturobson/BEM-resources">metodología BEM</a>, os sentiréis <a href="http://philipwalton.com/articles/side-effects-in-css/">vivos otra vez</a>.</p>
<h2 id="ejemplos"><a class="markdownIt-Anchor" href="#ejemplos">#</a> Ejemplos</h2>
<p>Echemos un vistazo a las funciones que <strong>cssnext</strong> nos ofrece por el momento.</p>
<p>Ante todo, es conveniente consultar el <a href="http://cssnext.io/playground/">playground en la página oficial</a>.</p>
<h3 id="prefijos-de-navegadores-vendor-prefixes-autom-ticos"><a class="markdownIt-Anchor" href="#prefijos-de-navegadores-vendor-prefixes-autom-ticos">#</a> Prefijos de navegadores (vendor prefixes) automáticos</h3>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<p>Esto será transformado por <strong>cssnext</strong> gracias a Autoprefixer en:</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
      <span class="hljs-rule"><span class="hljs-attribute">-ms-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> -webkit-transform <span class="hljs-number">1s</span></span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<h3 id="propiedades-personalizadas-y-var-limitadas-a-root"><a class="markdownIt-Anchor" href="#propiedades-personalizadas-y-var-limitadas-a-root">#</a> Propiedades personalizadas y var() limitadas a <code>:root</code></h3>
<p>También conocidas como las tan esperadas <a href="http://www.w3.org/TR/css-variables/">variables CSS</a>.</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--primary-Color</span>:<span class="hljs-value">                 <span class="hljs-hexcolor">#E86100</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--secondary-Color</span>:<span class="hljs-value">               <span class="hljs-hexcolor">#2c3e50</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--r-Grid-baseFontSize</span>:<span class="hljs-value">           <span class="hljs-number">1rem</span></span></span>;
}</span></code></pre>
<p>Podéis usarlas de esta manera:</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--primary-Color)</span></span>;
}</span>
<span class="hljs-class">.h1</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--secondary-Color)</span></span>;
}</span>
<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--r-Grid-baseFontSize)</span></span>;
}</span></code></pre>
<h3 id="media-queries-personalizadas"><a class="markdownIt-Anchor" href="#media-queries-personalizadas">#</a> Media Queries personalizadas</h3>
<p>Para crear alias semánticos, claros y sencillos (<a href="http://dev.w3.org/csswg/mediaqueries/#custom-mq">aquí tenéis la documentación</a>).</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-medium (width &lt;= <span class="hljs-number">40rem</span>)</span>;
<span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-large (max-width: <span class="hljs-number">50em</span>)</span>;</code></pre>
<p>Uso:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-medium) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.2</span>)</span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-large) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.4</span>)</span></span>; }</span>
}</code></pre>
<p>Por ejemplo, digamos que:</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--fontSize</span>:<span class="hljs-value"> <span class="hljs-number">1.2rem</span></span></span>;
}</span></code></pre>
<p>El código generado sera el siguiente:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">40rem</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.44rem</span></span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">50em</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.68rem</span></span></span>; }</span>
}</code></pre>
<h3 id="selectores-personalizados"><a class="markdownIt-Anchor" href="#selectores-personalizados">#</a> Selectores personalizados</h3>
<p>Primero, podéis echar un ojo a las <a href="http://dev.w3.org/csswg/css-extensions/#custom-selectors">especificaciones</a>.
Pongamos que queremos aplicar estilos a todos los títulos:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-selector</span> :--heading h1, h2, h3, h4, h5, h6</span>;

<span class="hljs-pseudo">:--heading</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
}</span></code></pre>
<p>Esto va a generar el código siguiente:</p>
<pre><code class="language-css">h1,
h2,
h3,
h4,
h5,
h6 { margin-top; 0; }</code></pre>
<h3 id="color"><a class="markdownIt-Anchor" href="#color">#</a> <code>color()</code></h3>
<p>Una sencilla <a href="http://dev.w3.org/csswg/css-color/#modifying-colors">función color</a> para aplicar unos <em>ajustes de color</em> (tono, luminosidad, saturación, entre otros) a un color base.</p>
<p>Ejemplos:</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">red</span>(+<span class="hljs-number">30</span>) <span class="hljs-function">green</span>(-<span class="hljs-number">50</span>) <span class="hljs-function">blue</span>(<span class="hljs-number">6%</span>) <span class="hljs-function">alpha</span>(.<span class="hljs-number">65</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">saturation</span>(-<span class="hljs-number">8%</span>) <span class="hljs-function">whiteness</span>(+<span class="hljs-number">50%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">lightness</span>(<span class="hljs-number">5%</span>) <span class="hljs-function">blackness</span>(-<span class="hljs-number">25%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">tint</span>(<span class="hljs-number">80%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">shade</span>(<span class="hljs-number">75%</span>))</span></span>;
}</span></code></pre>
<p>Este código de arriba será transformado en:</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">43</span>, <span class="hljs-number">136</span>, <span class="hljs-number">230</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">73</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0.65</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">181</span>, <span class="hljs-number">201</span>, <span class="hljs-number">222</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">213</span>, <span class="hljs-number">231</span>, <span class="hljs-number">250</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">11</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>)</span></span>;
}</span></code></pre>
<p><strong>cssnext</strong> también ofrece las siguientes funciones relacionadas con los colores:</p>
<h4 id="hwb"><a class="markdownIt-Anchor" href="#hwb">#</a> hwb()</h4>
<p>Según las <a href="http://dev.w3.org/csswg/css-color/#the-hwb-notation">especificaciones</a>, HWB (Tono-Blancura-Negrura - <em>Hue-Whiteness-Blackness</em>) es similar a HSL, pero resulta más fácil de uso para los humanos.</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">hwb</span>(<span class="hljs-number">125</span>, <span class="hljs-number">32%</span>, <span class="hljs-number">47%</span>)</span></span>;
}</span></code></pre>
<p>Resultado:</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">33</span>, <span class="hljs-number">135</span>, <span class="hljs-number">42</span>)</span></span>;
}</span></code></pre>
<h4 id="gray"><a class="markdownIt-Anchor" href="#gray">#</a> gray()</h4>
<p>Los grises son tan <a href="http://dev.w3.org/csswg/css-color/#grays">guays</a> que tienen incluso una función dedicada.</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">120</span>, <span class="hljs-number">50%</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">17%</span>, <span class="hljs-number">25%</span>)</span></span>;
}</span></code></pre>
<p>Esto dará como resultado:</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">0.5</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0.25</span>)</span></span>;
}</span></code></pre>
<h4 id="rrggbbaa"><a class="markdownIt-Anchor" href="#rrggbbaa">#</a> #rrggbbaa</h4>
<p><strong>cssnext</strong> transforma la <a href="http://dev.w3.org/csswg/css-color/#hex-notation">notación hexadecimal</a> #RRGGBBAA y #RGBA en rgba().</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#5c69</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#C73D5C59</span></span></span>;
}</span></code></pre>
<p>Resultado:</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">85</span>, <span class="hljs-number">204</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0.6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">199</span>, <span class="hljs-number">61</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0.34902</span>)</span></span>;
}</span></code></pre>
<h4 id="rebeccapurple"><a class="markdownIt-Anchor" href="#rebeccapurple">#</a> rebeccapurple</h4>
<p>Transforma el color <a href="https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-"><code>rebeccapurple</code></a> en <code>rgb(102, 51, 153)</code>.</p>
<h3 id="propiedades-de-filtros"><a class="markdownIt-Anchor" href="#propiedades-de-filtros">#</a> Propiedades de filtros</h3>
<p>¡Un <em>nuevo</em> mundo de <a href="http://www.w3.org/TR/filter-effects/">modificaciones de imágenes</a> se abre ante vosotros!</p>
<pre><code class="language-css"><span class="hljs-class">.awesome-Image</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
}</span>

<span class="hljs-class">.awesome-Picture</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
}</span></code></pre>
<p>Lo anterior será transformado en:</p>
<pre><code class="language-css"><span class="hljs-class">.awesome-Image</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">url</span>(<span class="hljs-string">'data:image/svg+xml;charset=utf-8,&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;&lt;filter id="filter"&gt;&lt;feColorMatrix type="matrix" color-interpolation-filters="sRGB" values="0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0" /&gt;&lt;feColorMatrix type="hueRotate" color-interpolation-filters="sRGB" values="23" /&gt;&lt;/filter&gt;&lt;/svg&gt;#filter'</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">sepia</span>(.<span class="hljs-number">7</span>) <span class="hljs-function">hue-rotate</span>(<span class="hljs-number">23deg</span>)</span></span>;
}</span>

<span class="hljs-class">.awesome-Picture</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">url</span>(<span class="hljs-string">'data:image/svg+xml;charset=utf-8,&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;&lt;filter id="filter"&gt;&lt;feGaussianBlur stdDeviation="8" /&gt;&lt;/filter&gt;&lt;/svg&gt;#filter'</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">filter</span>:<span class="hljs-value"> <span class="hljs-function">blur</span>(<span class="hljs-number">8px</span>)</span></span>;
}</span></code></pre>
<h3 id="unidades-rem"><a class="markdownIt-Anchor" href="#unidades-rem">#</a> Unidades rem</h3>
<p>Nada extraordinario aquí, se genera un <strong><em>fallback</em> en píxeles para las unidades en rem</strong>.
Oh, ¡por favor! ¿De verdad necesitáis un ejemplo para esto? Venga, aquí tenéis.</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<p>Resultado:</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">40px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<h2 id="funciones-adicionales"><a class="markdownIt-Anchor" href="#funciones-adicionales">#</a> Funciones adicionales</h2>
<p>Las dos siguientes funciones no tienen mucho que ver con las especificaciones CSS. Sin embargo, merecen ser mencionadas en esta introducción.</p>
<h3 id="import"><a class="markdownIt-Anchor" href="#import">#</a> <code>import</code></h3>
<p>¿Y si pudiérais importar archivos locales y módulos (<code>node_modules</code> o <code>web_modules</code>) para generar un solo y único archivo CSS que los contendría todos? Sí, <a href="https://github.com/sass/sass/issues/193">es a vosotros a quién estoy mirando, utilizadores de Sass</a>, ejem. Bueno pues, con <strong>cssnext</strong> es possible.</p>
<h3 id="compress"><a class="markdownIt-Anchor" href="#compress">#</a> <code>compress</code></h3>
<p>Como ya habréis adivinado, se trata solo una opción para comprimir <em>o no</em> vuestro archivo de salida. Y esto es gracias a <a href="https://github.com/ben-eb/cssnano">cssnano</a>.</p>
<h3 id="uso"><a class="markdownIt-Anchor" href="#uso">#</a> Uso</h3>
<p>Debajo os dejo un ejemplo básico de estas dos funciones. He usado <a href="https://github.com/cssnext/gulp-cssnext">gulp-cssnext</a>, uno de los <a href="http://cssnext.io/setup/">numerosos plugins</a> que os puede ayudar a empezar con <strong>cssnext</strong>.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>),
    cssnext = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-cssnext"</span>);

gulp.task(<span class="hljs-string">'styles'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  gulp.src(<span class="hljs-string">"css/index.css"</span>)
  .pipe(cssnext({
    compress: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// false por defecto</span>
  }))
  .pipe(gulp.dest(<span class="hljs-string">"./dist/"</span>))
});</code></pre>
<p>Después, en mi archivo <code>index.css</code>, obtendría lo siguiente:</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"normalize.css"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/normalize.css/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"cssrecipes-defaults"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/cssrecipes-defaults/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"project-modules/partner"</span></span>; <span class="hljs-comment">/* relativo a css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"typo"</span></span>; <span class="hljs-comment">/* mismo nivel que mi index.css principal, situado en css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"highlight"</span> (min-width: <span class="hljs-number">25em</span>)</span>;</code></pre>
<p>Y el resultado final es:</p>
<pre><code class="language-css"><span class="hljs-comment">/* contenido de ./node_modules/normalize.css/index.css */</span>
<span class="hljs-comment">/* contenido de ./node_modules/cssrecipes-defaults/index.css */</span>
<span class="hljs-comment">/* contenido de project-modules/partner.css */</span>
<span class="hljs-comment">/* contenido de typo.css */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">25em</span>) </span>{
  <span class="hljs-comment">/* contenido de highlight.css */</span>
}</code></pre>
<p>Conozco esa sensación. Vosotros también os habéis enamorado. :)</p>
<p>Bueno, para concluir, digamos que el propósito principal de <strong>cssnext</strong> es el de poder codificar según las especificaciones del W3C, siempre teniendo en cuenta que, teóricamente, será posible quitarlo (cuando ya no sea necesario).</p>
<p>Mientras tanto, sigue habiendo mucho trabajo. Aquí os dejo una <a href="https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+label%3Aready">lista de futuras funciones</a>.</p>
<p>Ahora os toca jugar a vosotros. No os olvidáis de pasaros por el <a href="https://github.com/cssnext/cssnext">repository GitHub</a>, seguir a <a href="https://twitter.com/cssnext">@cssnext</a> en Twitter para obtener las últimas noticias al respecto y uniros a la <a href="https://gitter.im/cssnext/cssnext">room cssnext en Gitter</a> si tenéis cualquier pregunta.</p>
<ul>
<li><a href="http://cssnext.io/">Página oficial</a></li>
</ul>
]]></description><link>http://putaindecode.io/es/articulos/css/procesadores/cssnext/</link><guid isPermaLink="true">http://putaindecode.io/es/articulos/css/procesadores/cssnext/</guid><pubDate>Tue, 02 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction à cssnext]]></title><description><![CDATA[<p>D’après le <a href="http://cssnext.io/">site officiel</a>:</p>
<blockquote>
<p><strong>cssnext</strong> est un transpileur CSS qui vous permet d’utiliser dès aujourd’hui la syntaxe CSS de demain. Il transforme les spécifications CSS qui ne sont pas encore mises en œuvre sur les navigateurs les plus populaires en CSS compatible.</p>
</blockquote>
<h2 id="a-veut-dire-quoi-exactement"><a class="markdownIt-Anchor" href="#a-veut-dire-quoi-exactement">#</a> Ça veut dire quoi exactement ?</h2>
<p>Depuis CSS3, vous avez savez sans doute que CSS est divisé en plusieurs documents indépendants appelés “modules”. Ces modules peuvent avoir différents niveaux de stabilité et différents <a href="http://www.w3.org/Style/CSS/current-work#legend">statuts</a>. La mise en œuvre de ces modules par les navigateurs peut prendre un certain temps et encore plus pour que le W3C les approuve comme <a href="http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C">Recommandation</a>.</p>
<p>Avec <strong>cssnext</strong>, vous pouvez utiliser la syntaxe des <a href="http://www.xanthir.com/b4Ko0">nouveaux modules CSS</a> tels que les <em>propriétés personnalisées (custom properties level 1)</em> ou les <em>media queries personnalisées (custom media queries level 1)</em>. <strong>cssnext</strong> va transformer ces nouvelles et étranges syntaxes en du CSS compréhensible par les navigateurs que vous voulez supporter.</p>
<p>En clair, il vous donne un <strong>avant-goût du futur</strong>.</p>
<p>Je ne sais pas vous mais étant quelqu’un qui aime expérimenter avec les dernières technologies de pointe, je trouve ça plutôt cool !</p>
<p>Je vous conseille de jeter un oeil à la <a href="http://cssnext.io/features/">liste des fonctionnalités</a>.</p>
<h3 id="quid-de-mon-pr-processeur-actuel"><a class="markdownIt-Anchor" href="#quid-de-mon-pr-processeur-actuel">#</a> Quid de mon préprocesseur actuel ?</h3>
<p>Oubliez les risques liés à une abstraction trop élevée des CSS par les pré-processeurs actuels ; certes causés par une (sur-|mauvaise) utilisation de ces outils mais quand même.</p>
<p>Devinez quoi, vous n’en avez pas forcément besoin.</p>
<p>Essayez <strong>cssnext</strong> et retournez à ce bon <s>vieux</s> nouveau CSS. Et avec un zeste de <a href="/fr/articles/css/bem/">méthodologie BEM</a>, vous vous sentirez revivre.</p>
<h2 id="exemples"><a class="markdownIt-Anchor" href="#exemples">#</a> Exemples</h2>
<p>Voyons voir quelles sont les fonctionnalités offertes par <strong>cssnext</strong> pour le moment.</p>
<p>Avant toute chose, vous devriez aller faire un tour sur le <a href="http://cssnext.io/playground/">playground du site officiel</a>.</p>
<h3 id="pr-fixes-propri-taires-automatiques"><a class="markdownIt-Anchor" href="#pr-fixes-propri-taires-automatiques">#</a> Préfixes propriétaires automatiques</h3>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<p>Cela va être transformé par <strong>cssnext</strong> via Autoprefixer en :</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
      <span class="hljs-rule"><span class="hljs-attribute">-ms-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> -webkit-transform <span class="hljs-number">1s</span></span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span></code></pre>
<h3 id="propri-t-s-personnalis-es-et-var-limit-root"><a class="markdownIt-Anchor" href="#propri-t-s-personnalis-es-et-var-limit-root">#</a> Propriétés personnalisées et var() limité à <code>:root</code></h3>
<p>Aussi connues sous le nom des très attendues <a href="http://www.w3.org/TR/css-variables/">variables CSS</a>.</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--primary-Color</span>:<span class="hljs-value">                 <span class="hljs-hexcolor">#E86100</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--secondary-Color</span>:<span class="hljs-value">               <span class="hljs-hexcolor">#2c3e50</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--r-Grid-baseFontSize</span>:<span class="hljs-value">           <span class="hljs-number">1rem</span></span></span>;
}</span></code></pre>
<p>À utiliser de cette façon :</p>
<pre><code class="language-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--primary-Color)</span></span>;
}</span>
<span class="hljs-class">.h1</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--secondary-Color)</span></span>;
}</span>
<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--r-Grid-baseFontSize)</span></span>;
}</span></code></pre>
<h3 id="media-queries-personnalis-es"><a class="markdownIt-Anchor" href="#media-queries-personnalis-es">#</a> Media Queries personnalisées</h3>
<p>Pour créer des alias sémantiques, clairs et simples (<a href="http://dev.w3.org/csswg/mediaqueries/#custom-mq">lisez la doc’</a>).</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-medium (width &lt;= <span class="hljs-number">40rem</span>)</span>;
<span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-large (max-width: <span class="hljs-number">50em</span>)</span>;</code></pre>
<p>Prenons par exemple :</p>
<pre><code class="language-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--fontSize</span>:<span class="hljs-value"> <span class="hljs-number">1.2rem</span></span></span>;
}</span>

<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-medium) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.2</span>)</span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-large) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.4</span>)</span></span>; }</span>
}</code></pre>
<p>Le code généré sera alors :</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">40rem</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.44rem</span></span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">50em</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.68rem</span></span></span>; }</span>
}</code></pre>
<h3 id="s-lecteurs-personnalis-s"><a class="markdownIt-Anchor" href="#s-lecteurs-personnalis-s">#</a> Sélecteurs personnalisés</h3>
<p>Encore une fois, un petit tour sur les <a href="http://dev.w3.org/csswg/css-extensions/#custom-selectors">specs</a> pour commencer. Disons qu’on veuille appliquer des styles à toutes les balises de titre.</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-selector</span> :--heading h1, h2, h3, h4, h5, h6</span>;

<span class="hljs-pseudo">:--heading</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
}</span></code></pre>
<p>Ce qui va générer le code suivant :</p>
<pre><code class="language-css">h1,
h2,
h3,
h4,
h5,
h6 { margin-top; 0; }</code></pre>
<h3 id="color"><a class="markdownIt-Anchor" href="#color">#</a> <code>color()</code></h3>
<p>Une simple <a href="http://dev.w3.org/csswg/css-color/#modifying-colors">fonction color</a> qui sert à appliquer des <em>réglages couleur</em> (teinte, luminosité, entre autres) à une couleur de base.</p>
<p>Exemples :</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">red</span>(+<span class="hljs-number">30</span>) <span class="hljs-function">green</span>(-<span class="hljs-number">50</span>) <span class="hljs-function">blue</span>(<span class="hljs-number">6%</span>) <span class="hljs-function">alpha</span>(.<span class="hljs-number">65</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">saturation</span>(-<span class="hljs-number">8%</span>) <span class="hljs-function">whiteness</span>(+<span class="hljs-number">50%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">lightness</span>(<span class="hljs-number">5%</span>) <span class="hljs-function">blackness</span>(-<span class="hljs-number">25%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">tint</span>(<span class="hljs-number">80%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">shade</span>(<span class="hljs-number">75%</span>))</span></span>;
}</span></code></pre>
<p>Le code ci-dessus sera transformé en…</p>
<pre><code class="language-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">43</span>, <span class="hljs-number">136</span>, <span class="hljs-number">230</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">73</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0.65</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">181</span>, <span class="hljs-number">201</span>, <span class="hljs-number">222</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">213</span>, <span class="hljs-number">231</span>, <span class="hljs-number">250</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">11</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>)</span></span>;
}</span></code></pre>
<p><strong>cssnext</strong> propose aussi les fonctionalités suivantes liées à la couleur.</p>
<h4 id="hwb"><a class="markdownIt-Anchor" href="#hwb">#</a> hwb()</h4>
<p>D’après les <a href="http://dev.w3.org/csswg/css-color/#the-hwb-notation">spécifications</a>, HWB (Hue-Whiteness-Blackness) est similaire à la notation HSL mais plus facile à utiliser pour les humains.</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">hwb</span>(<span class="hljs-number">125</span>, <span class="hljs-number">32%</span>, <span class="hljs-number">47%</span>)</span></span>;
}</span></code></pre>
<p>Rendu :</p>
<pre><code class="language-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">33</span>, <span class="hljs-number">135</span>, <span class="hljs-number">42</span>)</span></span>;
}</span></code></pre>
<h4 id="gray"><a class="markdownIt-Anchor" href="#gray">#</a> gray()</h4>
<p>Les gris sont <a href="http://dev.w3.org/csswg/css-color/#grays">tellement cool</a> qu’ils ont une fonction rien que pour eux.</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">120</span>, <span class="hljs-number">50%</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">17%</span>, <span class="hljs-number">25%</span>)</span></span>;
}</span></code></pre>
<p>Ce qui donnera :</p>
<pre><code class="language-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">0.5</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0.25</span>)</span></span>;
}</span></code></pre>
<h4 id="rrggbbaa"><a class="markdownIt-Anchor" href="#rrggbbaa">#</a> #rrggbbaa</h4>
<p><strong>cssnext</strong> transforme les <a href="http://dev.w3.org/csswg/css-color/#hex-notation">notations hexadécimales</a> #RRGGBBAA et #RGBA en rgba().</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#5c69</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#C73D5C59</span></span></span>;
}</span></code></pre>
<p>Résultat :</p>
<pre><code class="language-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">85</span>, <span class="hljs-number">204</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0.6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">199</span>, <span class="hljs-number">61</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0.34902</span>)</span></span>;
}</span></code></pre>
<h4 id="rebeccapurple"><a class="markdownIt-Anchor" href="#rebeccapurple">#</a> rebeccapurple</h4>
<p>Transforme simplement la couleur <a href="https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-"><code>rebeccapurple</code></a> en <code>rgb(102, 51, 153)</code>.</p>
<h3 id="rem-units"><a class="markdownIt-Anchor" href="#rem-units">#</a> rem units</h3>
<p>Rien de bien extraordinaire ici, on génère un <strong><em>fallback</em> en pixels pour les unités en rem</strong>. Certaines personnes pourraient penser qu’un tel <em>fallback</em> est inutile de nos jours. Cependant, pour des projets bien spécifiques (compatibilité IE 7 et 8 requise), c’est encore une nécessité.
Non mais vous n’avez quand même pas besoin d’un exemple pour ça ? Si ? Bon… d’accord. Allons-y !</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<p>Résultat :</p>
<pre><code class="language-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">40px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span></code></pre>
<h2 id="note-importante-sur-les-fonctionnalit-s"><a class="markdownIt-Anchor" href="#note-importante-sur-les-fonctionnalit-s">#</a> Note importante sur les fonctionnalités</h2>
<p>Vous pouvez manuellement activer ou désactiver certaines fonctionnalités si vous n’en ressentez pas le besoin.
Cela étant dit, il vous est conseillé d’utiliser l’option <a href="http://cssnext.io/usage/#browsers"><code>browsers</code></a>,
qui permet de gérer automatiquement la liste des fonctionnalités à activer.
Par exemple si vous spécifiez un environnement où IE 8 n’est pas supporté, l’option de transformation des <code>rem</code>
en <code>px</code> ne sera pas activé. Tout comme Autoprefixer ne rajoutera pas les préfixes inutiles.</p>
<h2 id="fonctionnalit-s-bonus"><a class="markdownIt-Anchor" href="#fonctionnalit-s-bonus">#</a> Fonctionnalités bonus</h2>
<p>Les deux fonctionnalités qui vont suivre ne sont pas vraiment en rapport avec les spécifications CSS. Cependant, elles méritent tout de même leur place dans cette brève présentation de l’outil.</p>
<h3 id="import"><a class="markdownIt-Anchor" href="#import">#</a> <code>import</code></h3>
<p>Et si vous pouviez importer des fichiers locaux et des modules (<code>node_modules</code> ou <code>web_modules</code>) pour produire un seul et même fichier CSS les contenant tous ? Oui, <a href="https://github.com/sass/sass/issues/193">c’est à vous que je m’adresse, les utilisateurs de Sass</a>, hum. Eh bien, avec <strong>cssnext</strong>, c’est possible.</p>
<h3 id="compress"><a class="markdownIt-Anchor" href="#compress">#</a> <code>compress</code></h3>
<p>Comme vous l’avez sûrement deviné, c’est juste une option pour compresser <em>ou pas</em> votre fichier de sortie, et ceci grâce à <a href="https://github.com/ben-eb/cssnano">cssnano</a>.</p>
<h3 id="usage"><a class="markdownIt-Anchor" href="#usage">#</a> Usage</h3>
<p>Voici un exemple simple de ces deux fonctionnalités. J’ai ici utilisé <a href="https://github.com/cssnext/gulp-cssnext">gulp-cssnext</a>, un des <a href="http://cssnext.io/setup/">nombreux plugins</a> qui vous aident à démarrer avec <strong>cssnext</strong>.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>),
    cssnext = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-cssnext"</span>);

gulp.task(<span class="hljs-string">'styles'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  gulp.src(<span class="hljs-string">"css/index.css"</span>)
  .pipe(cssnext({
    compress: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// default is false</span>
  }))
  .pipe(gulp.dest(<span class="hljs-string">"./dist/"</span>))
});</code></pre>
<p>Ensuite, dans mon fichier <code>index.css</code>, j’ai ceci :</p>
<pre><code class="language-css"><span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"normalize.css"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/normalize.css/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"cssrecipes-defaults"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/cssrecipes-defaults/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"project-modules/partner"</span></span>; <span class="hljs-comment">/* relatif à css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"typo"</span></span>; <span class="hljs-comment">/* même niveau que mon index.css principal situé dans css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"highlight"</span> (min-width: <span class="hljs-number">25em</span>)</span>;</code></pre>
<p>Et le rendu final sera :</p>
<pre><code class="language-css"><span class="hljs-comment">/* contenu de ./node_modules/normalize.css/index.css */</span>
<span class="hljs-comment">/* contenu de ./node_modules/cssrecipes-defaults/index.css */</span>
<span class="hljs-comment">/* contenu de project-modules/partner.css */</span>
<span class="hljs-comment">/* contenu de typo.css */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">25em</span>) </span>{
  <span class="hljs-comment">/* contenu de highlight.css */</span>
}</code></pre>
<p>Je sais ce que vous ressentez. Ce n’est peut-être pas le coup de foudre au premier coup d’œil (enfin, pour certains comme moi si, mais bon, passons). Vous ne l’acceptez pas encore mais il va falloir vous rendre à l’évidence, un jour ou l’autre vous coderez comme ça. Mieux vaut vous y mettre tout de suite, non ? :)</p>
<p>Bref, pour résumer, disons simplement que le but principal de <strong>cssnext</strong> est de pouvoir développer selon les spécifications du W3C en gardant bien à l’esprit que, théoriquement, il sera possible de le supprimer plus tard (quand il ne sera plus utile).</p>
<p>En effet, dans un futur proche, les fonctionnalités qu’offre cet outil ne seront plus gérées par <strong>cssnext</strong> lui-même mais directement par les navigateurs. Laissons-les s’adapter, chacun à leur vitesse et préparons-nous. Voilà tout l’intérêt du code <em>future-proof</em>, comme le permet <a href="http://babeljs.io/">babeljs</a> pour le JavaScript.</p>
<p>En attendant, il y a encore du boulot : voici une <a href="https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3A%22type%3A+feature+request%22">liste des fonctionnalités à venir</a>.</p>
<p>Maintenant, à vous de jouer. N’oubliez pas d’aller faire un tour sur le <a href="https://github.com/cssnext/cssnext">repo GitHub</a>, n’hésitez pas à suivre <a href="https://twitter.com/cssnext">@cssnext</a> sur Twitter pour être au courant des dernières news et rejoignez la <a href="https://gitter.im/cssnext/cssnext">room cssnext sur Gitter</a> si vous avez des questions.</p>
<ul>
<li><a href="http://cssnext.io/">Site officiel</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/css/preprocesseurs/cssnext/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/preprocesseurs/cssnext/</guid><pubDate>Tue, 02 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction au déploiement continu]]></title><description><![CDATA[<h1 id="d-ployer-en-continu"><a class="markdownIt-Anchor" href="#d-ployer-en-continu">#</a> Déployer en continu ?</h1>
<p>Il s’agit d’avoir un site stable en production, ceci de manière automatisée et
continue. Rien que ça.</p>
<p>Il faut comprendre par là sans passer par FTP avec Filezilla.
Pas de bouton “Upload” ou “Sync” après avoir fait une modification de code.
Pas de risque de péter tout votre site si vos modifications rentrent en conflit
avec les modifications de votre collègue, qui lui aussi vient de pousser un
bon gros patch bien sale.</p>
<p>La première conséquence est que les mises en
production ne sont plus stressantes, car très régulières.
<a href="http://www.estcequonmetenprodaujourdhui.info/">Certaines personnes ne recommandent pas les mises en production tous les jours
</a> mais lorsque vous avez mis en
place l’intégration continue, vous minimisez grandement les risques.</p>
<p>La preuve en est que certaines entreprises font des mises en productions plusieurs
centaines de fois par jour ! (GitHub est un bon exemple).</p>
<h2 id="pr-requis-au-d-ploiement-continu"><a class="markdownIt-Anchor" href="#pr-requis-au-d-ploiement-continu">#</a> Pré-requis au déploiement continu</h2>
<p>Vous n’avez qu’une chose à faire avant de vous attaquer à la mise en place du
déploiement continu : vous devez déjà avoir
<a href="/fr/articles/ci/">l’intégration continue</a> en place.</p>
<p>Une fois vous êtes bon à ce niveau, vous pouvez passer à l’étape suivante.</p>
<h2 id="faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien"><a class="markdownIt-Anchor" href="#faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">#</a> Faire un script qui fait les choses qui vont bien quand les tests vont bien</h2>
<p>Une fois qu’on a une commande qui peut jouer tous les tests et dire “y’a bon” ou
“tatoukassé”, il nous faut prévoir les actions à réaliser quand nos tests sont
OK.</p>
<p>Un déploiement FTP, un déploiement git, ou plus compliqué via CDN, peu importe.
<strong>Il faut juste une commande qui marche simplement.</strong></p>
<p>Pour notre site, la commande est <code>npm run deploy</code>. Cette commande pousse le site
généré sur la branche <code>gh-pages</code>
(puisqu’on se sert <a href="https://pages.github.com/">des pages GitHub</a>).</p>
<h2 id="automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien"><a class="markdownIt-Anchor" href="#automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">#</a> Automatiser le script qui fait les choses qui vont bien quand les tests vont bien</h2>
<p>On peut ensuite éventuellement englober les précédentes étapes dans une seule
commande qui va se débrouiller s’il n’y a pas d’erreur. Mais bon, si vous n’avez
que deux commandes (comme on a dans l’exemple de notre site), un simple appel de
cette façon devrait faire l’affaire :</p>
<pre><code class="language-console">$ <span class="hljs-built_in">npm</span> test &amp;&amp; <span class="hljs-built_in">npm</span> run deploy</code></pre>
<p>Si <code>npm test</code> retourne une erreur, la deuxième commande ne sera pas exécutée.</p>
<h2 id="la-suite-au-prochaine-pisode"><a class="markdownIt-Anchor" href="#la-suite-au-prochaine-pisode">#</a> La suite au prochaine épisode</h2>
<p>La prochaine étape (dans un prochain article) sera de mettre ça en place sur un
serveur d’intégration continue, nous y étudierons simplement ce que nous avons
fait pour notre site.</p>
<p>Si vous êtes trop curieux, vous pouvez déjà <a href="https://github.com/putaindecode/putaindecode.io">consulter le code source de notre
site</a> et fouiller dans le
<code>package.json</code> (section <code>scripts</code>) pour deviner la suite…</p>
]]></description><link>http://putaindecode.io/fr/articles/ci/deploiement-continu/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/ci/deploiement-continu/</guid><pubDate>Mon, 25 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Qu'est-ce que l'intégration continue ?]]></title><description><![CDATA[<p>Certains risquent d’être déçus puisque nous ne parlerons pas ici des fameux <code>3x8</code>,
technique qui consiste à faire tourner 3 équipes d’intégrateurs HTML en
continu afin d’avoir du PSD &gt; HTML 24h sur 24.</p>
<h2 id="le-principe-de-l-int-gration-continue"><a class="markdownIt-Anchor" href="#le-principe-de-l-int-gration-continue">#</a> Le principe de l’intégration continue</h2>
<blockquote>
<p>L’intégration continue est un ensemble de pratiques utilisées en génie
logiciel consistant à vérifier à chaque modification de code source que le
résultat des modifications ne produit pas de régression dans l’application
développée.</p>
</blockquote>
<small>
[Source: Wikipédia](https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue)
</small>
<h2 id="pr-requis-pour-mettre-en-place-l-int-gration-continue"><a class="markdownIt-Anchor" href="#pr-requis-pour-mettre-en-place-l-int-gration-continue">#</a> Pré-requis pour mettre en place l’intégration continue</h2>
<p>Avant de rentrer dans le vif du sujet, assurez-vous d’avoir déjà de bonne bases,
pour maintenir une base de code saine en
<a href="/fr/articles/git/">versionnant avec git</a>.
Nous sommes en 2015, l’année où l’on était censé avoir les voitures
volantes, nous n’allons donc pas expliquer ici à quoi sert de versionner du
code.</p>
<p>Du code versionné ne suffit pas, il faut avoir des tests automatisés bien
entendu.
<a href="/fr/articles/js/tests/frontend/">Front</a> et back, il en faut de tous
les côtés.</p>
<p>Ensuite, il nous faudra choisir un serveur qui va gérer l’intégration continue.
Il existe des services tels que:</p>
<ul>
<li><a href="http://travis-ci.org/">Travis</a></li>
<li><a href="https://circleci.com/">CircleCI</a></li>
<li><a href="https://www.atlassian.com/software/bamboo/">Bamboo</a></li>
<li><a href="https://codeship.com/">Codeship</a></li>
<li><a href="http://jenkins-ci.org/">Jenkins</a></li>
</ul>
<h2 id="l-int-gration-continue-en-pratique"><a class="markdownIt-Anchor" href="#l-int-gration-continue-en-pratique">#</a> L’intégration continue en pratique</h2>
<p>Un fois qu’on a notre code testé et versionné et qu’on a configuré son serveur
de <em>CI</em>, chaque modification va déclencher des actions sur ce serveur, puis,
en fonction des résultats, va déclencher d’autres actions tout en vous notifiant
si besoin.</p>
<p>Un exemple classique serait le suivant : une fois les dernières modifications de
code poussées sur la branche principale sur votre dépôt de code, le serveur
d’intégration continue va jouer tous les tests et déployer le tout en production si
tout a marché sur des roulettes.</p>
<p>Si des problèmes surviennent, rien ne sera déployé et vous serez notifié sur
les services que vous avez configurés (email, IRC, webhook, etc).</p>
<p>Nous pouvons imaginer que votre serveur vienne vous insulter sur
votre logiciel de chat interne, en vous montrant du doigt.
On pourrait aussi imaginer une synthèse vocale crier votre nom et préciser à
toute l’équipe que
<a href="https://www.youtube.com/watch?v=mbDcnUH6rOc">vous avez merté</a> :
<em>“MoOx, you just fucked up the build by breaking 42 tests!
Fix that please”</em>.
Pour finir dans les exemples farfelus, nous pourrions avoir une petite tourelle
type <em>Nerf</em> qui vous met un petit headshot qui va bien.
Des équipes font vraiment ça, et vous vous en doutez, y’a de la grosse marrade au
programme.</p>
<p>L’idée est vraiment de pousser le plus souvent possible, les plus petites
modifications possibles avec la meilleure couverture de tests possible.
Ceci afin de minimiser les risques. De plus, cela aide à rester focalisé.</p>
<p>Tout ce processus (versionné aussi tant qu’à faire), qui permet de jouer tous
les tests <strong>rapidement</strong> (dans un environnement similaire à la production), doit
être transparent et accessible localement, afin que les développeurs aient une
bonne visibilité et une bonne compréhension du système en place.</p>
<h2 id="faire-des-tests-automatis-s-c-est-la-vie"><a class="markdownIt-Anchor" href="#faire-des-tests-automatis-s-c-est-la-vie">#</a> Faire des tests automatisés, c’est la vie</h2>
<p>J’ai mis un titre pour ça car c’est important. Vraiment.
Tout développeur qui n’a pas encore écrit ses premiers tests a peur.
Puis avec le temps, il se dit que finalement, il ne fallait pas
avoir autant d’appréhension et qu’il était très con de ne pas avoir
testé automatiquement tout ses codes sources plus tôt.
À tel point qu’une
<a href="http://the--kyza.deviantart.com/art/What-the-Flux-511691704">DeLorean modifiée</a>
pour se prévenir soi-même ne serait pas de refus.</p>
<p>Une fois la barrière franchie, on se dit vraiment qu’on était stupide de pas
avoir essayé avant.</p>
<h2 id="une-commande-qui-xecute-les-tests"><a class="markdownIt-Anchor" href="#une-commande-qui-xecute-les-tests">#</a> Une commande qui éxecute les tests</h2>
<p>Un fois qu’on a écrit des tests, ou même souvent avant, on automatise
l’exécution des tests. En général c’est rapide, étant donné qu’une simple
commande ou un simple script suffit.
Beaucoup de <em>test runners</em> existent et vous n’aurez aucune difficulté à en
trouver un en adéquation avec votre language favori.</p>
<p>Pour notre site, la commande est <code>npm test</code>. Simple, efficace.</p>
<p>Elle exécute tout ce qui est nécessaire à compiler notre application et à jouer
les tests tout en retournant un résultat lisible et un code d’erreur si besoin.</p>
<h2 id="et-apr-s"><a class="markdownIt-Anchor" href="#et-apr-s">#</a> Et après ?</h2>
<p>Là, si vous avez déjà mis tout ça en place, le bonheur ultime du développeur
n’est pas loin : vous pouvez rapidement vérifier qu’il n’y a pas de régressions
et agir en conséquence.</p>
<p>Chez <em>Putain de code !</em> (en date de cet article), notre couverture de
tests est loin d’être bonne. Mais ce site étant un petit plaisir un peu risqué,
nous faisons quand même du
<a href="/fr/articles/ci/deploiement-continu/">déploiement continu</a>, l’étape d’après !
On aime bien l’idée du <em><a href="http://zachholman.com/talk/move-fast-break-nothing">move fast &amp; break <s>no</s>thing
</a></em>.</p>
]]></description><link>http://putaindecode.io/fr/articles/ci/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/ci/</guid><pubDate>Thu, 21 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Comment déboguer facilement du web y compris sur tablettes et téléphones]]></title><description><![CDATA[<p>Vous souhaitez déboguer votre site ou application web mais vous ne savez pas trop comment faire ? Bon. Je sais que vous savez mais je peux peut-être vous faciliter la tâche.</p>
<p>Commençons par le plus simple.</p>
<h2 id="un-navigateur-un-inspecteur"><a class="markdownIt-Anchor" href="#un-navigateur-un-inspecteur">#</a> Un navigateur, un inspecteur</h2>
<p>Si vous ne voulez pas vous prendre la tête, la solution la plus simple reste d’utiliser l’inspecteur fourni par votre navigateur pour analyser vos pages web. Fini les add-ons à installer (comme Firebug), chaque navigateur récent a maintenant son propre inspecteur, même Internet Explorer.</p>
<p>Ça, c’est la partie que vous devez sûrement déjà savoir. Par contre, quid du mobile ?</p>
<h3 id="oui-quid-du-mobile"><a class="markdownIt-Anchor" href="#oui-quid-du-mobile">#</a> Oui, quid du mobile ?</h3>
<p>C’est justement principalement ce qui m’intéresse ici.</p>
<p>Pour ce qui est du mobile, je vous propose de commencer par brancher votre téléphone ou tablette sur votre poste en USB puis de lancer deux navigateurs. Mais pas n’importe lesquels. Les mêmes navigateurs sur desktop et sur mobile. Par exemple, si vous voulez déboguer Safari sur iOS, alors lancez Safari sur votre Mac. Si vous voulez déboguer Chrome sur Android, alors lancez Chrome sur votre desktop. Ce n’est vraiment plus aussi compliqué qu’auparavant où il était nécessaire d’installer des applications en ligne de commande (comme <a href="https://developer.android.com/tools/help/adb.html">adb</a> par exemple) avant de pouvoir rendre la connexion possible. Maintenant, les navigateurs incorporent directement de quoi se connecter aux mobiles.</p>
<p>Une connexion se fera entre les deux navigateurs (mobile et desktop) et vous permettra de voir ce qu’il se passe sur votre mobile en regardant la fenêtre de devtools sur votre desktop. Quelques précisions pour chacun des navigateurs :</p>
<ul>
<li>Chrome : lancez l’URL <code>chrome://inspect</code></li>
<li>Safari : allez dans <code>develop</code> puis vous verrez vos appareils connectés et les URL lancées sur vos appareils</li>
</ul>
<p>Pas mal non ?</p>
<p>Mais nous pouvons aller encore plus loin grâce à Firefox qui va nous faciliter la tâche. En effet, celui-ci est capable de déboguer n’importe quel navigateur via WebIDE et son <em>adapter</em> <a href="https://developer.mozilla.org/en-US/docs/Tools/Valence">Valence</a>.</p>
<h2 id="allez-firefox-webide"><a class="markdownIt-Anchor" href="#allez-firefox-webide">#</a> Allez, Firefox WebIDE !</h2>
<p>Au départ ce projet avait pour but de déboguer Firefox OS mais grâce au projet <a href="https://developer.mozilla.org/en-US/docs/Tools/Valence">Valence</a>, WebIDE permet maintenant aussi de se connecter à d’autres navigateurs comme iOS Safari ou Desktop Chrome (n’importe en fait) et de pouvoir déboguer dans les devtools de Firefox. Ça, c’est cool.</p>
<p>Pour activer WebIDE sur votre Firefox, ouvrez un onglet et rentrez comme URL<br /><code>about:config?filter=devtools.webide.enabled</code><br />
puis mettre l’option à <code>true</code>.</p>
<p>Allez après dans devtools, “settings” (l’engrenage) et activez :</p>
<ul>
<li><code>Enable browser chrome and add-on debugging toolboxes</code></li>
<li><code>Enable remote debugging</code></li>
</ul>
<p>puis redémarrez.</p>
<p>Vous devriez avoir “WebIDE” de disponible mais aussi “Browser Toolbox” qui est un debugger pour inspecter l’application Firefox en elle-même. Pratique pour faire des thèmes !</p>
<p>Une fois WebIDE lancé, allez dans <code>Select runtime</code> puis <code>Install Simulator</code> et installez <code>ADB Helper Add-on</code> ainsi que <code>Tools Adapters Add-on</code>.</p>
<p>Vous êtes bon(ne) pour pouvoir déboguer. Plus qu’à brancher votre appareil, allez dans <code>Select runtime</code> et le voir dans la section <code>USB Devices</code>.</p>
<p>N’hésitez pas à vous référer à la <a href="https://developer.mozilla.org/en-US/docs/Tools/WebIDE">documentation officielle</a> pour de plus amples informations.</p>
<p>Un petit hic tout de même. Cela reste une beta (à mon sens), de ce fait la connexion est un peu instable. Il est parfois difficile de se connecter à un appareil. Pour cela, débranchez votre téléphone puis rebranchez-le, et redémarrez Firefox puis relancez WebIDE, cela devrait être bon.</p>
<p>Mis à part ceci, c’est top.</p>
<blockquote>
<p>Oui mais moi je dois déboguer Android Browser, ça marche tout ça ?</p>
</blockquote>
<p>Biiiien, non. J’avoue tout. Aucune des solutions que je viens de vous donner ne fonctionne sur Android Browser.</p>
<blockquote>
<p>Euh… Quoi ?!</p>
</blockquote>
<p>Oui oui, je comprends que vous soyez étonné(e). Moi aussi, je suis dépité à chaque fois que je dois développer dessus. Ce navigateur est une belle merde. Il ne se met à jour que quand votre OS s’y met. Il est le navigateur par défaut et le moteur des webviews sur de nombreux (anciens (!|?)) Android. À vrai dire, je ne comprends même pas comment ce navigateur a pu exister sauf pour dire “Hey, vous avez vu, on ne vous a pas imposé Chrome, contrairement à Microsoft avec IE”. Ils auraient p’tête dû finalement.</p>
<p>Bref. Rassurez-vous, j’ai des solutions.</p>
<p>Je pourrais vous parler du format en <strong>CLI</strong> mais je ne pense pas que cela vous intéresserait. Et vu qu’on ne peut pas inspecter le DOM, juste voir la console, ce n’est vraiment pas plaisant pour déboguer.</p>
<p>Je pourrais aussi vous parler de la solution du <code>about:debug</code> mais c’est chiant (mais ça dépanne). Cela permet d’afficher une console JS dans le navigateur du mobile. Je vais plutôt vous parler ici d’un inspecteur écrit en page web qui se branche partout, un peu comme un Firebug lite. Son petit nom ? <a href="http://people.apache.org/~pmuellr/weinre-docs/latest/">weinre</a>.</p>
<h2 id="weinre"><a class="markdownIt-Anchor" href="#weinre">#</a> weinre</h2>
<p>… est une solution plus trop récente mais qui a le mérite de fonctionner partout, facilement et surtout sur Android browser. Celui-ci va créer une page web avec un webkit-debugger-like, qui lui est connecté via un websocket sur le site que vous êtes en train de déboguer, vous permettant à la fois d’avoir une console mais aussi une inspection du DOM. Et ça, c’est vraiment chouette.</p>
<p><img src="weinre-console.png" alt=""></p>
<p>Passons à son installation.</p>
<h3 id="installation"><a class="markdownIt-Anchor" href="#installation">#</a> Installation</h3>
<pre><code class="language-console">$ (sudo) npm -g <span class="hljs-keyword">install</span> weinre</code></pre>
<h3 id="utilisation"><a class="markdownIt-Anchor" href="#utilisation">#</a> Utilisation</h3>
<p>Lancez d’abord le process :</p>
<pre><code class="language-console"><span class="hljs-variable">$ </span>weinre</code></pre>
<p>Ajoutez le script dans votre page qui communiquera avec votre serveur (exemple) :</p>
<pre><code class="language-javascript">&lt;script src=<span class="hljs-string">"http://localhost:8080/target/target-script-min.js#anonymous"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></span></code></pre>
<p>Puis ouvrez la page <code>http://localhost:8080</code>, vous devriez avoir quelque chose comme ceci :</p>
<p><img src="weinre-interface.png" alt=""></p>
<p>Plus qu’à cliquer sur <code>http://localhost:8080/client/#anonymous</code> et vous arriverez sur l’interface du debugger.</p>
<p>Attention par contre. Ayant eu des problématiques de temps de connexion au websocket, j’ai dû rajouter un <code>setTimeout</code> avant de lancer mon JavaScript afin que la connexion entre la page web et le serveur se fasse pour bien afficher la totalité des <code>console.log</code> et autres. Sans ça, j’ai vu le début de mon app ne pas être inspectée, dommage.</p>
<p>Pour le moment j’ai réglé ce problème en mettant un <code>setTimout</code> de 2000ms sur l’exécution de mon code car il n’y a actuellement pas de moyens de savoir si la connexion au websocket s’est faite ou non.</p>
<p>Sachez cependant que le projet n’est plus trop maintenu mais que le principal <em>maintainer</em> est encore à l’écoute et recevra volontiers vos améliorations.</p>
<p>Il existe deux alternatives à weinre :</p>
<ul>
<li><a href="http://jsconsole.com/remote-debugging.html">jsconsole</a> (que je n’ai pas testé)</li>
<li><a href="http://vorlonjs.com/">Vorlon.js</a> : très sympa, très prometteur, plus propre que weinre. Seul hic, j’ai voulu tester Vorlon.js sur Android Browser (Android 4.3), il a fait planter Android Browser rendant impossible le debug. Dommage, j’aurais bien remplacé weinre par celui-ci.</li>
</ul>
<hr>
<p>Bien. On a fait le tour des solutions pour inspecter facilement le DOM ainsi qu’avoir une console sur n’importe quel navigateur.</p>
<p>Ce qui serait intéressant maintenant, c’est d’analyser les trames HTTP de n’importe quel appareil.</p>
<h2 id="comment-analyser-le-flux-http"><a class="markdownIt-Anchor" href="#comment-analyser-le-flux-http">#</a> Comment analyser le flux HTTP</h2>
<p>Pour cette tâche, je vous propose d’installer l’outil <a href="http://mitmproxy.org/">mitmproxy</a> qui vous permettra de créer un proxy récupérant tout votre trafic HTTP et de vous l’afficher requête par requête.</p>
<p>Ce qui va sûrement vous intéresser sera la partie <a href="http://mitmproxy.org/doc/transparent.html">transparent proxying</a>. Le proxy se chargera juste d’écouter votre trafic et de l’afficher.</p>
<p>Il sera nécessaire aussi de configurer votre navigateur afin que celui-ci se connecte à votre proxy.</p>
<p>Si vous êtes sur Android, il vous est nécessaire de le spécifier dans la configuration réseau de votre appareil. Pour cela :</p>
<ul>
<li>Connectez-vous au WiFi (du même réseau que votre hôte) (par exemple “MoOx”)</li>
<li>Allez dans “Settings”, “Wi-Fi”</li>
<li>Restez appuyé sur le nom du WiFi (toujours “MoOx”)</li>
<li>Une popin apparaîtra, cliquez sur “Modify network”</li>
<li>Cochez “Show advanced options”</li>
<li>“Proxy settings”, mettez <code>manual</code></li>
<li>Entrez les informations de mitmproxy pour vous y connecter</li>
<li>Validez</li>
</ul>
<p>Tout passera maintenant par lui et vous aurez dans votre shell une belle interface montrant toutes les trames passant.</p>
<p><img src="mitmproxy.png" alt=""></p>
<h2 id="note"><a class="markdownIt-Anchor" href="#note">#</a> Note</h2>
<p>Une petite note rapide. Pour utliser le Simulator iOS (si vous n’avez pas d’iPhone/iPad sous la main par exemple) il est possible que vous deviez installer <a href="https://github.com/google/ios-webkit-debug-proxy">iOS Webkit Debug Proxy</a>. Je n’ai pas eu à le faire mais <a href="https://twitter.com/tfeserver">@tfeserver</a> en a eu besoin. Je vous laisse ça de côté si par hasard cela vous était nécessaire.</p>
<hr>
<p>Avec ça, vous pouvez maintenant masteriser le debug sur tous les appareils sans vous prendre la tête. Il existe aussi une solution s’appelant <a href="http://www.browsersync.io/">BrowserSync</a> permettant à la fois le debug et la synchro des comportements sur les différents devices mais ça, ce sera peut-être pour un prochain post.</p>
<p>Bon débug.</p>
]]></description><link>http://putaindecode.io/fr/articles/devtools/deboguer-tablettes-telephones/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/devtools/deboguer-tablettes-telephones/</guid><pubDate>Tue, 19 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les utilitaires en ligne de commande]]></title><description><![CDATA[<p>Avoir accès à ses utilitaires en ligne de commande (<a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a>) est un quotidien dans nos métiers et un avantage indéniable. Ce n’est pas nouveau et cela existe depuis la nuit des temps. Tout utilisateur
d’Unix voue un culte particulier à son terminal.</p>
<p>J’ai récemment eu à développer un utilitaire en Node.js/iojs, j’ai donc voulu avec cet article déblayer un peu le terrain
et présenter quelques utilitaires très pratiques.</p>
<p>Deux postulats avant de commencer :</p>
<ul>
<li>Pourquoi JavaScript ? En cohérence avec le workflow que j’utilise.</li>
<li>Cet article n’a pas pour but d’apprendre à écrire du JavaScript avec Node.js/iojs.</li>
</ul>
<h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world">#</a> Hello world</h2>
<p>Avant de commencer à coder, il va tout d’abord falloir créer deux fichiers qui seront nécessaires et obligatoires :</p>
<pre><code class="language-console"><span class="hljs-comment">// création du dossier</span>
$ <span class="hljs-keyword">mkdir</span> putaindecode-<span class="hljs-keyword">cli</span> &amp;&amp; <span class="hljs-keyword">cd</span> putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// création de index.js</span>
$ touch index.js

<span class="hljs-comment">// création de package.json</span>
$ touch package.json</code></pre>
<p>Le fichier <code>index.js</code> va se présenter comme ceci :</p>
<pre><code><span class="hljs-shebang">#!/usr/bin/env node</span>
<span class="hljs-comment">// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`</span>

<span class="hljs-comment">// notre fameux hello world</span>
console.log(<span class="hljs-string">"Hello world"</span>)</code></pre>
<p>Pour notre fichier <code>package.json</code>, deux méthodes possibles pour l’écrire, soit en faisant <code>npm init</code> puis suivre les instructions, soit adapter ce JSON :</p>
<pre><code class="language-console">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"putaindecode-cli"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.1.0"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Putaindecode cli"</span></span>,
  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[
    <span class="hljs-string">"cli"</span>,
    <span class="hljs-string">"npm"</span>
  ]</span>,
  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"magsout"</span></span>,
  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"MIT"</span></span>,
  "<span class="hljs-attribute">repository</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"git"</span></span>,
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode/putaindecode-cli.git"</span>
  </span>}</span>,
  "<span class="hljs-attribute">engines</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">node</span>": <span class="hljs-value"><span class="hljs-string">"&gt;=0.10"</span>
  </span>}</span>,
  "<span class="hljs-attribute">homepage</span>":<span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli"</span>
  <span class="hljs-string">"bugs"</span>: {
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli/issues"</span>
  </span>}</span>,
  "<span class="hljs-attribute">files</span>": <span class="hljs-value">[
    <span class="hljs-string">"index.js"</span>
  ]</span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">devDependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">bin</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">putaindecode</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span>
  </span>}
</span>}</code></pre>
<p>La ligne importante à ne surtout pas oublier :</p>
<pre><code class="language-console"><span class="hljs-string">"bin"</span>: {
  <span class="hljs-string">"putaindecode-cli"</span>: <span class="hljs-string">"index.js"</span>
}</code></pre>
<p>Elle permettra de déterminer le script à exécuter lorsque la commande <code>putaindecode-cli</code> sera lancée.</p>
<p>Si on vulgarise un peu le principe, en installant le script, le fichier <code>index.js</code> sera renommé en <code>putaindecode-cli.js</code> et sera copié dans le répertoire adéquat (cela dépend de l’OS).</p>
<p>Lorsque la commande <code>putaindecode-cli</code> sera exécutée, le shell va chercher le fichier exécutable en utilisant les répertoires listés dans la variable PATH.</p>
<p>Si on suit ce raisonnement, l’installation d’un script écrasera automatiquement l’ancienne version ou tout script de même nom.</p>
<p>Pour s’assurer qu’il n’existe pas d’autres commandes portant le même nom, il est conseillé d’utiliser la commande : <code>which putaindecode-cli</code> qui ne retournera rien s’il n’y a aucun résultat :</p>
<pre><code class="language-console"><span class="hljs-comment">#putaindecode-cli ne retourne aucun résultat</span>
$ which putaindecode-cli

<span class="hljs-comment">#node est installé et accessible au path suivant</span>
$ which <span class="hljs-keyword">node</span><span class="hljs-identifier">
  </span><span class="hljs-title">/usr</span>/local/bin/<span class="hljs-keyword">node</span><span class="hljs-identifier"></span><span class="hljs-title"></span></code></pre>
<h2 id="installation-du-script"><a class="markdownIt-Anchor" href="#installation-du-script">#</a> Installation du script</h2>
<p>Afin de vérifier que le script fonctionne correctement, il suffit tout simplement d’exécuter dans le répertoire la commande : <code>./index.js</code>.</p>
<p>Une erreur de droit ? Un petit chmod pour arranger ça : <code>chmod +x index.js</code>.</p>
<p>À ce stade, si tout fonctionne bien, <code>Hello World</code> va s’afficher.</p>
<p>Par contre, exécuter notre script de la sorte n’est pas très pratique, d’autant plus qu’il sera nécessaire de connaître à chaque fois le chemin vers le fichier.</p>
<p>Il serait beaucoup plus simple de pouvoir exécuter le script comme une commande. Comme pour tout package npm, cela se fait avec <code>npm install</code>.</p>
<pre><code class="language-console"><span class="hljs-comment">// installation en global du script</span>
$ npm install -<span class="hljs-keyword">g</span>

<span class="hljs-comment">// exécution de la commande</span>
$ putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// résultat de la commande</span>
Hello world</code></pre>
<p>Le script est maintenant accessible partout sur l’OS grâce à la commande <code>putaindecode-cli</code>. L’installation en global n’est pas absolument pas nécessaire, tout dépend de l’intérêt de votre script. Il est d’ailleurs souvent préférable de l’installer en local dans un projet avec <code>--save</code> ou <code>--save-dev</code>.</p>
<h2 id="installation-des-scripts-de-base"><a class="markdownIt-Anchor" href="#installation-des-scripts-de-base">#</a> Installation des scripts de base</h2>
<p>La puissance de <code>NPM</code> provient de son nombre impressionnant de packages mis à disposition.</p>
<p>Pour gagner du temps et éviter d’avoir à recoder la roue. Le script <code>putaindecode-cli</code> va avoir besoin de trois choses :</p>
<ul>
<li>une gestion des commandes (commande, argument, aide)</li>
<li>une gestion des couleurs (notice, error, warning)</li>
<li>une capacité à stopper proprement notre code.</li>
</ul>
<h3 id="commander"><a class="markdownIt-Anchor" href="#commander">#</a> <code>commander</code></h3>
<p>Pour les commandes avec en prime la gestion des arguments et de l’aide, <a href="https://github.com/tj/commander">commander</a> est tout a fait adapté et répondra pratiquement à tous nos besoins.</p>
<p>Il est simple d’utilisation et très bien maintenu.</p>
<p>Voici un exemple de ce qu’on peut faire :</p>
<pre><code class="language-js"><span class="hljs-comment">/* Default */</span>
program
  .version(pkg.version)

<span class="hljs-comment">/* command */</span>
program
  .command(<span class="hljs-string">"command"</span>)
  .alias(<span class="hljs-string">'c'</span>)
  .description(<span class="hljs-string">"   command does something"</span>)
  .option(<span class="hljs-string">"-v, --verbose"</span>, <span class="hljs-string">"Verbose"</span>)
  .option(<span class="hljs-string">"-f, --force"</span>, <span class="hljs-string">"Force installation"</span>)
  .action(commandAction)
  .on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Example:"</span>)
    <span class="hljs-built_in">console</span>.log();
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command does something"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  });

<span class="hljs-comment">/* help */</span>
program.on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Examples:"</span>)
  <span class="hljs-built_in">console</span>.log();
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command do something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     Force command does something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command -f"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
});

program.parse(process.argv)

<span class="hljs-comment">/* help by default */</span>
<span class="hljs-keyword">if</span> (!program.args.length) program.help()</code></pre>
<h3 id="chalk"><a class="markdownIt-Anchor" href="#chalk">#</a> <code>chalk</code></h3>
<p><em>Null</em> besoin de faire un cours sur les couleurs, mais l’affichage d’une notice est bien plus pertinent avec sa couleur associée. C’est à ce moment qu’entre en jeu <a href="https://github.com/sindresorhus/chalk">chalk</a>. Relativement simple à mettre en place et à utiliser :</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chalk'</span>)

<span class="hljs-comment">/* var */</span>
<span class="hljs-keyword">var</span> error   = chalk.bold.red
<span class="hljs-keyword">var</span> warn    = chalk.yellow
<span class="hljs-keyword">var</span> success = chalk.green
<span class="hljs-keyword">var</span> notice  = chalk.blue

<span class="hljs-comment">/* code */</span>
<span class="hljs-built_in">console</span>.log(warn(<span class="hljs-string">'No command'</span>))
<span class="hljs-built_in">console</span>.log(notice(<span class="hljs-string">"file modified !"</span>))</code></pre>
<h3 id="exit"><a class="markdownIt-Anchor" href="#exit">#</a> <code>exit</code></h3>
<p>Peu importe comment s’exécute son code, il est important de bien savoir maitriser l’arrêt de son script. Pour ça, <code>process.exit()</code> nous sera bien utile.</p>
<p>Dans le cas d’une erreur, la valeur de <code>exit</code> doit systématiquement être supérieure à 0, et donc bien naturellement en cas de succès, elle doit être égale à 0.</p>
<p>Voici une <a href="http://www.virtsync.com/c-error-codes-include-errno">liste des valeurs</a> de <code>exit</code> et de leurs correspondances.</p>
<h2 id="thanks-god-for-our-terminal"><a class="markdownIt-Anchor" href="#thanks-god-for-our-terminal">#</a> Thanks god for our terminal</h2>
<p>Si vous souhaitez voir quelques exemples de projets avec des commandes et des mises en situations intéressantes, allez faire un tour sur ces projets :</p>
<ul>
<li><a href="https://github.com/cssnext/cssnext/blob/master/bin/cssnext.js">cssnext</a></li>
<li><a href="https://github.com/sindresorhus/trash/blob/master/cli.js">trash</a></li>
</ul>
<p>Je vous invite également à visionner la <a href="http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html">vidéo</a> de <a href="https://twitter.com/clementd">Clement Delafargue</a> qui a fait une présentation sur le sujet en début d’année.</p>
<p>À partir de là on dispose d’une bonne base pour refaire le monde et accroître la flemme du développeur que l’on est en automatisant tout plein de tâches.</p>
]]></description><link>http://putaindecode.io/fr/articles/npm/utilitaire-cli/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/npm/utilitaire-cli/</guid><pubDate>Tue, 12 May 2015 00:00:00 GMT</pubDate></item></channel></rss>