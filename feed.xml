<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.io]]></title><description><![CDATA[putaindecode.io]]></description><link>http://putaindecode.io</link><generator>RSS for Node</generator><lastBuildDate>Tue, 08 Dec 2015 08:17:56 GMT</lastBuildDate><atom:link href="http://putaindecode.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[ES6, ES2015 : Les object literals]]></title><description><![CDATA[<p>Là encore, cette évolution du langage amène un sucre syntaxique bien pratique
lors de l’initialisation d’objets.</p>
<h2 id="nom-des-propri-t-s-raccourcies"><a class="markdownIt-Anchor" href="#nom-des-propri-t-s-raccourcies">#</a> Nom des propriétés raccourcies</h2>
<p>Lorsqu’on crée un objet, il arrive fréquemment que lorsqu’on définisse une
propriété depuis une variable, la clé porte le même nom que la variable.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> firstname = <span class="hljs-string">"Robert"</span>
<span class="hljs-keyword">var</span> lastname = <span class="hljs-string">"Laiponje"</span>

<span class="hljs-keyword">return</span> {
  firstname: firstname,
  lastname: lastname,
}</code></pre>
<p>Avec ES2015, on va pouvoir l’écrire comme ça :</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> firstname = <span class="hljs-string">"Robert"</span>
<span class="hljs-keyword">const</span> lastname = <span class="hljs-string">"Laiponje"</span>

<span class="hljs-keyword">return</span> {
  firstname,
  lastname,
}
<span class="hljs-comment">// { firstname: "Robert", lastname: "Laiponje" }</span></code></pre>
<p>De la même manière, on pourra déclarer des méthodes en se passant du mot clé
<code>function</code>. Idem pour les <em>getter</em> / <em>setter</em>.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> obj = {
  get email() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.email()
  },
  set email(email) {
    <span class="hljs-keyword">this</span>.email = email
  },
  validateEmail(email) {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  },
}</code></pre>
<h2 id="nom-de-propri-t-s-calcul-es"><a class="markdownIt-Anchor" href="#nom-de-propri-t-s-calcul-es">#</a> Nom de propriétés calculées</h2>
<p>La dernière nouveauté concernant les <em>literal objects</em> va nous permettre
de créer des noms de propriétés depuis une expression, directement à la
création de l’objet. Auparavant, il fallait procéder en 2 temps, création
puis affectation.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params">type, data</span>) </span>{
  <span class="hljs-keyword">var</span> payload = {}
  payload[type] = data
  <span class="hljs-keyword">return</span> payload
}</code></pre>
<p>En ES2015, cela donnerait :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params">type, data</span>) </span>{
  <span class="hljs-keyword">return</span> {
    [type]: payload
  }
}</code></pre>
<p><strong>À noter</strong> qu’avec l’introduction des propriétés calculées, on va pouvoir
aussi déclarer plusieurs fois une même propriété, la dernière déclaration
écrasant les précédentes (et plus de <code>syntaxError</code>).</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/object-literals/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/object-literals/</guid><pubDate>Tue, 08 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : Template strings]]></title><description><![CDATA[<p>ES2015 add a new way to write better strings that will simplify our code:
the <em>template strings</em>.</p>
<h2 id="principle"><a class="markdownIt-Anchor" href="#principle">#</a> Principle</h2>
<p>To define a string in JavaScript, we have single quotes or double quotes.
No one is really better than the other since you need to escape the quotes you
are using in the string itself.</p>
<p><em>Template strings</em> use <em>back-tick</em> (grave accent) to delimitate strings.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> myString = <span class="hljs-string">'I\'m a "string"'</span>

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> myNewString = <span class="hljs-string">`I'm a "template string"`</span></code></pre>
<p>Nothing really awesome. So let’s see the interesting new feature: interpolation.</p>
<h2 id="interpolation"><a class="markdownIt-Anchor" href="#interpolation">#</a> Interpolation</h2>
<p>Now you can directly use expression in a <em>template string</em> if you use the new
place holder syntax.: <code>${ expression }</code>.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> name = <span class="hljs-string">"world"</span>;
<span class="hljs-keyword">var</span> myStrin = <span class="hljs-string">"Hello "</span> + name; <span class="hljs-comment">// =&gt; Hello world</span>

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> newName = <span class="hljs-string">`developer`</span>;
<span class="hljs-keyword">const</span> myStrin = <span class="hljs-string">`Hello <span class="hljs-subst">${ newName }</span>`</span>; <span class="hljs-comment">// =&gt; Hello developer</span></code></pre>
<p>Here we are just using a variable, but we can use any expression:</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> x = <span class="hljs-number">1</span>;
<span class="hljs-keyword">const</span> y = <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> result = <span class="hljs-string">`<span class="hljs-subst">${ x }</span> + <span class="hljs-subst">${ y }</span> = <span class="hljs-subst">${ x + y }</span>`</span> <span class="hljs-comment">// =&gt; 1 + 2 = 3</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">square</span>(<span class="hljs-params">num</span>) </span>{
  <span class="hljs-keyword">return</span> num * num;
}
<span class="hljs-keyword">const</span> result = <span class="hljs-string">`<span class="hljs-subst">${square(5)}</span>`</span> <span class="hljs-comment">// =&gt; 25</span></code></pre>
<p>This is what make <em>template strings</em> awesome.</p>
<h2 id="template-strings-are-multi-lines-capable"><a class="markdownIt-Anchor" href="#template-strings-are-multi-lines-capable">#</a> <em>template strings</em> are multi-lines capable</h2>
<p>Another cool thing is that <em>template strings</em> handle multi-lines.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> multiline = <span class="hljs-string">"foo \
                 bar \
                 baz"</span>;

<span class="hljs-keyword">var</span> multiline2 = <span class="hljs-string">"foo"</span>;
multiline2 += <span class="hljs-string">"bar"</span>;
multiline2 += <span class="hljs-string">"baz"</span>;

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> multiline = <span class="hljs-string">`foo
                   bar
                   baz`</span>;</code></pre>
<p><em>Note</em> keep in mind that spaces are as you write them, which can surprise you.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">`foo
bar`</span>;

<span class="hljs-keyword">const</span> str2 = <span class="hljs-string">`foo
             bar`</span>;

str1 === str2 <span class="hljs-comment">// =&gt; false</span></code></pre>
<h2 id="tagged-template-strings"><a class="markdownIt-Anchor" href="#tagged-template-strings">#</a> Tagged <em>template strings</em></h2>
<p>Let’s dive into another interesting feature of <em>template strings</em>.
Tags are functions that will use just before the <em>template string</em> and they
allow us to enhance the string result.</p>
<p>A tag take an array of “literals” (strings), and then all interpolated
(evaluated) expressions that we can still modify.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">capitalizeVowels</span>(<span class="hljs-params">strings, ...values</span>) </span>{

  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceVowels</span>(<span class="hljs-params">string</span>) </span>{
    <span class="hljs-keyword">return</span> string.replace(<span class="hljs-regexp">/[aeiou]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)</span>{
      <span class="hljs-keyword">return</span> c.toUpperCase();
    });
  }

  <span class="hljs-keyword">let</span> result = <span class="hljs-string">""</span>;
  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; strings.length; ++i) {
    <span class="hljs-keyword">const</span> nextValue = values[i] || <span class="hljs-string">""</span>;
    result += replaceVowels(strings[i]);
    <span class="hljs-keyword">if</span>(! <span class="hljs-built_in">parseInt</span>(nextValue)) {
      result += replaceVowels(nextValue)
    } <span class="hljs-keyword">else</span> {
      result += nextValue;
    }
  }
  <span class="hljs-keyword">return</span> result;
}


capitalizeVowels<span class="hljs-string">`foo bar ?`</span> <span class="hljs-comment">// =&gt; fOO bAr ?</span>
<span class="hljs-keyword">const</span> n = <span class="hljs-number">42</span>
<span class="hljs-keyword">const</span> c = <span class="hljs-string">"f"</span>
<span class="hljs-keyword">const</span> v = <span class="hljs-string">"o"</span>
capitalizeVowels<span class="hljs-string">`foo <span class="hljs-subst">${ n }</span> bar <span class="hljs-subst">${ c }</span><span class="hljs-subst">${ v }</span><span class="hljs-subst">${ v }</span> ?`</span> <span class="hljs-comment">// =&gt; fOO 42 bAr fOO ?</span></code></pre>
<p>Here is an interesting example of tagged <em>template strings</em> to handle
<a href="http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/">i18n for strings</a>.</p>
<h2 id="string-raw"><a class="markdownIt-Anchor" href="#string-raw">#</a> String.raw</h2>
<p>A new function has been added to <code>String</code> prototype that allows us display raw
content so you can see unescaped characters:</p>
<pre><code class="language-js"><span class="hljs-built_in">String</span>.raw<span class="hljs-string">`FOO\nbar`</span> <span class="hljs-comment">// =&gt; FOO\\nbar</span></code></pre>
<h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion">#</a> Conclusion</h2>
<p>When you will start to use <em>template strings</em>, you are likely going to like
them. They are clearly really useful in a daily basis.</p>
<p>Almost all
<a href="https://kangax.github.io/compat-table/es6/#test-template_strings">modern browser handle template strings</a>
today, as well as <a href="http://babeljs.io/">Babel</a> and Traceur, so you do not
hesitate to use <em>template strings</em>.</p>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/template-strings/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/template-strings/</guid><pubDate>Mon, 07 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les template strings]]></title><description><![CDATA[<p>ES2015 ajoute le support des <em>template strings</em> qui va permettre enfin de se
simplifier la vie lorsqu’on doit manipuler des chaînes de caractères.</p>
<h2 id="le-principe"><a class="markdownIt-Anchor" href="#le-principe">#</a> Le principe</h2>
<p>Pour définir une chaîne en JavaScript, il faut utiliser soit des single quotes,
soit des double quotes. Malheureusement ces délimiteurs posent quelques
problèmes lorsque justement la chaîne contient un single quote ou une
double quote.</p>
<p>Ainsi, les <em>template strings</em> utilisent le caractère <em>back-tick</em> (accent grave
simple) pour délimiter les chaînes de caractères.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> myString = <span class="hljs-string">'Je suis une "chaîne de caractères"'</span>

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> myNewString = <span class="hljs-string">`Je suis une "template string"`</span></code></pre>
<p>Jusque là, rien de bien novateur mais voyons un exemple que l’on rencontre
tout le temps : l’interpolation d’expression dans les chaînes de texte.</p>
<h2 id="interpolation-d-expression"><a class="markdownIt-Anchor" href="#interpolation-d-expression">#</a> Interpolation d’expression</h2>
<p>On peut maintenant directement utiliser les variables dans une <em>template string</em>
si on les insère dans un placeholder qui s’écrit <code>${variable}</code>.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> name = <span class="hljs-string">"world"</span>;
<span class="hljs-keyword">var</span> myStrin = <span class="hljs-string">"Hello "</span> + name; <span class="hljs-comment">// =&gt; Hello world</span>

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> newName = <span class="hljs-string">`developer`</span>;
<span class="hljs-keyword">const</span> myStrin = <span class="hljs-string">`Hello <span class="hljs-subst">${ newName }</span>`</span>; <span class="hljs-comment">// =&gt; Hello developer</span></code></pre>
<p>Il est également possible de faire des traitements dans un placeholder et
d’appeler des fonctions.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> x = <span class="hljs-number">1</span>;
<span class="hljs-keyword">const</span> y = <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> result = <span class="hljs-string">`<span class="hljs-subst">${ x }</span> + <span class="hljs-subst">${ y }</span> = <span class="hljs-subst">${ x + y }</span>`</span> <span class="hljs-comment">// =&gt; 1 + 2 = 3</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">square</span>(<span class="hljs-params">num</span>) </span>{
  <span class="hljs-keyword">return</span> num * num;
}
<span class="hljs-keyword">const</span> result = <span class="hljs-string">`<span class="hljs-subst">${square(5)}</span>`</span> <span class="hljs-comment">// =&gt; 25</span></code></pre>
<p>Ce qui rend l’utilisation des <em>template strings</em> extrêmement intéressante.</p>
<h2 id="les-template-strings-multi-lignes"><a class="markdownIt-Anchor" href="#les-template-strings-multi-lignes">#</a> Les <em>template strings</em> multi-lignes</h2>
<p>Une autre avancée des <em>template strings</em> est le support multi-ligne, en effet en
ES5 il n’existe aucune solution esthétique (et pratique) pour générer des
chaînes multi-lignes.
Ce problème disparait avec les <em>template strings</em>.</p>
<pre><code class="language-js"><span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">var</span> multiline = <span class="hljs-string">"foo \
                 bar \
                 baz"</span>;

<span class="hljs-keyword">var</span> multiline2 = <span class="hljs-string">"foo"</span>;
multiline2 += <span class="hljs-string">"bar"</span>;
multiline2 += <span class="hljs-string">"baz"</span>;

<span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">const</span> multiline = <span class="hljs-string">`foo
                   bar
                   baz`</span>;</code></pre>
<p><em>Attention</em> cependant, les espaces sont conservés avec les <em>template strings</em>,
ce qui peut surprendre si vous devez tester des strings multi-lignes.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">`foo
bar`</span>;

<span class="hljs-keyword">const</span> str2 = <span class="hljs-string">`foo
             bar`</span>;

str1 === str2 <span class="hljs-comment">// =&gt; false</span></code></pre>
<h2 id="les-template-strings-taggu-s"><a class="markdownIt-Anchor" href="#les-template-strings-taggu-s">#</a> Les <em>template strings</em> taggués</h2>
<p>On entre dans les fonctions moins connues et peu utilisées des <em>template strings</em>.
Les tags sont des fonctions que l’on place juste avant une <em>template string</em> et
qui permettent de modifier le contenu de la dite chaîne de caractères.</p>
<p>Ce tag aura pour paramètres un tableau de “literals” (les chaînes de caractères),
et ensuite tous les paramètres correspondant aux valeurs interpolées qui auront
déjà été évaluées, mais que l’on pourra quand même modifier.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">capitalizeVowels</span>(<span class="hljs-params">strings, ...values</span>) </span>{

  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceVowels</span>(<span class="hljs-params">string</span>) </span>{
    <span class="hljs-keyword">return</span> string.replace(<span class="hljs-regexp">/[aeiou]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)</span>{
      <span class="hljs-keyword">return</span> c.toUpperCase();
    });
  }

  <span class="hljs-keyword">let</span> result = <span class="hljs-string">""</span>;
  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; strings.length; ++i) {
    <span class="hljs-keyword">const</span> nextValue = values[i] || <span class="hljs-string">""</span>;
    result += replaceVowels(strings[i]);
    <span class="hljs-keyword">if</span>(! <span class="hljs-built_in">parseInt</span>(nextValue)) {
      result += replaceVowels(nextValue)
    } <span class="hljs-keyword">else</span> {
      result += nextValue;
    }
  }
  <span class="hljs-keyword">return</span> result;
}


capitalizeVowels<span class="hljs-string">`foo bar ?`</span> <span class="hljs-comment">// =&gt; fOO bAr ?</span>
<span class="hljs-keyword">const</span> n = <span class="hljs-number">42</span>
<span class="hljs-keyword">const</span> c = <span class="hljs-string">"f"</span>
<span class="hljs-keyword">const</span> v = <span class="hljs-string">"o"</span>
capitalizeVowels<span class="hljs-string">`foo <span class="hljs-subst">${ n }</span> bar <span class="hljs-subst">${ c }</span><span class="hljs-subst">${ v }</span><span class="hljs-subst">${ v }</span> ?`</span> <span class="hljs-comment">// =&gt; fOO 42 bAr fOO ?</span></code></pre>
<p>Voici un exemple intéressant d’utilisation des <em>template strings</em> taggués qui
présente un système <a href="http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/">de localisation de chaînes de caractères</a>.</p>
<h2 id="string-raw"><a class="markdownIt-Anchor" href="#string-raw">#</a> String.raw</h2>
<p>Et pour finir, une nouvelle fonction a été ajoutée au prototype de <code>String</code> qui
permet d’afficher le contenu d’un <em>template string</em> brut. C’est à dire que la
fonction permettra de voir les caractères d’échappement qui sont
automatiquement gérés avec une <em>template string</em>.</p>
<pre><code class="language-js"><span class="hljs-built_in">String</span>.raw<span class="hljs-string">`FOO\nbar`</span> <span class="hljs-comment">// =&gt; FOO\\nbar</span></code></pre>
<h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion">#</a> Conclusion</h2>
<p>Les <em>template strings</em> sont bien utiles au quotidien, l’ajout de l’interpolation
simplifie grandement la vie et permet d’oublier les erreurs d’échappement.</p>
<p>Aujourd’hui, <a href="https://kangax.github.io/compat-table/es6/#test-template_strings">la grande majorité des navigateurs les supportent</a>
ainsi que babel et traceur, donc usez et abusez des <em>template strings</em>…</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/template-strings/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/template-strings/</guid><pubDate>Mon, 07 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les promises]]></title><description><![CDATA[<p>ES2015 apporte une fonctionnalité simplifiant grandement l’asynchrone en
JavaScript, les promises ! Visible depuis longtemps dans l’écosystème JavaScript
grâce a diverses librairies, on peut maintenant utiliser directement la
spécification officielle.</p>
<h2 id="c-est-quoi-une-promise"><a class="markdownIt-Anchor" href="#c-est-quoi-une-promise">#</a> C’est quoi une promise ?</h2>
<p>Une promise peut être vue comme la promesse d’une valeur non-disponible
immédiatement. Comme toute promesse, elle peut être tenue, la valeur est arrivée
et on peut s’en servir, ou ne pas l’être, dans ce cas une erreur arrive et on
peut réagir en conséquence.</p>
<p>Ce mécanisme permet de remplacer les callbacks d’une manière plus élégante. Au
revoir, la suite de callbacks qui rend votre code illisible ! Vous ne me croyez
pas ? Voici un exemple pour vous le prouver :</p>
<pre><code class="language-js"><span class="hljs-comment">// En utilisant les callbacks</span>
<span class="hljs-comment">// Imaginez que chacune de ces fonctions effectue des tâches asynchrones</span>
<span class="hljs-comment">// plus ou moins complexes (requête HTTP, appel à une base de données</span>
<span class="hljs-comment">// ou encore lecture de fichier)</span>
<span class="hljs-keyword">const</span> functionWithCallback1 = (callback) =&gt; callback(<span class="hljs-string">'test'</span>, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback2 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback3 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback4 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback5 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback6 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)

functionWithCallback1((result1, err) =&gt; {
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">throw</span> err
  }
  functionWithCallback2(result1, (result2, err) =&gt; {
    <span class="hljs-keyword">if</span> (err) {
      <span class="hljs-keyword">throw</span> err
    }
    functionWithCallback3(result2, (result3, err) =&gt; {
      <span class="hljs-keyword">if</span> (err) {
        <span class="hljs-keyword">throw</span> err
      }
      functionWithCallback4(result3, (result4, err) =&gt; {
        <span class="hljs-keyword">if</span> (err) {
          <span class="hljs-keyword">throw</span> err
        }
        functionWithCallback5(result4, (result5, err) =&gt; {
          <span class="hljs-keyword">if</span> (err) {
            <span class="hljs-keyword">throw</span> err
          }
          functionWithCallback6(result5, (result6, err) =&gt; {
            <span class="hljs-keyword">if</span> (err) {
              <span class="hljs-keyword">throw</span> err
            }
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Exemple avec les callback : <span class="hljs-subst">${result6}</span>`</span>)
          })
        })
      })
    })
  })
})

<span class="hljs-comment">// Et maintenant, en utilisant les promises</span>
<span class="hljs-keyword">const</span> functionWithPromise1 = () =&gt; <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">'test'</span>)
<span class="hljs-keyword">const</span> functionWithPromise2 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise3 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise4 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise5 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise6 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)

functionWithPromise1()
  .then(functionWithPromise2)
  .then(functionWithPromise3)
  .then(functionWithPromise4)
  .then(functionWithPromise5)
  .then(functionWithPromise6)
  .then(result =&gt; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Exemple avec les promises : <span class="hljs-subst">${result}</span>`</span>))
  .catch(err =&gt; {
    <span class="hljs-keyword">throw</span> err
  })</code></pre>
<p>Comme vous pouvez le voir, l’exemple avec les promises est tout de même plus
lisible !</p>
<h2 id="trop-bien-comment-je-les-utilise"><a class="markdownIt-Anchor" href="#trop-bien-comment-je-les-utilise">#</a> Trop bien ! Comment je les utilise ?</h2>
<p>Une promise peut avoir plusieurs états au cours de son existence :</p>
<ul>
<li>en cours : la valeur qu’elle contient n’est pas encore arrivée</li>
<li>résolue : la valeur est arrivée, on peut l’utiliser</li>
<li>rejetée : une erreur est survenue, on peut y réagir</li>
</ul>
<p>Une promise possède 2 fonctions : <code>then</code> et <code>catch</code>, vous pouvez utiliser <code>then</code>
pour récupérer le resultat ou l’erreur d’une promise et <code>catch</code> pour récupérer
l’erreur d’une ou plusieurs promises.</p>
<p>Voyons comment utiliser les promises à l’aide de la future implémentation de
<a href="https://fetch.spec.whatwg.org"><code>fetch</code></a>.</p>
<pre><code class="language-js"><span class="hljs-comment">// À ce moment, la promise est en attente</span>
<span class="hljs-keyword">const</span> fetchPromise = fetch(<span class="hljs-string">'http://putaindecode.io'</span>)

<span class="hljs-comment">// Quand la requête est terminée la promise est résolue avec le résultat de</span>
<span class="hljs-comment">// la requête</span>
<span class="hljs-keyword">const</span> parsePromise = fetchPromise.then(fetchResult =&gt; {
  <span class="hljs-comment">// Je peux retourner une nouvelle promise à partir d'un then, ici</span>
  <span class="hljs-comment">// j'appelle .text() qui parse le contenu de la requête et retourne</span>
  <span class="hljs-comment">// une promise</span>
  <span class="hljs-keyword">return</span> fetchResult.text()
})

<span class="hljs-comment">// Quand le parsing est terminé, je peux recuperer son contenu</span>
parsePromise.then(textResult =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Voici le résultat : <span class="hljs-subst">${textResult}</span>`</span>)
})

<span class="hljs-comment">// Si la requête a un problème, la promise est rejetée avec une erreur</span>
fetchPromise.catch(fetchError =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Une erreur a eu lieu pendant la requête"</span>, fetchError)
})

<span class="hljs-comment">// S'il y a une erreur pendant le parsing, je peux la récupérer</span>
parsePromise.catch(parseError =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Une erreur a eu lieu pendant le parsing"</span>, parseError)
})

<span class="hljs-comment">// Cela peut aussi être écrit</span>
fetch(<span class="hljs-string">'http://putaindecode.io'</span>)
  .then(fetchResult =&gt; fetchResult.text())
  .then(textResult =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Voici le résultat : <span class="hljs-subst">${textResult}</span>`</span>)
  })
  .catch(error =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Une erreur a eu lieu pendant la requête ou le parsing"</span>, fetchError)
  })

<span class="hljs-comment">// Ou encore</span>
fetch(<span class="hljs-string">'http://putaindecode.io'</span>)
  .then(
    fetchResult =&gt; {
      <span class="hljs-keyword">return</span> fetchResult.text()
    },
    fetchError =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Une erreur a eu lieu pendant la requête"</span>, fetchError)
    }
  )
  .then(
    textResult =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Voici le résultat : <span class="hljs-subst">${textResult}</span>`</span>)
    },
    parseError =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Une erreur a eu lieu pendant le parsing"</span>, parseError)
    }
  )</code></pre>
<h2 id="mais-comment-je-cr-e-mes-propres-promises"><a class="markdownIt-Anchor" href="#mais-comment-je-cr-e-mes-propres-promises">#</a> Mais comment je crée mes propres promises ?</h2>
<p>C’est bien beau d’utiliser les promises, mais c’est encore mieux de savoir créer
les vôtres ! Je vous rassure, c’est très simple.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> functionThatReturnAPromise = (success) =&gt; {
  <span class="hljs-comment">// On utilise la classe Promise pour en créer une, le constructeur prend 2</span>
  <span class="hljs-comment">// fonctions en paramètre :</span>
  <span class="hljs-comment">// - resolve que l'on pourra appeler avec le résultat de notre fonction</span>
  <span class="hljs-comment">// - reject que l'on pourra appeler avec une erreur s'il y a une erreur</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>((resolve, reject) =&gt; {
    <span class="hljs-keyword">if</span> (success) {
      resolve(<span class="hljs-string">'success'</span>)
    }
    <span class="hljs-keyword">else</span> {
      reject(<span class="hljs-string">'failed'</span>)
    }
  })
}

<span class="hljs-comment">// Vous pouvez maintenant utiliser votre fonction comme vu précédemment</span>
functionThatReturnAPromise(success)
  .then(res =&gt; <span class="hljs-built_in">console</span>.log(res))
  .catch(error =&gt; <span class="hljs-built_in">console</span>.log(error))

<span class="hljs-comment">// équivalent dans notre cas à</span>
functionThatReturnAPromise(success)
  .then(
    (res) =&gt; <span class="hljs-built_in">console</span>.log(res),
    (error) =&gt; <span class="hljs-built_in">console</span>.log(error)
  )</code></pre>
<h2 id="et-demain"><a class="markdownIt-Anchor" href="#et-demain">#</a> Et demain ?</h2>
<p>Une fonctionnalité encore plus pratique que les promises arrive en JavaScript,
les mots-clés <code>async</code> et <code>await</code> ! Ces mots-clés vous permettront d’avoir un code
encore plus lisible quand vous ferez de l’asynchrone, mais ça ne concerne pas
ES2015 :)</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/promises/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/promises/</guid><pubDate>Sun, 06 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : Promises]]></title><description><![CDATA[<p>With ES2015, you can now very easily write asynchronous code thanks to the
promises.
The concept of promises exists is not new in the JavaScript world, but now
we got an official feature!</p>
<h2 id="what-s-a-promise"><a class="markdownIt-Anchor" href="#what-s-a-promise">#</a> What’s a promise?</h2>
<p>It’s a promise of an incoming value, not available yet. It’s a promise so it can
be fulfilled or not (rejected). If fulfilled, it will give us the the value we
were waiting for. If rejected, we will get the error so we can handle it.</p>
<p>This mechanism allows to avoid the callback hell :</p>
<pre><code class="language-js"><span class="hljs-comment">// With callbacks.</span>
<span class="hljs-comment">// Let's say that all those function are doing async tasks (like http or</span>
<span class="hljs-comment">// database request, fs read...)</span>
<span class="hljs-keyword">const</span> functionWithCallback1 = (callback) =&gt; callback(<span class="hljs-string">'test'</span>, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback2 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback3 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback4 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback5 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)
<span class="hljs-keyword">const</span> functionWithCallback6 = (arg, callback) =&gt; callback(arg, <span class="hljs-literal">undefined</span>)

functionWithCallback1((result1, err) =&gt; {
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">throw</span> err
  }
  functionWithCallback2(result1, (result2, err) =&gt; {
    <span class="hljs-keyword">if</span> (err) {
      <span class="hljs-keyword">throw</span> err
    }
    functionWithCallback3(result2, (result3, err) =&gt; {
      <span class="hljs-keyword">if</span> (err) {
        <span class="hljs-keyword">throw</span> err
      }
      functionWithCallback4(result3, (result4, err) =&gt; {
        <span class="hljs-keyword">if</span> (err) {
          <span class="hljs-keyword">throw</span> err
        }
        functionWithCallback5(result4, (result5, err) =&gt; {
          <span class="hljs-keyword">if</span> (err) {
            <span class="hljs-keyword">throw</span> err
          }
          functionWithCallback6(result5, (result6, err) =&gt; {
            <span class="hljs-keyword">if</span> (err) {
              <span class="hljs-keyword">throw</span> err
            }
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example with callbacks: <span class="hljs-subst">${result6}</span>`</span>)
          })
        })
      })
    })
  })
})

<span class="hljs-comment">// Now the same thing with promises</span>
<span class="hljs-keyword">const</span> functionWithPromise1 = () =&gt; <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">'test'</span>)
<span class="hljs-keyword">const</span> functionWithPromise2 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise3 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise4 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise5 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)
<span class="hljs-keyword">const</span> functionWithPromise6 = (arg) =&gt; <span class="hljs-built_in">Promise</span>.resolve(arg)

functionWithPromise1()
  .then(functionWithPromise2)
  .then(functionWithPromise3)
  .then(functionWithPromise4)
  .then(functionWithPromise5)
  .then(functionWithPromise6)
  .then(result =&gt; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example with promises: <span class="hljs-subst">${result}</span>`</span>))
  .catch(err =&gt; {
    <span class="hljs-keyword">throw</span> err
  })</code></pre>
<p>As you can see, example with promises is clear and more concise.</p>
<h2 id="that-s-cool-how-can-i-use-promises"><a class="markdownIt-Anchor" href="#that-s-cool-how-can-i-use-promises">#</a> That’s cool. How can I use promises?</h2>
<p>A promise can have different status:</p>
<ul>
<li>in progress: value is not ready yet</li>
<li>resolved: value is here, we can use it</li>
<li>rejected: an error has been thrown, we should handle it.</li>
</ul>
<p>A promise have 2 functions: <code>then</code> and <code>catch</code>.
You can use <code>then</code> to wait for the result (or handle an error), and <code>catch</code> to
catch all possibles errors of one promise or more.</p>
<p>Let’s see how to use promises with an example of the incoming standardized
<a href="https://fetch.spec.whatwg.org"><code>fetch</code></a> method.</p>
<pre><code class="language-js"><span class="hljs-comment">// At this moment, promise is in progress</span>
<span class="hljs-keyword">const</span> fetchPromise = fetch(<span class="hljs-string">'http://putaindecode.io'</span>)

<span class="hljs-comment">// When promise is resolved, you go a value you can work with</span>
<span class="hljs-keyword">const</span> parsePromise = fetchPromise.then(fetchResult =&gt; {
  <span class="hljs-comment">// I can return a new result that can be used as a new promise</span>
  <span class="hljs-comment">// Here we call .text() which parse the content of the request and return</span>
  <span class="hljs-comment">// promise</span>
  <span class="hljs-keyword">return</span> fetchResult.text()
})

<span class="hljs-comment">// When parsing is done, we can work with the content</span>
parsePromise.then(textResult =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Here is the text result : <span class="hljs-subst">${textResult}</span>`</span>)
})

<span class="hljs-comment">// If the request encounter an issue, promise might be rejected with an error</span>
fetchPromise.catch(fetchError =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`We got an issue during the request`</span>, fetchError)
})

<span class="hljs-comment">// If there is an issue during the parsing, we can handle it too</span>
parsePromise.catch(parseError =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"We got an issue during the parsing"</span>, parseError)
})

<span class="hljs-comment">// The same can be written like this</span>
fetch(<span class="hljs-string">'http://putaindecode.io'</span>)
  .then((fetchResult) =&gt; fetchResult.text())
  .then((textResult) =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Here is the text result : <span class="hljs-subst">${textResult}</span>`</span>)
  })
  .catch((error) =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`We got an issue during the request or the parsing`</span>, fetchError)
  })

<span class="hljs-comment">// Or like this</span>
fetch(<span class="hljs-string">'http://putaindecode.io'</span>)
  .then(
    (fetchResult) =&gt; {
      <span class="hljs-keyword">return</span> fetchResult.text()
    },
    (fetchError) =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`We got an issue during the request`</span>, fetchError)
    })
  .then(
    (textResult) =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Here is the text result : <span class="hljs-subst">${textResult}</span>`</span>)
    },
    (parseError) =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"We got an issue during the parsing"</span>, parseError)
    }
  )</code></pre>
<h2 id="how-do-i-create-my-own-promises"><a class="markdownIt-Anchor" href="#how-do-i-create-my-own-promises">#</a> How do I create my own promises?</h2>
<p>Using a promise is nice, but creating yours is even better. Let’s be clear: it’s
easy.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> functionThatReturnAPromise = (success) =&gt; {
  <span class="hljs-comment">// We will need to use Promise class to use one.</span>
  <span class="hljs-comment">// constructor takes 2 arguments:</span>
  <span class="hljs-comment">// - resolve, a callback to pass the value you want to send</span>
  <span class="hljs-comment">// - reject, a callback to throw an error</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>((resolve, reject) =&gt; {
    <span class="hljs-keyword">if</span> (success) {
      resolve(<span class="hljs-string">'success'</span>)
    }
    <span class="hljs-keyword">else</span> {
      reject(<span class="hljs-string">'failed'</span>)
    }
  })
}

<span class="hljs-comment">// You can use this promise like this</span>
functionThatReturnAPromise(success)
  .then(res =&gt; <span class="hljs-built_in">console</span>.log(res))
  .catch(error =&gt; <span class="hljs-built_in">console</span>.log(error))

<span class="hljs-comment">// In our case, the previous example can be also written</span>
functionThatReturnAPromise(success)
  .then(
    (res) =&gt; <span class="hljs-built_in">console</span>.log(res),
    (error) =&gt; <span class="hljs-built_in">console</span>.log(error)
  )</code></pre>
<h2 id="what-s-next"><a class="markdownIt-Anchor" href="#what-s-next">#</a> What’s next?</h2>
<p>A new way to write asynchronous will land in JavaScript with <code>async</code> and <code>await</code>
keywords, but we will need to way another ES year (or two) for it !</p>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/promises/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/promises/</guid><pubDate>Sun, 06 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : Classes]]></title><description><![CDATA[<p>Classes introduced by ES2015 are just some syntax sugar.
They don’t really bring anything.
That said, this can helps to improve code readability and make the code more
accessible.</p>
<h2 id="class-declaration"><a class="markdownIt-Anchor" href="#class-declaration">#</a> Class declaration</h2>
<p>Forget functions and prototypes, semantic is taking the relay as you will see in
the following example :</p>
<pre><code class="language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  constructor(firstname, lastname) {
    <span class="hljs-keyword">this</span>.firstname = firstname;
    <span class="hljs-keyword">this</span>.lastname = lastname;
  }

  sayName() {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${this.firstname}</span> <span class="hljs-subst">${this.lastname}</span>`</span>
  }
}

<span class="hljs-comment">// instanciation</span>
<span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>)

<span class="hljs-comment">// call of the method sayName()</span>
<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span></code></pre>
<p>As a reminder, here is one
<a href="https://gist.github.com/magsout/a876b2fa8240a987e523">way to code</a>
this class in <code>es5</code> :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params">firstname, lastname</span>) </span>{
  <span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> User)) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">"Class constructors cannot be invoked without 'new'"</span>)
  }
  <span class="hljs-keyword">this</span>.firstname = firstname
  <span class="hljs-keyword">this</span>.lastname = lastname
}

User.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstname + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.lastname
}

<span class="hljs-comment">// instanciation</span>
<span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>)

<span class="hljs-comment">// call of the method sayName()</span>
<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span></code></pre>
<h2 id="classes-expressions"><a class="markdownIt-Anchor" href="#classes-expressions">#</a> Classes expressions</h2>
<p>All methods should be written as simple function inside the class.
You might denote the nice way to write getter and setter :</p>
<pre><code class="language-JS"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  constructor(firstname, lastname, type) {
    <span class="hljs-keyword">this</span>.firstname = firstname
    <span class="hljs-keyword">this</span>.lastname = lastname
    <span class="hljs-keyword">this</span>.type = type
  }

  <span class="hljs-comment">// method</span>
  sayName() {
   <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${this.firstname}</span>  <span class="hljs-subst">${this.lastname}</span>`</span>
  }

  <span class="hljs-comment">// getter</span>
  get role() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.type
  }

  <span class="hljs-comment">// setter</span>
  set role(value) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.type = value
  }
}

<span class="hljs-comment">// the `new` is mandatory to instanciate a class</span>
<span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>, <span class="hljs-string">"Contributor"</span>)

<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span>
<span class="hljs-built_in">console</span>.log(user.role) <span class="hljs-comment">// Contributor</span>
user.role = <span class="hljs-string">"owner"</span>
<span class="hljs-built_in">console</span>.log(user.role) <span class="hljs-comment">// Owner</span></code></pre>
<h2 id="inheritance"><a class="markdownIt-Anchor" href="#inheritance">#</a> Inheritance</h2>
<p>In order to have a class that inherite from another, we have the <code>extends</code>
keyword.</p>
<p>Here is the an example :</p>
<pre><code class="language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Contributor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>{
  constructor(firstname, lastname, numberCommit) {

    <span class="hljs-comment">// keyword `super` is used to call the constructor of the parent class</span>
    <span class="hljs-keyword">super</span>(firstname, lastname)
    <span class="hljs-keyword">this</span>.numberCommit = numberCommit
  }

  sayNameWithCommit() {
    <span class="hljs-comment">// we can can also use `super` to call a method of the parent class</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.sayName() + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.sayNumberCommit()
  }

  sayNumberCommit() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.numberCommit
  }
}

<span class="hljs-keyword">const</span> contributor = <span class="hljs-keyword">new</span> Contributor(<span class="hljs-string">'Jane'</span>, <span class="hljs-string">'Smith'</span>, <span class="hljs-number">10</span>)

<span class="hljs-built_in">console</span>.log(contributor.sayName())
<span class="hljs-built_in">console</span>.log(contributor.sayNumberCommit())</code></pre>
<p><strong>Reminder: <a href="https://www.youtube.com/watch?v=wfMtDGfHWpA">prefer inheritance to composition</a>.</strong></p>
<h2 id="that-s-it"><a class="markdownIt-Anchor" href="#that-s-it">#</a> That’s it</h2>
<p>As you saw, all what you can do know was already possible
<a href="https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1">before</a>.</p>
<p>We just have a more readable code that should be more easily maintainable.</p>
<p>For now, you will need to use a transpiler like <a href="https://babeljs.io/">babel</a>
to be able to use classes.</p>
<p>One last thing: when you are in a class context,
<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode">strict mode</a>
is enabled automatically.</p>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/classes/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/classes/</guid><pubDate>Sat, 05 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les classes]]></title><description><![CDATA[<p>Les classes introduites par <code>ES2015</code> ne sont clairement que du sucre syntaxique.
Elles n’apportent rien de plus en terme de fonctionnalité. Toutefois, l’objectif
de cette évolution est de rendre le code plus lisible et plus facilement
accessible.</p>
<h2 id="d-claration-de-classes"><a class="markdownIt-Anchor" href="#d-claration-de-classes">#</a> Déclaration de classes</h2>
<p>Oubliez les fonctions anonymes et les prototypes, la sémantique a pris le
relais, comme vous pouvez le constater dans l’exemple de déclaration de la
classe <code>User</code> :</p>
<pre><code class="language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  <span class="hljs-comment">// méthode constructor</span>
  constructor(firstname, lastname) {
    <span class="hljs-keyword">this</span>.firstname = firstname;
    <span class="hljs-keyword">this</span>.lastname = lastname;
  }

  sayName() {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${this.firstname}</span> <span class="hljs-subst">${this.lastname}</span>`</span>
  }
}

<span class="hljs-comment">// instanciation</span>
<span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>)

<span class="hljs-comment">// appel de la méthode sayName()</span>
<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span></code></pre>
<p>Pour rappel, voici une <a href="https://gist.github.com/magsout/a876b2fa8240a987e523">façon possible
d’écrire</a> cette classe en
<code>es5</code> :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params">firstname, lastname</span>) </span>{
  <span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> User)) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">"Class constructors cannot be invoked without 'new'"</span>)
  }
  <span class="hljs-keyword">this</span>.firstname = firstname
  <span class="hljs-keyword">this</span>.lastname = lastname
}

User.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstname + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.lastname
}

<span class="hljs-comment">// instanciation</span>
<span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>)

<span class="hljs-comment">// appel de la méthode sayName()</span>
<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span></code></pre>
<h2 id="expressions-de-classes"><a class="markdownIt-Anchor" href="#expressions-de-classes">#</a> Expressions de classes</h2>
<p>Toutes les méthodes s’écrivent comme de simples fonctions à l’intérieur de la
classe. Bien entendu, les getter/setter sont toujours de la partie mais bien
plus simples à utiliser :</p>
<pre><code class="language-JS"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  <span class="hljs-comment">// constructor</span>
  constructor(firstname, lastname, type) {
    <span class="hljs-keyword">this</span>.firstname = firstname
    <span class="hljs-keyword">this</span>.lastname = lastname
    <span class="hljs-keyword">this</span>.type = type
  }

  <span class="hljs-comment">// méthode</span>
  sayName() {
   <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${this.firstname}</span>  <span class="hljs-subst">${this.lastname}</span>`</span>
  }

  <span class="hljs-comment">// getter</span>
  get role() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.type
  }

  <span class="hljs-comment">// setter</span>
  set role(value) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.type = value
  }
}

<span class="hljs-comment">// le `new` est obligatoire pour appeler une classe</span>
<span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Doe"</span>, <span class="hljs-string">"Contributor"</span>)

<span class="hljs-built_in">console</span>.log(user.sayName()) <span class="hljs-comment">// John Doe</span>
<span class="hljs-built_in">console</span>.log(user.role) <span class="hljs-comment">// Contributor</span>
user.role = <span class="hljs-string">"owner"</span>
<span class="hljs-built_in">console</span>.log(user.role) <span class="hljs-comment">// Owner</span></code></pre>
<h2 id="l-h-ritage"><a class="markdownIt-Anchor" href="#l-h-ritage">#</a> L’héritage</h2>
<p>Pour qu’une sous-classe hérite d’une autre classe on utilisera le mot
clé <code>extends</code>.</p>
<p>En utilisant notre exemple précédent :</p>
<pre><code class="language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Contributor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>{
  constructor(firstname, lastname, numberCommit) {

    <span class="hljs-comment">// le mot clé super est utilisé comme super contructeur. Il permet d'appeler</span>
    <span class="hljs-comment">// et d'avoir accès aux méthodes du parent</span>
    <span class="hljs-keyword">super</span>(firstname, lastname)
    <span class="hljs-keyword">this</span>.numberCommit = numberCommit
  }

  sayNameWithCommit() {
    <span class="hljs-comment">// on peut appeler une méthode de la classe parente avec `super.method`</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.sayName() + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.sayNumberCommit()
  }

  sayNumberCommit() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.numberCommit
  }
}

<span class="hljs-comment">// instanciation</span>
<span class="hljs-keyword">const</span> contributor = <span class="hljs-keyword">new</span> Contributor(<span class="hljs-string">'Jane'</span>, <span class="hljs-string">'Smith'</span>, <span class="hljs-number">10</span>)

<span class="hljs-comment">// appel de la méthode sayName()</span>
<span class="hljs-built_in">console</span>.log(contributor.sayName())
<span class="hljs-built_in">console</span>.log(contributor.sayNumberCommit())</code></pre>
<p><strong>Rappel : <a href="https://www.youtube.com/watch?v=wfMtDGfHWpA">préférez la composition à l’héritage</a>.</strong></p>
<h2 id="that-s-it"><a class="markdownIt-Anchor" href="#that-s-it">#</a> That’s it</h2>
<p>Concrètement, tout ce qui est possible de faire avec cette nouvelle notation
l’était bien entendu
<a href="https://gist.github.com/bloodyowl/7edc9c973d2236ed17e1">avant</a>.</p>
<p>Au final, on gagne en clarté, en lisibilité et donc en maintenabilité.</p>
<p>À l’heure actuelle, il est nécessaire de passer par un transpileur comme
<a href="https://babeljs.io/">babel</a> pour utiliser les classes.</p>
<p>Une dernière petite chose, en utilisant les classes on active automatiquement le
<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode">mode strict</a>,
il n’est donc pas nécessaire de le rajouter manuellement.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/classes/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/classes/</guid><pubDate>Sat, 05 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : Object.assign]]></title><description><![CDATA[<p>You probably know underscore or lodash <code>extend</code> method (at leat lodash right)?
Like most of these utilities functions, those are deprecated by an ES6 (ES2015)
feature.</p>
<h1 id="object-assign"><a class="markdownIt-Anchor" href="#object-assign">#</a> Object.assign</h1>
<p>The new static method <code>Object.assign</code> take a bunch of objects as arguments :</p>
<ul>
<li>The first is a target for copies;</li>
<li>Next are sources;</li>
<li>All <em>own properties</em> (enumerable keys and non inherited, even those which are
<code>undefined</code>) will be copied  in the target (so last ones take precedences);</li>
<li><strong>The target object is modified</strong> (it must be mutable);</li>
<li>The modified target object is returned.</li>
</ul>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = { y: <span class="hljs-number">0</span> }
<span class="hljs-keyword">const</span> o1 = { x: <span class="hljs-number">1</span>, y: <span class="hljs-number">2</span> }
<span class="hljs-keyword">const</span> o2 = { x: <span class="hljs-literal">undefined</span>, z: <span class="hljs-number">3</span> }
<span class="hljs-built_in">Object</span>.assign(o, o1, o2) <span class="hljs-comment">// { x: undefined, y: 2, z: 3 }</span>
o <span class="hljs-comment">// { x: undefined, y: 2, z: 3 }</span>
o1 <span class="hljs-comment">// unmodified</span>
o2 <span class="hljs-comment">// unmodified</span></code></pre>
<h2 id="becareful-to-mutability"><a class="markdownIt-Anchor" href="#becareful-to-mutability">#</a> Becareful to mutability</h2>
<p>Be warned that the target is always modified.
Since the most frequent use-case is the creation of a new object that will be
generated from others sources, most of the time we will pass an new empty object
as the first parameter.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o1 = { x: <span class="hljs-number">1</span> }
<span class="hljs-keyword">const</span> o2 = { y: <span class="hljs-number">2</span> }
<span class="hljs-keyword">const</span> o = <span class="hljs-built_in">Object</span>.assign({}, o1, o2)
o <span class="hljs-comment">// { x: 1, y: 2 }</span>
<span class="hljs-comment">// o1 and o2 are unmodified</span></code></pre>
<h2 id="specific-use-cases"><a class="markdownIt-Anchor" href="#specific-use-cases">#</a> Specific use-cases</h2>
<h3 id="error-during-the-copy"><a class="markdownIt-Anchor" href="#error-during-the-copy">#</a> Error during the copy</h3>
<p>If a property in the target is read-only, <code>Object.assign</code> should behave like
in strict mode (unlike the <em>wtf</em> mode) and throw an error before stoping the
copy.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = <span class="hljs-built_in">Object</span>.create({}, {
  val: { value: <span class="hljs-number">42</span>, enumerable: <span class="hljs-literal">true</span>, writable: <span class="hljs-literal">false</span> }
})

<span class="hljs-comment">// "standard" (wtf) mode:</span>
o.val = <span class="hljs-number">0</span> <span class="hljs-comment">// no error</span>
o.val <span class="hljs-comment">// 42 (unmodified value)</span>
<span class="hljs-built_in">Object</span>.assign(o, { x: <span class="hljs-number">1</span>, val: <span class="hljs-number">0</span>, y: <span class="hljs-number">2</span> }) <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
o <span class="hljs-comment">// { val: 42, x: 1 }</span>

<span class="hljs-comment">// "strict" mode:</span>
o.val = <span class="hljs-number">0</span> <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
<span class="hljs-built_in">Object</span>.assign(o, { x: <span class="hljs-number">1</span>, val: <span class="hljs-number">0</span>, y: <span class="hljs-number">2</span> }) <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
o <span class="hljs-comment">// { val: 42, x: 1 }</span></code></pre>
<p>Keys that have already been copied before the throwing of the exception will
be kept in the target object, that’s why in our example <code>x</code> have been copied
but not <code>y</code>.</p>
<p>Note: this is theory, but practise show us that this behavior is variable,
depending of the platform and the context, the error might not always be thrown.
To get a predictable behavior, you should work in <em>strict</em> mode.</p>
<h3 id="scalar-sources"><a class="markdownIt-Anchor" href="#scalar-sources">#</a> Scalar sources</h3>
<p>When sources are scalar values (number, boolean, etc) <code>Object.keys</code> will not
return any keys and values will be ignored.
<code>null</code> and <code>undefined</code> will also be ignored.</p>
<p>Particular case: strings are treated as array.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = {}
<span class="hljs-built_in">Object</span>.assign(o, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"toto"</span>, [<span class="hljs-string">"b"</span>, <span class="hljs-string">"a"</span>], <span class="hljs-literal">undefined</span>)
<span class="hljs-comment">// 1, true, null, undefined are ignored</span>
<span class="hljs-comment">// "toto" is converted to {0: "t", 1: "o", 2: "t", 3: "o"}</span>
<span class="hljs-comment">// ["b", "a"] is converted to {0: "b", 1: "a"}</span>
o <span class="hljs-comment">// {0: "b", 1: "a", 2: "t", 3: "o"}</span></code></pre>
<h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion">#</a> Conclusion</h2>
<p>We can forget <code>_.clone</code>, <code>_.extend</code> and friends with this method!</p>
<p>About compatiblity, <code>Object.assign</code> is pretty well supported by all modern
browsers (IE is not considered as modern until 12) :</p>
<ul>
<li>Edge (IE ≥ 12) ;</li>
<li>Chrome stable (46) ;</li>
<li>Firefox stable (42) ;</li>
<li>Node ≥ 4 ;</li>
<li>If you need to support old browsers, you will need <a href="http://babeljs.io">Babel</a>
or one of many users implementations.</li>
</ul>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/object-assign/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/object-assign/</guid><pubDate>Fri, 04 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : Object.assign]]></title><description><![CDATA[<p>Vous connaissez les méthodes <code>extend</code> d’underscore ou lodash (mais plutôt
lodash quand même) ? Comme la plupart de ces fonctions utilitaires, elles sont
rendues obsolètes par une fonctionnalité d’ES6 (aka ES2015).</p>
<h1 id="object-assign"><a class="markdownIt-Anchor" href="#object-assign">#</a> Object.assign</h1>
<p>La nouvelle méthode statique <code>Object.assign</code> prend en paramètres une série
d’objets :</p>
<ul>
<li>le premier objet est la “cible” des copies ;</li>
<li>les suivants sont les sources ;</li>
<li>toutes les clés propres (<em>own properties</em>, soit les clés énumérables et non
héritées, même celles dont la valeur est <code>undefined</code>) des sources sont
copiées vers la cible (les suivantes écrasant les précédentes) ;</li>
<li><strong>l’objet cible est donc modifié</strong> (il doit être mutable) ;</li>
<li>puis on retourne l’objet cible.</li>
</ul>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = { y: <span class="hljs-number">0</span> }
<span class="hljs-keyword">const</span> o1 = { x: <span class="hljs-number">1</span>, y: <span class="hljs-number">2</span> }
<span class="hljs-keyword">const</span> o2 = { x: <span class="hljs-literal">undefined</span>, z: <span class="hljs-number">3</span> }
<span class="hljs-built_in">Object</span>.assign(o, o1, o2) <span class="hljs-comment">// { x: undefined, y: 2, z: 3 }</span>
o <span class="hljs-comment">// { x: undefined, y: 2, z: 3 }</span>
o1 <span class="hljs-comment">// non modifié</span>
o2 <span class="hljs-comment">// non modifié</span></code></pre>
<h2 id="attention-la-mutabilit"><a class="markdownIt-Anchor" href="#attention-la-mutabilit">#</a> Attention à la mutabilité</h2>
<p>Prenez garde au fait que la source est systématiquement modifiée. Le <em>use-case</em>
général étant plutôt la création d’un nouvel objet résultant de la fusion des
sources, on passera habituellement un nouvel objet en premier paramètre.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o1 = { x: <span class="hljs-number">1</span> }
<span class="hljs-keyword">const</span> o2 = { y: <span class="hljs-number">2</span> }
<span class="hljs-keyword">const</span> o = <span class="hljs-built_in">Object</span>.assign({}, o1, o2)
o <span class="hljs-comment">// { x: 1, y: 2 }</span>
<span class="hljs-comment">// o1 et o2 n'ont pas été modifiés</span></code></pre>
<h2 id="cas-particuliers"><a class="markdownIt-Anchor" href="#cas-particuliers">#</a> Cas particuliers</h2>
<h3 id="erreurs-lors-de-la-copie"><a class="markdownIt-Anchor" href="#erreurs-lors-de-la-copie">#</a> Erreurs lors de la copie</h3>
<p>Si une propriété de la cible est en lecture seule, <code>Object.assign</code> devrait se
comporter comme en mode <em>strict</em> (par opposition au mode <em>WTF</em>), et lever
l’erreur correspondante avant d’interrompre la copie.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = <span class="hljs-built_in">Object</span>.create({}, {
  val: { value: <span class="hljs-number">42</span>, enumerable: <span class="hljs-literal">true</span>, writable: <span class="hljs-literal">false</span> }
})

<span class="hljs-comment">// En mode "standard":</span>
o.val = <span class="hljs-number">0</span> <span class="hljs-comment">// pas d'erreur</span>
o.val <span class="hljs-comment">// 42 (valeur non modifiée)</span>
<span class="hljs-built_in">Object</span>.assign(o, { x: <span class="hljs-number">1</span>, val: <span class="hljs-number">0</span>, y: <span class="hljs-number">2</span> }) <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
o <span class="hljs-comment">// { val: 42, x: 1 }</span>

<span class="hljs-comment">// En mode "strict":</span>
o.val = <span class="hljs-number">0</span> <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
<span class="hljs-built_in">Object</span>.assign(o, { x: <span class="hljs-number">1</span>, val: <span class="hljs-number">0</span>, y: <span class="hljs-number">2</span> }) <span class="hljs-comment">// Uncaught TypeError: Cannot assign…</span>
o <span class="hljs-comment">// { val: 42, x: 1 }</span></code></pre>
<p>Les clés déjà copiées avant la levée d’erreur sont conservées dans la cible,
ainsi dans notre exemple <code>x</code> a été copiée mais pas <code>y</code>.</p>
<p>Note : ça c’est la théorie, lors de mes tests ce comportement a été le plus
variable, en fonction de la plate-forme et du contexte, l’erreur n’est pas
toujours levée. Le mieux est de travailler en mode <em>strict</em> pour s’assurer d’un
comportement prédictible.</p>
<h3 id="sources-scalaires"><a class="markdownIt-Anchor" href="#sources-scalaires">#</a> Sources scalaires</h3>
<p>Lorsque les sources sont des valeurs scalaires (nombre, booléen, etc.)
<code>Object.keys</code> ne listera généralement aucune clé et ces valeurs seront donc
ignorées. Les valeurs <code>null</code> et <code>undefined</code> également.</p>
<p>Cas particulier : les chaînes de caractères sont traitées comme des tableaux.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> o = {}
<span class="hljs-built_in">Object</span>.assign(o, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"toto"</span>, [<span class="hljs-string">"b"</span>, <span class="hljs-string">"a"</span>], <span class="hljs-literal">undefined</span>)
<span class="hljs-comment">// 1, true, null, undefined sont ignorées</span>
<span class="hljs-comment">// "toto" est converti en {0: "t", 1: "o", 2: "t", 3: "o"}</span>
<span class="hljs-comment">// ["b", "a"] est converti en {0: "b", 1: "a"}</span>
o <span class="hljs-comment">// {0: "b", 1: "a", 2: "t", 3: "o"}</span></code></pre>
<h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion">#</a> Conclusion</h2>
<p>Plus besoin de <code>_.clone</code>, <code>_.extend</code>, etc. avec cette méthode :)</p>
<p>Pour finir, le topo compatibilité : <code>Object.assign</code> est plutôt bien supportée
par les navigateurs modernes (donc pas IE) :</p>
<ul>
<li>Edge (IE ≥ 12) ;</li>
<li>Chrome stable (46) ;</li>
<li>Firefox stable (42) ;</li>
<li>Node ≥ 4 ;</li>
<li>et si vous devez supporter IE, il y a bien sûr <a href="http://babeljs.io/">Babel</a>
ou les nombreuses implémentations utilisateur.</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/object-assign/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/object-assign/</guid><pubDate>Fri, 04 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015: default values for arguments]]></title><description><![CDATA[<p>Tired of typing <code>if (typeof x === 'undefined') x = defaultValue</code>? Again, ES6
will brings us a elegant solution.</p>
<h1 id="default-values"><a class="markdownIt-Anchor" href="#default-values">#</a> Default values</h1>
<p>The <code>=</code> operator can now help to define a default value to a parameter.</p>
<h2 id="function-parameters"><a class="markdownIt-Anchor" href="#function-parameters">#</a> Function parameters</h2>
<p>You can now specify a default value for a parameter of a function.
This value will be used if the parameter is not defined, or explicitly set to
<em>undefined</em>.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incr</span> (<span class="hljs-params">value, step = 1</span>) </span>{
  <span class="hljs-keyword">return</span> value + step
}

incr(<span class="hljs-number">41</span>) <span class="hljs-comment">// 42</span>
incr(<span class="hljs-number">41</span>, <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// 42</span>
incr(<span class="hljs-number">33</span>, <span class="hljs-number">9</span>) <span class="hljs-comment">// 42</span></code></pre>
<h3 id="dynamic-default-values"><a class="markdownIt-Anchor" href="#dynamic-default-values">#</a> Dynamic default values</h3>
<p>We can specify an expression as a default value.
This expression will be evalued <strong>during the function call</strong>, not during the
function declaration.</p>
<pre><code class="language-js"><span class="hljs-keyword">let</span> defaultWho = <span class="hljs-string">'world!'</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span> (<span class="hljs-params">who = defaultWho.toUpperCase(</span>)) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello '</span> + who
}

hello() <span class="hljs-comment">// 'Hello WORLD!'</span>
defaultWho = <span class="hljs-string">'Anyone?'</span>
hello() <span class="hljs-comment">// 'Hello ANYONE?'</span></code></pre>
<h3 id="reusing-previous-parameters"><a class="markdownIt-Anchor" href="#reusing-previous-parameters">#</a> Reusing previous parameters</h3>
<p>In the default value expression, you can reuse <strong>previous</strong> function parameters:</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = 1, y = x + 1</span>) </span>{
  <span class="hljs-keyword">return</span> x + y
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span> (<span class="hljs-params">x = y + 1, y = 1</span>) </span>{
  <span class="hljs-keyword">return</span> x + y
}

foo() <span class="hljs-comment">// 1 + (1 + 1) → 3</span>
bar() <span class="hljs-comment">// (undefined + 1) + 1 → NaN</span></code></pre>
<h3 id="particular-case-tdz-temporal-dead-zone"><a class="markdownIt-Anchor" href="#particular-case-tdz-temporal-dead-zone">#</a> Particular case: TDZ (Temporal Dead Zone)</h3>
<p>A temporal dead zone is an area of your program where a variable exists, but is
not available yet while it didn’t get its value.</p>
<p>The following example is obviously invalid:</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = x</span>) </span>{ <span class="hljs-comment">// throws ReferenceError?</span>
}</code></pre>
<p>In fact, during the call of the function, <code>x</code> has not been defined yet,
so it cannot be used as a default value.
This example should trigger an
<a href="http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters">error</a></p>
<p>However, scope rules will make this example invalid:</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> x = <span class="hljs-number">1</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = x</span>) </span>{ <span class="hljs-comment">// 'x' used here is the parameter itself</span>
}</code></pre>
<p>After the evaluation of the default values, we are in the scope of the function
and in this scope, <code>x</code> corresponds to the parameter (not defined yet) and not
the value defined above.</p>
<p><strong>ProTip: do not reuse a variable name 3 times</strong>
(that might helps to read and understand your code).</p>
<h2 id="destructuring"><a class="markdownIt-Anchor" href="#destructuring">#</a> Destructuring</h2>
<p>Like for the function arguments, assignments using
<a href="/en/articles/js/es2015/destructuring/">destructuring</a>
can have a default value.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> obj = {z: <span class="hljs-number">42</span>} 
<span class="hljs-keyword">const</span> { x = <span class="hljs-number">1</span>, y = x + <span class="hljs-number">1</span>, z, w } = obj
w <span class="hljs-comment">// undefined</span>
x <span class="hljs-comment">// 1</span>
y <span class="hljs-comment">// 2</span>
z <span class="hljs-comment">// 42</span></code></pre>
<p>As a reminder, the assignation in the previous example would have been written
this way using ES5:</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> x = (obj.x === <span class="hljs-literal">undefined</span>) ? <span class="hljs-number">1</span> : obj.x 
<span class="hljs-keyword">var</span> y = (obj.y === <span class="hljs-literal">undefined</span>) ? x + <span class="hljs-number">1</span> : obj.y 
<span class="hljs-keyword">var</span> z = obj.z
<span class="hljs-keyword">var</span> w = obj.w</code></pre>
<h1 id="enjoy"><a class="markdownIt-Anchor" href="#enjoy">#</a> Enjoy!</h1>
<p>There is no more reasons <em>a priori</em> to see an <code>undefined</code> in an ES6 codebase.</p>
<p>About the compatibility (at the time of the writing): only Firefox ≥ 43
support this feature (and just for function…).
So you will need <a href="http://babeljs.io">Babel</a> or Traceur to be able to use it.</p>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/defaults/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/defaults/</guid><pubDate>Thu, 03 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les valeurs par défaut des arguments]]></title><description><![CDATA[<p>Fatigués de taper <code>if (typeof x === 'undefined') x = defaultValue</code> ? Là encore
ES6 va nous apporter une solution élégante.</p>
<h1 id="valeurs-par-d-faut"><a class="markdownIt-Anchor" href="#valeurs-par-d-faut">#</a> Valeurs par défaut</h1>
<p>L’opérateur <code>=</code> permet maintenant en plus d’affecter une valeur à une variable
de définir une valeur par défaut à un paramètre.</p>
<h2 id="param-tres-de-fonction"><a class="markdownIt-Anchor" href="#param-tres-de-fonction">#</a> Paramètres de fonction</h2>
<p>Il est maintenant possible de spécifier une valeur par défaut à un paramètre de
fonction. Cette valeur sera utilisée si le paramètre n’est pas fourni, ou qu’il
est explicitement défini à <em>undefined</em>.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incr</span> (<span class="hljs-params">value, step = 1</span>) </span>{
  <span class="hljs-keyword">return</span> value + step
}

incr(<span class="hljs-number">41</span>) <span class="hljs-comment">// 42</span>
incr(<span class="hljs-number">41</span>, <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// 42</span>
incr(<span class="hljs-number">33</span>, <span class="hljs-number">9</span>) <span class="hljs-comment">// 42</span></code></pre>
<h3 id="valeurs-par-d-faut-dynamiques"><a class="markdownIt-Anchor" href="#valeurs-par-d-faut-dynamiques">#</a> Valeurs par défaut dynamiques</h3>
<p>On peut spécifier une expression en tant que valeur par défaut. Cette expression
sera évaluée <strong>à l’appel de la fonction</strong>, pas lors de sa déclaration.</p>
<pre><code class="language-js"><span class="hljs-keyword">let</span> defaultWho = <span class="hljs-string">'world!'</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span> (<span class="hljs-params">who = defaultWho.toUpperCase(</span>)) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello '</span> + who
}

hello() <span class="hljs-comment">// 'Hello WORLD!'</span>
defaultWho = <span class="hljs-string">'Anyone?'</span>
hello() <span class="hljs-comment">// 'Hello ANYONE?'</span></code></pre>
<h3 id="r-utilisation-des-param-tres-pr-c-dents"><a class="markdownIt-Anchor" href="#r-utilisation-des-param-tres-pr-c-dents">#</a> Réutilisation des paramètres précédents</h3>
<p>Dans l’expression d’une valeur par défaut, on peut réutiliser les paramètres
<strong>précédents</strong> de la fonction :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = 1, y = x + 1</span>) </span>{
  <span class="hljs-keyword">return</span> x + y
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span> (<span class="hljs-params">x = y + 1, y = 1</span>) </span>{
  <span class="hljs-keyword">return</span> x + y
}

foo() <span class="hljs-comment">// 1 + (1 + 1) → 3</span>
bar() <span class="hljs-comment">// (undefined + 1) + 1 → NaN</span></code></pre>
<h3 id="cas-particulier-tdz-temporal-dead-zone"><a class="markdownIt-Anchor" href="#cas-particulier-tdz-temporal-dead-zone">#</a> Cas particulier : TDZ (Temporal Dead Zone)</h3>
<p>Une <em>temporal dead zone</em> désigne une zone du programme où une variable “existe”
mais n’est pas encore accessible tant qu’elle n’a pas reçu de valeur.</p>
<p>L’exemple suivant semble très logiquement invalide :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = x</span>) </span>{ <span class="hljs-comment">// throws ReferenceError?</span>
}</code></pre>
<p>En effet, au moment de l’appel à la fonction, <code>x</code> n’a pas encore été défini,
et ne peut donc être utilisé comme valeur par défaut. Il semble que cet exemple
devrait <a href="http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters">lever une erreur</a>.</p>
<p>Néanmoins, les règles de portée font que ce programme est également invalide :</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> x = <span class="hljs-number">1</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">x = x</span>) </span>{ <span class="hljs-comment">// Le 'x' référencé ici est le paramètre</span>
}</code></pre>
<p>On est bien, dès l’évaluation des valeurs par défaut, dans le scope de la
fonction, et dans ce scope <code>x</code> fait référence au paramètre (pas encore défini)
et pas à la variable du dessus.</p>
<p><strong>ProTip:  ne réutilisez pas 3 fois le même nom de variable</strong>
(ça pourra aussi aider à la compréhension).</p>
<h2 id="d-composition"><a class="markdownIt-Anchor" href="#d-composition">#</a> Décomposition</h2>
<p>De la même manière que pour les paramètres de fonction, les affectations par
décomposition
(<a href="/fr/articles/js/es2015/destructuring/">destructuring</a>)
peuvent bénéficier de valeurs par défaut.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> obj = {z: <span class="hljs-number">42</span>} 
<span class="hljs-keyword">const</span> { x = <span class="hljs-number">1</span>, y = x + <span class="hljs-number">1</span>, z, w } = obj
w <span class="hljs-comment">// undefined</span>
x <span class="hljs-comment">// 1</span>
y <span class="hljs-comment">// 2</span>
z <span class="hljs-comment">// 42</span></code></pre>
<p>Pour rappel, l’affectation de l’exemple précédent aurait été écrit de cette
manière en ES5 :</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> x = (obj.x === <span class="hljs-literal">undefined</span>) ? <span class="hljs-number">1</span> : obj.x 
<span class="hljs-keyword">var</span> y = (obj.y === <span class="hljs-literal">undefined</span>) ?  x + <span class="hljs-number">1</span> : obj.y
<span class="hljs-keyword">var</span> z = obj.z
<span class="hljs-keyword">var</span> w = obj.w</code></pre>
<h1 id="enjoy"><a class="markdownIt-Anchor" href="#enjoy">#</a> Enjoy!</h1>
<p>Il n’y a <em>a priori</em> plus aucune raison de croiser un test sur <code>undefined</code> dans
votre code une fois passé à ES6.</p>
<p>Un petit mot sur la compatibilité (à la date de cet article) : seul Firefox ≥ 43
implémente les valeurs par défaut, et encore seulement pour les paramètres de
fonctions.
Il faudra donc utiliser <a href="http://babeljs.io">Babel</a> ou Traceur pour en profiter.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/defaults/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/defaults/</guid><pubDate>Thu, 03 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : le destructuring]]></title><description><![CDATA[<h2 id="le-principe"><a class="markdownIt-Anchor" href="#le-principe">#</a> Le principe</h2>
<p>Le destructuring consiste à assigner des variables provenant d’un objet ou
tableau en reposant sur leur structure.</p>
<pre><code class="language-js"><span class="hljs-comment">// Partons d'un objet `myObject`</span>
<span class="hljs-keyword">var</span> myObject = {
  foo: <span class="hljs-number">1</span>,
  bar: <span class="hljs-number">2</span>,
}

<span class="hljs-comment">// Avec ES5, vous deviez par exemple faire</span>
<span class="hljs-keyword">var</span> foo = myObject.foo
<span class="hljs-keyword">var</span> bar = myObject.bar

foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span>

<span class="hljs-comment">// Avec ES6, vous pouvez désormais l'écrire sous la forme</span>
<span class="hljs-keyword">const</span> { foo, bar } = myObject
foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span>

<span class="hljs-comment">// On peut bien entendu destructurer la valeur retournée par une</span>
<span class="hljs-comment">// fonction, pour peu qu'il s'agisse d'un objet ou d'un tableau</span>
<span class="hljs-keyword">const</span> getMyObject = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> {
    foo: <span class="hljs-number">1</span>,
    bar: <span class="hljs-number">2</span>,
  }
}
<span class="hljs-keyword">const</span> { foo, bar } = getMyObject()
foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span></code></pre>
<h2 id="les-diff-rentes-syntaxes"><a class="markdownIt-Anchor" href="#les-diff-rentes-syntaxes">#</a> Les différentes syntaxes</h2>
<h3 id="tableau"><a class="markdownIt-Anchor" href="#tableau">#</a> Tableau</h3>
<pre><code class="language-js"><span class="hljs-comment">// Pour un tableau, on utilise une forme proche de la déclaration litérale de</span>
<span class="hljs-comment">// tableau, vous remarquerez que pour ignorer un item, il suffit de ne rien</span>
<span class="hljs-comment">// placer entre les virgules</span>
<span class="hljs-keyword">const</span> [ first, second, , fourth ] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]
first <span class="hljs-comment">// 1</span>
second <span class="hljs-comment">// 2</span>
fourth <span class="hljs-comment">// 4</span></code></pre>
<h3 id="utiliser-un-nom-diff-rent-de-la-cl"><a class="markdownIt-Anchor" href="#utiliser-un-nom-diff-rent-de-la-cl">#</a> Utiliser un nom différent de la clé</h3>
<p>Pour un objet, par défaut, le nom de la variable correspond au nom de la clé.
Si, par exemple, vous avez déjà une variable portant le nom de la clé dans le
scope, vous pouvez choisir de nommer différemment votre variable.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myObject = {
  foo: <span class="hljs-number">1</span>,
  bar: <span class="hljs-number">2</span>
}
<span class="hljs-keyword">const</span> { foo: renamedFoo } = myObject
renamedFoo <span class="hljs-comment">// 1</span></code></pre>
<p>Cette syntaxe est, il faut tout de même le noter, peu lisible.</p>
<h3 id="arguments-de-fonctions"><a class="markdownIt-Anchor" href="#arguments-de-fonctions">#</a> Arguments de fonctions</h3>
<pre><code class="language-js"><span class="hljs-comment">// On peut directement utiliser le destructuring dans une déclaration de</span>
<span class="hljs-comment">// fonction</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">{ title, text }</span>) </span>{
	<span class="hljs-keyword">return</span> title + <span class="hljs-string">": "</span> + text
}

myFunction({ title: <span class="hljs-string">"foo"</span>, text: <span class="hljs-string">"bar"</span> }) <span class="hljs-comment">// "foo: bar"</span></code></pre>
<h3 id="nested-destructuring"><a class="markdownIt-Anchor" href="#nested-destructuring">#</a> Nested destructuring</h3>
<p>On peut aussi imbriquer les assignements.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myObject = {
  foo: {
    bar: <span class="hljs-number">1</span>,
  },
}
<span class="hljs-keyword">const</span> { foo: { bar } } = myObject
bar <span class="hljs-comment">// 1</span></code></pre>
<p>Attention cependant, si le destructuring au premier niveau ne fera que retourner
<code>undefined</code> si la valeur n’existe pas, vous aurez bel et bien une erreur avec le
nesting, puisqu’il essaiera d’aller chercher une propriété d’<code>undefined</code>.
Pour pallier ces soucis, rendez-vous pour l’article sur les
<a href="/fr/articles/js/es2015/defaults/">defaults</a>.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/destructuring/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/destructuring/</guid><pubDate>Wed, 02 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : the destructuring]]></title><description><![CDATA[<p>The destructuring is a feature that helps you assign variables from an object or
an array based on their structure.</p>
<pre><code class="language-js"><span class="hljs-comment">// Let's consider this object `myObject`</span>
<span class="hljs-keyword">var</span> myObject = {
  foo: <span class="hljs-number">1</span>,
  bar: <span class="hljs-number">2</span>,
}

<span class="hljs-comment">// With ES5, you need to do</span>
<span class="hljs-keyword">var</span> foo = myObject.foo
<span class="hljs-keyword">var</span> bar = myObject.bar

foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span>

<span class="hljs-comment">// With ES6, you can write the same with</span>
<span class="hljs-keyword">const</span> { foo, bar } = myObject
foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span>

<span class="hljs-comment">// We can even destructure the value returned by a function (if this one</span>
<span class="hljs-comment">// returns a function or an array)</span>
<span class="hljs-keyword">const</span> getMyObject = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> {
    foo: <span class="hljs-number">1</span>,
    bar: <span class="hljs-number">2</span>,
  }
}
<span class="hljs-keyword">const</span> { foo, bar } = getMyObject()
foo <span class="hljs-comment">// 1</span>
bar <span class="hljs-comment">// 2</span></code></pre>
<h2 id="different-syntaxes"><a class="markdownIt-Anchor" href="#different-syntaxes">#</a> Different syntaxes</h2>
<h3 id="array"><a class="markdownIt-Anchor" href="#array">#</a> Array</h3>
<pre><code class="language-js"><span class="hljs-comment">// For an array, we can use a syntax that is similar to a literal declaration</span>
<span class="hljs-comment">// of an array</span>
<span class="hljs-comment">// You might notice that you can ignore an item by just put nothing between the</span>
<span class="hljs-comment">// commas</span>
<span class="hljs-keyword">const</span> [ first, second, , fourth ] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]
first <span class="hljs-comment">// 1</span>
second <span class="hljs-comment">// 2</span>
fourth <span class="hljs-comment">// 4</span></code></pre>
<h3 id="use-a-different-name-for-the-key"><a class="markdownIt-Anchor" href="#use-a-different-name-for-the-key">#</a> Use a different name for the key</h3>
<p>For an object, the default behavior is that the name of a variable will match
the name of the key.
So if you have already a variable with this name, you can choose another one.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myObject = {
  foo: <span class="hljs-number">1</span>,
  bar: <span class="hljs-number">2</span>
}
<span class="hljs-keyword">const</span> { foo: renamedFoo } = myObject
renamedFoo <span class="hljs-comment">// 1</span></code></pre>
<p>This syntax doesn’t offer a good readability.</p>
<h3 id="function-arguments"><a class="markdownIt-Anchor" href="#function-arguments">#</a> Function arguments</h3>
<pre><code class="language-js"><span class="hljs-comment">// We can use destructuring directing in a function declaration</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">{ title, text }</span>) </span>{
	<span class="hljs-keyword">return</span> title + <span class="hljs-string">": "</span> + text
}

myFunction({ title: <span class="hljs-string">"foo"</span>, text: <span class="hljs-string">"bar"</span> }) <span class="hljs-comment">// "foo: bar"</span></code></pre>
<h3 id="nested-destructuring"><a class="markdownIt-Anchor" href="#nested-destructuring">#</a> Nested destructuring</h3>
<p>We can also nest the assignments.</p>
<pre><code class="language-js"><span class="hljs-keyword">var</span> myObject = {
  foo: {
    bar: <span class="hljs-number">1</span>,
  },
}
<span class="hljs-keyword">const</span> { foo: { bar } } = myObject
bar <span class="hljs-comment">// 1</span></code></pre>
<p>Be careful, if the destructuring of the first level should return <code>undefined</code>
(if the value doesn’t exist), be sure that you will have a nesting error, since
a value will try to be retrieved from an <code>undefined</code> property.
To prevent this issue, you will need to define
<a href="/en/articles/js/es2015/defaults/">defaults</a> values.</p>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/destructuring/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/destructuring/</guid><pubDate>Wed, 02 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : la déclaration de variables avec const, let et var]]></title><description><![CDATA[<p>ES6 (aussi appelé ES2015) vous apporte de nouvelles façons de déclarer vos
variables grâce à <code>let</code> et <code>const</code> mais garde aussi la déclaration par <code>var</code>
dans la spécification du langage.</p>
<p>Première étape, on oublie tout ce qu’on sait sur <code>var</code>.</p>
<h1 id="d-clarations"><a class="markdownIt-Anchor" href="#d-clarations">#</a> Déclarations</h1>
<h2 id="const"><a class="markdownIt-Anchor" href="#const">#</a> const</h2>
<p><code>const</code> vous permet de déclarer une variable à assignation unique bindée
lexicalement. Bon, ça fait un peu pompeux, alors pour les devs au fond de la
salle à côté du radiateur, ça veut simplement dire que vous pouvez déclarer une
variable qui ne contiendra qu’une valeur et qui sera scopée au niveau du bloc.</p>
<p>Si vous avez déjà lu des posts ou des ressources parlant de <code>const</code>, méfiez-vous
: ce ne sont pas des vraies constantes au sens <em>valeur</em> de variable. Ce sont des
constantes au niveau référence. C’est à dire que le contenu d’un tableau ou d’un
objet déclaré avec <code>const</code> bloque la réassignation de la variable, mais ne rend
pas la valeur immuable.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">const</span> foo <span class="hljs-comment">// SyntaxError, la variable a besoin d'être assignée</span>
    <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"qux"</span>
    foo = <span class="hljs-string">"norf"</span> <span class="hljs-comment">// SyntaxError, la variable ne peut pas être réassignée</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", la variable appartient au scope de son bloc (le "if")</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", la variable appartient au scope de la fonction "fn"</span>
}</code></pre>
<p>Le fonctionnement <code>const</code> peut être utilisé de manière cool dans le cas
d’itérables :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> el <span class="hljs-keyword">of</span> arr) {
    <span class="hljs-built_in">console</span>.log(el)
  }
}</code></pre>
<p>En effet, on pourrait croire qu’un <code>let</code> doit être utilisé ici, mais la
déclaration est évaluée à chaque passage de l’itérateur, <code>const</code> est donc un
meilleur choix !</p>
<h2 id="let"><a class="markdownIt-Anchor" href="#let">#</a> let</h2>
<p><code>let</code> vous permet de faire pareil que <code>const</code> mais sans la contrainte
d’assignation unique. Vous devriez donc instinctivement voir que les cas
d’utilisation pour <code>let</code> sont les mêmes que ceux de <code>var</code>, son ancêtre.
D’ailleurs, vous entendrez souvent : <code>let</code> est le nouveau <code>var</code> (<em><code>let</code> is the
new <code>var</code></em>). C’est en partie vrai car il est capable de faire les mêmes choses,
mais en mieux, car il a cette caractéristique d’être scopé au bloc courant.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">var</span> foo2 = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">let</span> foo <span class="hljs-comment">// pas d'erreur, foo === undefined</span>
    <span class="hljs-keyword">var</span> foo2
    <span class="hljs-comment">// Attention, les déclarations "var" ne sont pas scopées au niveau bloc</span>
    <span class="hljs-comment">// foo2 est en réalité écrasé !</span>
    foo = <span class="hljs-string">"qux"</span>
    foo2 = <span class="hljs-string">"qux"</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", la variable appartient au scope de son blocs (le "if")</span>
    <span class="hljs-built_in">console</span>.log(foo2)
    <span class="hljs-comment">// "qux"</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", la variable appartient au scope de son bloc (la fonction "fn")</span>
  <span class="hljs-built_in">console</span>.log(foo2)
  <span class="hljs-comment">// "qux"</span>
}</code></pre>
<p>Vous pouvez par exemple utiliser <code>let</code> pour vos boucles, la variable servant à
l’itération est désormais scopée au niveau de cette boucle et n’entrera pas en
conflit avec votre code autour. Plus de problème de <code>i</code> déjà pris !</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=i; i&lt;<span class="hljs-number">10</span>; i++) {
    <span class="hljs-built_in">console</span>.log(i)
  }
  <span class="hljs-built_in">console</span>.log(i)
  <span class="hljs-comment">// 0</span>

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j=i; j&lt;<span class="hljs-number">10</span>; j++) {}
  <span class="hljs-built_in">console</span>.log(j)
  <span class="hljs-comment">// j is not defined</span>
}
fn2() <span class="hljs-comment">// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span></code></pre>
<p>Note : l’exemple avec <code>const</code> dans une boucle <code>for ... of</code> ne peut être
reproduit ici. En effet, la boucle <code>for</code> classique est impérative, et la
déclaration n’est effectuée qu’une seule fois au début de la boucle. Un <code>const</code>
n’est donc pas utilisable.</p>
<h2 id="var"><a class="markdownIt-Anchor" href="#var">#</a> var</h2>
<p>On a vu <code>const</code>, on a vu <code>let</code>. Avec ces deux nouveaux outils, il ne reste pas
de grande place pour <code>var</code>. À mon avis, le seul cas d’utilisation valable pour
<code>var</code> est lors de l’utilisation de <code>try</code>/<code>catch</code>, et ce n’est pas dans le cadre
d’un bug, mais juste de syntaxe et de préférence
(<a href="https://twitter.com/getify/status/658662478528643072">exemple</a>).</p>
<h1 id="pi-ge-du-hoisting-et-de-la-tdz-temporal-dead-zone"><a class="markdownIt-Anchor" href="#pi-ge-du-hoisting-et-de-la-tdz-temporal-dead-zone">#</a> Piège du hoisting et de la TDZ (<em>Temporal Dead Zone</em>)</h1>
<p>Pour rappel, JavaScript possède un mécanisme de hoisting, par exemple, vous
pouvez écrire :</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo) <span class="hljs-comment">// undefined (au lieu de ReferenceError)</span>
  <span class="hljs-keyword">var</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<p>Concrètement, le moteur d’exécution JavaScript va lire toutes les déclarations
et remonter celles avec <code>var</code> au début du scope de votre fonction (attention,
cela concerne les déclarations, pas les affectations).</p>
<p><code>let</code> et <code>const</code> ne bénéficient pas de ce mécanisme de hoisting, ce qui peut
mener à des problèmes de TDZ (<em>Temporal Dead Zone</em>). Vu que la déclaration de
votre variable n’est pas remontée au scope de la fonction, il existe un moment
où votre variable n’existe pas. Ce moment, c’est la TDZ.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// ReferenceError, on est dans la TDZ pour la variable foo</span>
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<h1 id="outro"><a class="markdownIt-Anchor" href="#outro">#</a> Outro</h1>
<p>Comment choisir quelle déclaration de variable utiliser ? C’est très simple :</p>
<ul>
<li>Utilisez une déclaration par <code>const</code> (99% du temps, c’est le bon choix)</li>
<li>Si au fil de votre code vous changez sa valeur, modifiez pour un <code>let</code> (1%)</li>
<li>Si vous avez trouvé le pire cas d’utilisation du monde, changez pour un <code>var</code>
(je vous laisse faire le calcul)</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/const-let-var/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/const-let-var/</guid><pubDate>Tue, 01 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015: declaring variables with const, let and var]]></title><description><![CDATA[<p>ES6 (also known as ES2015) brings you new ways to declare your variables thanks
to <code>let</code> and <code>const</code>, but also keeps <code>var</code> in the language specification.</p>
<p>The first thing you need to do: forget everything you know about <code>var</code>.</p>
<h1 id="declarations"><a class="markdownIt-Anchor" href="#declarations">#</a> Declarations</h1>
<h2 id="const"><a class="markdownIt-Anchor" href="#const">#</a> const</h2>
<p><code>const</code> allows you to declare a single assignment variable lexically bound.
Sounds posh right? That just means that you can only assign once a value in a
variable, scoped at the block level.</p>
<p>If you have already read stuff about <code>const</code>, be careful: this is not a way to
declare immutable variables. Only the assigned reference is immutable, not the
value. This means that the content of an array or an object declared using
<code>const</code> can evolve but the re-assignment of the reference is impossible.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">const</span> foo <span class="hljs-comment">// SyntaxError, variable needs to be assigned to something</span>
    <span class="hljs-keyword">const</span> foo = <span class="hljs-string">"qux"</span>
    foo = <span class="hljs-string">"norf"</span> <span class="hljs-comment">// SyntaxError, variable cannot be re-assigned</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", variable belongs to the scope of the current block (the "if" one)</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", variable belongs to the scope of the "fn" function</span>
}</code></pre>
<p>Just a fancy trick using <code>const</code> with an iterator:</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> el <span class="hljs-keyword">of</span> arr) {
    <span class="hljs-built_in">console</span>.log(el)
  }
}</code></pre>
<p>You might think a <code>let</code> should be used here but the declaration is evaluated
on each iteration, so <code>const</code> fits better here.</p>
<h2 id="let"><a class="markdownIt-Anchor" href="#let">#</a> let</h2>
<p><code>let</code> allows you to do the same as <code>const</code> without the single assignment
constraint. So you can understand here that the use-cases are the same as for
its ancestor, <code>var</code>.
By the way, you might have been told that <em><code>let</code> is the new <code>var</code></em>.
It is partly true because it can do the same, but even better if we consider
the ability of the variable to be scoped to the block level.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">var</span> foo2 = <span class="hljs-string">"bar"</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">let</span> foo <span class="hljs-comment">// that's ok (foo === undefined)</span>
    <span class="hljs-keyword">var</span> foo2
    <span class="hljs-comment">// Be careful, `var` statements are not scoped to the block level</span>
    <span class="hljs-comment">// so previous foo2 is overwritten!</span>
    foo = <span class="hljs-string">"qux"</span>
    foo2 = <span class="hljs-string">"qux"</span>
    <span class="hljs-built_in">console</span>.log(foo)
    <span class="hljs-comment">// "qux", variable belongs to the scope of the current block (the "if" one)</span>
    <span class="hljs-built_in">console</span>.log(foo2)
    <span class="hljs-comment">// "qux"</span>
  }
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// "bar", variable belongs to the scope of its block (the "fn" function)</span>
  <span class="hljs-built_in">console</span>.log(foo2)
  <span class="hljs-comment">// "qux"</span>
}</code></pre>
<p>You can use <code>let</code> in loops, the variable used for the iteration will be scoped
to the block of the loop, not the (parent) scope of the code that contains the
loop. This resolves any issues that you may have had with <code>i</code> already defined in
the upper scope!</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=i; i&lt;<span class="hljs-number">10</span>; i++) {
    <span class="hljs-built_in">console</span>.log(i)
  }
  <span class="hljs-built_in">console</span>.log(i)
  <span class="hljs-comment">// 0</span>

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j=i; j&lt;<span class="hljs-number">10</span>; j++) {}
  <span class="hljs-built_in">console</span>.log(j)
  <span class="hljs-comment">// j is not defined</span>
}
fn2() <span class="hljs-comment">// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span></code></pre>
<p>Note: the example with <code>const</code> used in the <code>for ... of</code> loop cannot be
reproduced here.
The classic <code>for</code> loop is imperative, and the declaration is only made once when
the loop starts. <code>const</code> is not relevant in this case.</p>
<h2 id="var"><a class="markdownIt-Anchor" href="#var">#</a> var</h2>
<p>With <code>const</code> and <code>let</code>, there is no more space for <code>var</code> anymore.
<a href="https://twitter.com/getify/status/658662478528643072">Maybe in a <code>try</code>/<code>catch</code>
context</a>.</p>
<h1 id="hoisting-and-tdz-temporal-dead-zone-issues"><a class="markdownIt-Anchor" href="#hoisting-and-tdz-temporal-dead-zone-issues">#</a> Hoisting and TDZ (Temporal Dead Zone) issues</h1>
<p>As a reminder, JavaScript does have a hoisting mechanism. For example, you can
write:</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo) <span class="hljs-comment">// undefined (no ReferenceError)</span>
  <span class="hljs-keyword">var</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<p>JavaScript engine will read all <code>var</code> declarations and virtually move those at
the start of your function scope.</p>
<p><code>let</code> and <code>const</code> do not benefit from variable hoisting, and therefore can
create TDZ (Temporal Dead Zone) issues; these occur when a variable does not
exist yet.</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(foo)
  <span class="hljs-comment">// ReferenceError, we are in the TDZ of "foo"</span>
  <span class="hljs-keyword">let</span> foo = <span class="hljs-string">"bar"</span>
}</code></pre>
<h1 id="outro"><a class="markdownIt-Anchor" href="#outro">#</a> Outro</h1>
<p>So, let’s recap:</p>
<ul>
<li>Use <code>const</code> (might be relevant 99% of the time)</li>
<li>If during you development you happen to have to change the value of this
variable, switch to <code>let</code> (that might happen 1% of the time)</li>
<li>If you are in the worst use-case of the world, use <code>var</code> (you can do the math)</li>
</ul>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/const-let-var/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/const-let-var/</guid><pubDate>Tue, 01 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unit testing React components]]></title><description><![CDATA[<p>The React team has implemented a feature called
<a href="http://facebook.github.io/react/docs/test-utils.html#shallow-rendering">shallow rendering</a>,
which</p>
<blockquote>
<p>lets you render a component “one level deep” and assert facts about
what its render method returns, without worrying about the behavior of child
components, which are not instantiated or rendered.
This does not require a DOM.</p>
</blockquote>
<p>Sounds good, right? And guess what, shallow rendering is currently the
<a href="https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26">preferred way to test your React components</a>.</p>
<p>As you can see in the post mentioned at the end of this one, the
actual code to test some components might seem a bit longer that what you could
expect.</p>
<p>Hopefully, <a href="https://github.com/vvo">someone</a> created something pretty cool:
<a href="https://github.com/algolia/react-element-to-jsx-string">react-element-to-jsx-string</a>.
As the name of the package says, this library helps to render a react component
into a JSX string.</p>
<p>Now things start to become interesting:
with those two things in mind (shallow render and react components as JSX strings),
we can easily add some basic unit tests to some components.</p>
<p><em>There are others techniques to test React components, and most of those
involve the DOM. This means you will need to run your tests in the browser (or
using jsdom): your tests will be slower than the following method
(which is more real unit testing since you execute less code and do not require
a huge environment).</em></p>
<h2 id="easy-unit-testing-react-components-without-a-dom"><a class="markdownIt-Anchor" href="#easy-unit-testing-react-components-without-a-dom">#</a> Easy unit testing React components (without a DOM)</h2>
<p>Let’s do this with the following (dumb) component:</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/index.js</span>

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { PropTypes } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

const Component = ({
  img,
  title,
  Loader,
  Title,
}) =&gt; (
  &lt;div&gt;
    {
      (!img || !img.src) &amp;&amp; Loader &amp;&amp;
      &lt;Loader /&gt;
    }
    {
      img &amp;&amp; img.src &amp;&amp;
      &lt;img src={ img.src } alt={ img.alt }/&gt;
    }
    {
      title &amp;&amp; Title &amp;&amp;
      &lt;Title text={ title } /&gt;
    }
  &lt;/div&gt;
)

Component.propTypes = {
  img: PropTypes.object,
  title: PropTypes.string,
  Loader: PropTypes.func.isRequired,
  Title: PropTypes.func.isRequired,
}

Component.displayName = <span class="hljs-string">"Picture"</span>

export default Component</code></pre>
<p>This component displays an image with a title component.
If the image data are not ready yet, it can display a loader component.</p>
<p>Now let’s write some simple test for it. For the example we will use
<a href="https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4">tape</a>
with the help of <a href="https://github.com/atabel/tape-jsx-equals">tape-jsx-equals</a>,
but you will find
<a href="https://www.npmjs.com/search?q=expect+jsx">all kind of flavors on npm</a>.</p>
<pre><code class="language-js"><span class="hljs-comment">// web_modules/Picture/__tests__/index.js</span>

<span class="hljs-keyword">import</span> tape <span class="hljs-keyword">from</span> <span class="hljs-string">"tape"</span>
<span class="hljs-keyword">import</span> addAssertions <span class="hljs-keyword">from</span> <span class="hljs-string">"extend-tape"</span>
<span class="hljs-keyword">import</span> jsxEquals <span class="hljs-keyword">from</span> <span class="hljs-string">"tape-jsx-equals"</span>
const test = addAssertions(tape, { jsxEquals })

<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> { createRenderer } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-addons-test-utils"</span>

<span class="hljs-keyword">import</span> Picture <span class="hljs-keyword">from</span> <span class="hljs-string">".."</span>

// fixtures (empty and stateless react components)
const Loader = () =&gt; {}
const Title = () =&gt; {}

test(<span class="hljs-string">"PageContainer is properly rendered"</span>, (t) =&gt; {
  const renderer = createRenderer()

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;Loader /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Loader component if no image data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"should render an image if data are passed"</span>
  )

  renderer.render(
    &lt;Picture
      Loader={ Loader }
      Title={ Title }
      img={ {
        src: <span class="hljs-string">"SRC"</span>,
        alt: <span class="hljs-string">"ALT"</span>,
      } }
      title={ <span class="hljs-string">"TITLE"</span> }
    /&gt;
  )
  t.jsxEquals(
    renderer.getRenderOutput(),
    &lt;div&gt;
      &lt;img src=<span class="hljs-string">"SRC"</span> alt=<span class="hljs-string">"ALT"</span> /&gt;
      &lt;Title text=<span class="hljs-string">"TITLE"</span> /&gt;
    &lt;/div&gt;,
    <span class="hljs-string">"can render a Title if data are passed"</span>
  )

  t.end()
})</code></pre>
<p>These tests are the minimum coverage to ensure you don’t break anything when you work
on your component.</p>
<p>As you can see, tests here are pretty easy to write &amp; straightforward.<br>
<strong>The interesting part is that you don’t compare using strings.
You can use real React components.</strong></p>
<p>You can easily run this full example by getting it from this repository:</p>
<p><a href="https://github.com/MoOx/react-component-unit-testing-example">github.com/MoOx/react-component-unit-testing-example</a></p>
<p>This example contains all the commands and dependencies
(defined in the <code>package.json</code>)
that you might need.</p>
<h1 id="what-about-testing-events-like-onclick"><a class="markdownIt-Anchor" href="#what-about-testing-events-like-onclick">#</a> What about testing events like <code>onClick</code>?</h1>
<p>You don’t need to reproduce the entire click.</p>
<p><strong>Your tests don’t need to check that your <code>onClick</code> prop will be executed when
you click on a DOM element.</strong>
<em>React probably have tests to cover this.</em></p>
<p>You only need to test that the <code>onClick</code> prop value will do what you want.
So if you have something like <code>onClick={ yourCallback }</code>,
just call directly <code>yourCallback()</code> in your test just before your comparison.
That’s enough!</p>
<p>If you want to go deeper, you might also read:</p>
<ul>
<li><a href="http://simonsmith.io/unit-testing-react-components-without-a-dom/"><em>Unit testing React components without a DOM</em></a>,
by Simon Smith, that covers the same topic without the simplicity of the JSX
comparisons,</li>
<li><a href="https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/"><em>How we unit test React components using expect-jsx</em></a>
on Algolia blog, that explains why they choose and create tools for this approach.</li>
</ul>
<p>With all those examples, we hope you will stop being afraid to test your code
and will not hesitate to cover all your React components with tests 😍.</p>
]]></description><link>http://putaindecode.io/en/articles/js/react/unit-testing/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/react/unit-testing/</guid><pubDate>Tue, 24 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Un favicon vite fait bien fait]]></title><description><![CDATA[<p>Oublions un instant CSS et JavaScript pour parler d’un sujet vraiment
important : le favicon.</p>
<p>Alors d’accord, le favicon n’est que le petit détail qu’on expédie en fin de
projet. Mais oubliez-le et votre client comprendra tout de suite qu’il manque
quelque chose.</p>
<p>Dans ce post, nous allons voir comment s’acquitter de cette tâche dans les temps
et les règles de l’art. Et nous ferons intervenir un outil dont je suis l’heureux
auteur.</p>
<h2 id="vite-fait"><a class="markdownIt-Anchor" href="#vite-fait">#</a> Vite fait</h2>
<p>Pourquoi vite fait ? Parce qu’on ne peut pas consacrer trop de temps au favicon.
L’optimisation pour les smartphones, l’amélioration du score PageSpeed ou
encore l’augmentation du taux de conversion, voilà des sujets sur lesquels on
peut plancher des heures, des jours ou bien plus. Mais le favicon, franchement,
est-ce vraiment la raison à invoquer pour expliquer le retard d’un projet ? Un
détail qu’on vous dit !</p>
<p>Pour créer un favicon vite fait :</p>
<ul>
<li>Créez un <code>favicon.ico</code> avec n’importe quel générateur trouvé sur le net.
Déclarez-le avec <code>&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</code>.
Ou peut-être <code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</code> ? Non parce qu’on trouve les deux. Dans le doute,
déclarez-le deux fois.</li>
<li>Créez une Touch icon (pour iOS et les autres). Si on en croit les résultats
pour “apple touch icon size” sur Google, la taille maximale est 144x144.</li>
</ul>
<p>Voilà. Si vous faites tout ça, vous vous serez acquitté de la tâche rapidement.
Bon, ça sera mal fait, mais fait. C’est un début.</p>
<h2 id="bien-fait"><a class="markdownIt-Anchor" href="#bien-fait">#</a> Bien fait</h2>
<p>À présent, penchons-nous sur les difficultés qui nous attendent.</p>
<h3 id="c-est-la-taille-qui-compte"><a class="markdownIt-Anchor" href="#c-est-la-taille-qui-compte">#</a> C’est la taille qui compte</h3>
<p>Ça ne fait pas plaisir à entendre et pourtant nous sommes au cœur du problème
(nous parlons bien de favicon).</p>
<p><code>favicon.ico</code> devrait-il être en 16x16 ou 32x32 ? <a href="https://msdn.microsoft.com/library/gg491740(v=vs.85).aspx">Les deux, selon
Microsoft</a>. Quelle
est la taille de la Touch icon d’Apple ? <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW2">180x180 depuis iOS 8</a>.
La tuile <code>square70x70logo</code> pour Windows 8 et 10, c’est… du 70x70, hein ?
Moui, mais <a href="https://msdn.microsoft.com/library/dn455106(v=vs.85).aspx">idéalement, 128x128</a>.</p>
<p>Ça n’est pas tout : encore faut-il trouver ces informations. Google est
assez variable sur ce point. Il met dans le mille pour une recherche concernant
le favicon classique (16x16 <em>et</em> 32x32), mais échoue, on l’a vu, pour la
Touch icon. Les éditeurs ne sont pas en reste. Si <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW2">Apple indique bien les
dimensions attendues pour l’iPhone 6</a>,
il a en revanche <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html">oublié de mettre à jour sa page qui sort pourtant en premier résultat pour la recherche “apple touch icon”</a> (152x152 d’après elle).</p>
<p>Le <a href="https://github.com/audreyr/favicon-cheat-sheet">favicon cheat sheet</a> est une
ressource intéressante à ce titre, quoique pas à jour à l’heure où ces lignes
sont écrites.</p>
<p>Bref, le temps de rassembler toutes ces informations et l’après-midi s’est envolé. Oups.</p>
<p>Ce que je décris ici est le premier problème auquel je me suis frotté il y
a un peu plus de deux ans, alors que j’achevais mon premier site responsive et
que je voulais une icône digne de ce nom.</p>
<h3 id="le-design-vraiment"><a class="markdownIt-Anchor" href="#le-design-vraiment">#</a> Le design. Vraiment.</h3>
<p>Allez, j’ai fait dans l’anxiogène avec ces histoires de taille mais en réalité
ce problème a été largement amoindri ces derniers mois avec l’arrivée de
générateurs de favicon de nouvelle génération. Et vous en aurez pour votre
argent (d’autant qu’ils sont gratuits) : envoyez votre image et vous vous
retrouverez avec plus d’une vingtaine d’images. C’est beaucoup, presque trop
diront certains.</p>
<p>Mais cette solution cache un problème presque plus grave. Si votre image
originale passera bien sur une platforme, elle risque fort de ne pas
correspondre à une autre.</p>
<p>Prenons l’exemple des icônes pour Android et iOS. Elles servent surtout au <em>Add
to homescreen</em>, lorsque votre visiteur vous fait l’honneur d’ajouter un lien
vers votre site sur l’écran de son smartphone. Pas vraiment le moment de le
décevoir. Sur Android, beaucoup d’icônes ne sont pas carrées mais exploitent
la transparence, notamment les applications natives de Google.</p>
<p><img src="google_apps.png" alt=""></p>
<p>Bonne idée, donc, de suivre ce principe pour notre propre icône. C’est cette
voie qu’a choisie mon cerveau auxilière, je veux parler de StackOverflow, et sa
Touch icône transparente.</p>
<p><img src="so_android.png" alt=""></p>
<p>Sur iOS et son univers tout de parallélépipèdes aux coins arrondis, point de
transparence en revanche. L’icône de StackOverflow se voit affublée d’un fond
noir. Le résultat n’est pas si mauvais, mais était-ce vraiment voulu ?</p>
<p><img src="so_ios.png" alt=""></p>
<p>Passer son image à la moulinette pour en tirer une vingtaine d’icônes est une
fausse bonne idée. Elle donne la dangereuse illusion d’un travail bien fait
alors qu’en réalité vous n’avez pas de réel moyen de savoir ce que vous venez
de faire. Sauf à tester vos icônes sur différents appareils et navigateurs, mais
là ce sont encore quelques heures qui partent en fumée.</p>
<p>Et voilà quel était le second problème que j’ai découvert dans ma quête d’une
icône correcte. Un <code>-resize</code> d’ImageMagick et un script bash un peu brutal ne
suffisent pas.</p>
<p>Cela a donné le coup d’envoi à
<a href="https://realfavicongenerator.net/">RealFaviconGenerator.net</a>, un générateur de
favicon qui devait vraiment solutionner le problème.</p>
<p>Il n’y a pas grand chose à dire sur le sujet, et c’est le but: n’oublions pas
que nous n’avons que peu de temps. Rendez-vous sur <a href="http://RealFaviconGenerator.net">RealFaviconGenerator.net</a>,
postez votre image, éditez vos icônes plate-forme par plate-forme et vous voilà
avec ce qu’il faut d’images, de fichiers annexes et de code HTML pour
configurer votre favicon.</p>
<p><img src="favicon_editor.png" alt=""></p>
<p>Voilà, c’est terminé.</p>
<h3 id="se-mettre-la-page"><a class="markdownIt-Anchor" href="#se-mettre-la-page">#</a> Se mettre à la page</h3>
<p>Ou presque.</p>
<p>Il y a encore quelques années, il était normal de télécharger un framework
JavaScript à la main puis de le déposer tel quel dans un projet Web.
Aujourd’hui, cela est considéré comme une mauvaise pratique et on préférera
utiliser un package manager.</p>
<p>Est-il souhaitable d’industrialiser le favicon de la même manière ? Voyons voir
ce qu’il s’est passé en un an :</p>
<ul>
<li>L’Iphone 6 est sorti, et avec lui la touch icon en 180x180 (avant c’était
152x152).</li>
<li>Android Chrome a cessé d’utiliser l’icône en 196x196 qui était autrefois
spécifiée. À la place, il utilise une icône en 192x192 (et snobe la précédente
quoi qu’il arrive).</li>
<li>Oubliez cette histoire d’icône en 192x192, Android Chrome utilise désormais
un manifeste et plusieurs versions d’icônes pour les différentes densités
d’écran.</li>
<li>Apple a sorti une nouvelle icône au format SVG pour les “pinned tabs” de
Safari pour Mac OS X El Capitan.</li>
</ul>
<p>Autrement dit, si vous avez créé un favicon il y a un peu plus d’un an, il y a
fort à parier qu’il rende mal sur un iPad de dernière génération et le résultat
sur Android pourrait être assez aléatoire (Chrome utilisera une icône PNG qui
n’est pas pour lui ou bien une Touch icon).</p>
<p>À cet effet,
<a href="https://realfavicongenerator.net/api">RealFaviconGenerator propose une API</a>.
Tout ce qu’il est possible de faire via l’UI peut être reproduit via l’API.
Hum… une API… de la doc à lire… Manifestement, ce n’est pas de cette
façon qu’on va accélérer les choses. Mais tout n’est pas perdu car le code peut
être généré automatiquement.</p>
<p>Actuellement, RealFaviconGenerator supporte Grunt et Gulp. Par exemple, après
avoir créé votre favicon, cliquez sur l’onglet “Gulp”. Vous avez le fragment de
Gulpfile ainsi que les instructions pour intégrer votre favicon à votre
processus de build, au même titre que la minification des CSS ou le processing
des Coffee scripts.</p>
<p><img src="gulp_instructions.png" alt=""></p>
<p>Les règles :</p>
<ul>
<li><code>generate-favicon</code> : génère les icônes. Elle prend quelques
secondes et c’est le genre de règle qu’on n’exécute qu’une fois de temps en
temps, lorsqu’il y a du changement dans le paysage des favicons.</li>
<li><code>inject-favicon-markups</code> : injecte les déclarations d’icônes
dans les pages HTML. À exécuter à chaque modification de page, autant dire
qu’elle va souvent servir.</li>
<li><code>check-for-favicon-update</code> : vérifie s’il y a du nouveau sur
RealFaviconGenerator. Si c’est le cas, elle fera échouer votre build bien
comme il faut. Un peu brutal mais ça a le mérite d’être clair. Si vous
avez un système d’intégration continue, arrangez-vous pour ajouter cette règle
à votre radar.</li>
</ul>
<p>La favicon a toujours été un parent pauvre des projets web, à juste titre.
Avec la prolifération des plates-formes, le négliger est de plus en plus hasardeux.
J’ai conçu RealFaviconGenerator pour apporter un peu d’ordre à tout cela. Ce
n’est pas la seule initiative. Hayden Bleasel développe
<a href="https://github.com/haydenbleasel/favicons">favicons</a> qui ambitionne d’être
<a href="https://github.com/google/web-starter-kit/issues/599">intégré au Web Starter Kit de Google</a>.</p>
<p>Et maintenant, c’est à vous : que pensez-vous de la formule “génération de
Gulp/Grunt/autre” ? Quelles sont les technos que vous aimeriez trouver ?</p>
]]></description><link>http://putaindecode.io/fr/articles/favicon/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/favicon/</guid><pubDate>Tue, 17 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Créer un site web gratuitement avec GitHub Pages]]></title><description><![CDATA[<p>Pour une fois, on ne va pas trop parler de code dans cet article, mais
simplement de comment créer en quelques minutes un site web basique et
l’héberger gratuitement sur la plateforme <a href="http://github.com">github.com</a>.</p>
<p>Transférez cet article à toute personne qui souhaiterait avoir un site web mais
qui pense encore que c’est trop compliqué :)</p>
<p>Dans un premier temps, vous devez simplement avoir quelques connaissances de
base :</p>
<ul>
<li><strong>HTML</strong> : une bonne <a href="https://developer.mozilla.org/fr/docs/Web/Guide/HTML/Introduction">introduction</a></li>
<li><strong>GitHub</strong> : créez un compte gratuit ici : <a href="http://github.com">github.com</a></li>
</ul>
<p>Nous allons utiliser <a href="http://github.com">github.com</a> pour héberger notre
<strong>site web statique</strong> dans un <em>repository</em> (un dossier). Ce service
incontournable permet de stocker le code du site, de le
<a href="https://fr.wikipedia.org/wiki/Logiciel_de_gestion_de_versions">versionner</a>, et
de le publier gratuitement sur Internet dans des conditions optimales
(CDN, anti-DDoS…)</p>
<p><strong>Attention</strong> : tous les fichiers hébergés sur votre compte GitHub gratuit sont
publics, à moins de souscrire à un compte privé payant, donc n’y stockez rien
de sensible/secret.</p>
<h2 id="qu-est-ce-qu-un-site-web-statique"><a class="markdownIt-Anchor" href="#qu-est-ce-qu-un-site-web-statique">#</a> Qu’est-ce qu’un site web statique ?</h2>
<p>Pour la plupart des sites, les solutions de blog (CMS de type WordPress et
autres) sont largement surdimensionnées. Elles requièrent un hébergement
particulier (PHP ou autre), des connaissances techniques pour l’installation,
et surtout une maintenance à moyen/long-terme à cause des mises à jour
de sécurité surprises et autres correctifs de bugs à appliquer.</p>
<p>Or, il est possible de créer des sites webs modernes et performants qui n’ont
pas besoin de code côté serveur (donc pas de PHP), et peuvent donc être hébergés
n’importe où, et à moindre coût. Le code du site sera uniquement composé de
HTML, CSS et JavaScript, et s’exécutera directement dans le navigateur du
visiteur, ce qui présente de nombreux avantages :</p>
<ul>
<li>simple et efficace</li>
<li>pas de maintenance</li>
<li>pas de risque de hacking</li>
<li>performances optimales</li>
<li>liberté totale</li>
</ul>
<p>De plus, en 2015, n’importe quel service en ligne digne de ce nom propose une
<a href="https://www.mashape.com">API</a> qui permet d’intégrer directement sur votre site
des fonctionnalités tierces, sans avoir besoin de code côté serveur, donc cette
approche pure <strong>client-side</strong> n’a <strong>pas de limites</strong>.</p>
<p>Dans ce premier article nous allons voir comment créer un site web basique à
base de HTML/CSS, mais nous verrons par la suite comment utiliser un
<a href="http://staticgen.com">générateur de site web statique</a> pour créer des sites
webs plus avancés.</p>
<h2 id="cr-er-le-repository-github"><a class="markdownIt-Anchor" href="#cr-er-le-repository-github">#</a> Créer le repository GitHub</h2>
<p>Créez votre compte GitHub, puis un nouveau <em>repository</em> pour votre site web :
<a href="https://github.com/new">https://github.com/new</a> (exemple : supersite)</p>
<p>Le repository sera créé à cette adresse :
<a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a></p>
<h2 id="cr-er-un-site-web-avec-github-page-generator"><a class="markdownIt-Anchor" href="#cr-er-un-site-web-avec-github-page-generator">#</a> Créer un site web avec <em>GitHub page generator</em></h2>
<p>Grâce aux templates par défaut, créez votre site <em>single-page</em> en 3 clics.</p>
<p>Allez sur la page du projet :  <a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a></p>
<ul>
<li>Puis <strong>Repository settings</strong> (icône en bas à droite)</li>
<li><strong>Automatic page generator</strong> puis <strong>Launch</strong></li>
<li>Éditez le texte du site</li>
<li>Sélectionnez votre template préféré puis <strong>Publish Page</strong></li>
</ul>
<p>Attendez quelques secondes et allez sur : <a href="http://USERNAME.github.io/supersite">http://USERNAME.github.io/supersite</a> pour découvrir le résultat final.</p>
<p><strong>✔</strong> Site web en ligne et dispo pour le monde entier :)</p>
<h2 id="modifier-le-site-en-ligne"><a class="markdownIt-Anchor" href="#modifier-le-site-en-ligne">#</a> Modifier le site en ligne</h2>
<p>Allez sur la page du projet, <a href="https://github.com/USERNAME/supersite">https://github.com/USERNAME/supersite</a>.</p>
<p>C’est ici que l’on retrouve tout le code et les fichiers du site.</p>
<p>Cliquez sur le fichier à modifier, typiquement <code>index.html</code> qui est la page
d’accueil, cliquez sur l’icône “crayon” en haut à droite pour éditer le fichier
et appliquez vos changements.</p>
<p>Une fois les changements effectués, complétez le formulaire “Commit changes”
en-dessous, avec un titre explicite permettant d’identifier votre modification.</p>
<p>Exemple : “Ajout des infos de contact”.</p>
<p>Cliquez sur <strong>Commit changes</strong>, attendez quelques secondes et allez sur
<a href="http://USERNAME.github.io/supersite">http://USERNAME.github.io/supersite</a>
pour admirer les changements.</p>
<p><strong>✔</strong> Site web mis à jour :)</p>
<h2 id="diter-le-site-sur-son-ordinateur"><a class="markdownIt-Anchor" href="#diter-le-site-sur-son-ordinateur">#</a> Éditer le site sur son ordinateur</h2>
<p>Pour pouvoir éditer plus facilement le site, ajouter/modifier des fichiers…
vous pouvez le récupérer sur votre machine, et vous pourrez alors utiliser
votre <a href="http://atom.io">éditeur de texte préféré</a> pour le modifier.</p>
<p>Installez et configurez l’application GitHub : <a href="http://mac.github.com">mac.github.com</a>
ou <a href="http://windows.github.com">windows.github.com</a></p>
<ul>
<li><strong>Clone</strong> : va rapatrier les fichiers de votre site sur votre ordinateur</li>
<li><strong>Éditez</strong> les fichiers directement</li>
<li><strong>Testez</strong> si le site fonctionne comme prévu</li>
<li>Puis choisissez <strong>Commit</strong> pour enregistrer vos modifications</li>
<li>Et enfin <strong>Sync</strong> pour renvoyer vos fichiers sur GitHub et mettre à jour
le site pour le reste du monde.</li>
</ul>
<p><strong>✔</strong> Site web mis à jour :)</p>
<h2 id="tester-le-site-sur-votre-machine"><a class="markdownIt-Anchor" href="#tester-le-site-sur-votre-machine">#</a> Tester le site sur votre machine</h2>
<p>Vous pouvez ouvrir le fichier <code>index.html</code> dans un navigateur pour voir le
résultat.</p>
<p><strong>Note :</strong> Si vous avez ajouté Google Maps ou une API JavaScript, vous devrez
lancer un serveur web pour pouvoir voir le résultat. Par exemple, lancez
<code>python -m SimpleHTTPServer</code> dans votre terminal depuis le dossier du site
(où se trouve <code>index.html</code>) puis ouvrez <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a> dans votre navigateur.
(Ceci est dû à une <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Same_origin_policy_for_JavaScript">restriction de sécurité</a>)</p>
<h2 id="installer-un-superbe-template"><a class="markdownIt-Anchor" href="#installer-un-superbe-template">#</a> Installer un superbe template</h2>
<p>Si vous voulez des templates différents de ceux proposés par GitHub,
vous devez simplement remplacer les fichiers présents dans le dossier
du projet.</p>
<p>Choisissez par exemple un des templates gratuits de haute qualité
disponibles sur <a href="http://html5up.net">html5up.net</a> ou sur
<a href="http://pixelarity.com">pixelarity.com</a> (payant).</p>
<p>Téléchargez les sources et placez les fichiers dans votre projet.</p>
<p>Éditez les fichiers, testez, puis commit &amp; sync, et voilà :)</p>
<h2 id="et-apr-s"><a class="markdownIt-Anchor" href="#et-apr-s">#</a> Et après ?</h2>
<ul>
<li>Apprenez la syntaxe Markdown : <a href="https://en.support.wordpress.com/markdown-quick-reference/">réference</a></li>
<li>Apprenez Git : <a href="https://try.github.io">try.github.io</a></li>
<li>Apprenez JavaScript : <a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a>
et <a href="https://ericelliottjs.com/product/programming-javascript-applications-paper-ebook-bundle/">le livre d’Eric Elliott</a></li>
<li>Lisez tous les articles de <a href="/">Putain de code !</a></li>
</ul>
<hr>
<h2 id="faq"><a class="markdownIt-Anchor" href="#faq">#</a> FAQ</h2>
<h3 id="comment-installer-un-nom-de-domaine"><a class="markdownIt-Anchor" href="#comment-installer-un-nom-de-domaine">#</a> Comment installer un nom de domaine ?</h3>
<ul>
<li>Achetez un nom de domaine sur <a href="http://gandi.net">gandi.net</a> ou
un autre fournisseur sérieux (surtout pas chez pas 1&amp;1, lws ou
autre discounter douteux)</li>
<li>Éditez la “Zone DNS” du domaine et suivez les
<a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">instructions GitHub pour DNS</a></li>
<li>ajoutez un fichier <code>CNAME</code> dans votre projet, contenant la ligne
<code>www.myproject.com</code>.</li>
</ul>
<p>Les changements DNS peuvent mettre jusqu’à 24h pour se propager
donc essayez <a href="http://www.myproject.com">www.myproject.com</a> un peu plus tard.</p>
<p>Ces pages d’aide sur GitHub pourront vous être utiles : <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">Custom domain</a>, <a href="https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/">DNS setup</a>.</p>
<h3 id="comment-ajouter-une-page"><a class="markdownIt-Anchor" href="#comment-ajouter-une-page">#</a> Comment ajouter une page ?</h3>
<p>Pour créer simplement des pages supplémentaires, ajoutez un
nouveau fichier HTML, par exemple <code>produits.html</code>, dans le projet et
faites un lien vers cette page depuis l’index, par exemple
<code>&lt;a href=&quot;produits.html&quot;&gt;Consulter les produits&lt;/a&gt;</code>.</p>
<h3 id="comment-analyser-le-trafic-de-mon-site"><a class="markdownIt-Anchor" href="#comment-analyser-le-trafic-de-mon-site">#</a> Comment analyser le trafic de mon site ?</h3>
<p>Si vous voulez tracker vos visiteurs, savoir d’où ils viennent, ce qu’ils
font et où ils vont, créez un compte sur
<a href="http://www.google.com/analytics">Google Analytics</a> et ajoutez le code de
tracking sur vos pages HTML.</p>
<h3 id="comment-ajouter-une-carte"><a class="markdownIt-Anchor" href="#comment-ajouter-une-carte">#</a> Comment ajouter une carte ?</h3>
<p>Suivez les <a href="http://leafletjs.com/examples/quick-start.html">instructions Leaflet</a>, la cartographie open-source et gratuite qui bénéficie d’une communauté active.</p>
<p>Si vous avez juste besoin d’une carte sous forme d’image fixe, générez le code HTML ici :
<a href="http://staticmapmaker.com">staticmapmaker.com</a> et copiez le code dans votre page.</p>
<h3 id="comment-ajouter-un-syst-me-de-commentaires"><a class="markdownIt-Anchor" href="#comment-ajouter-un-syst-me-de-commentaires">#</a> Comment ajouter un système de commentaires ?</h3>
<p>Créez un compte sur <a href="http://disqus.com">disqus.com</a> et ajoutez le code JavaScript sur
votre page.</p>
<h3 id="comment-ajouter-un-formulaire-de-contact"><a class="markdownIt-Anchor" href="#comment-ajouter-un-formulaire-de-contact">#</a> Comment ajouter un formulaire de contact ?</h3>
<p>Créez un compte sur <a href="http://typeform.com">typeform.com</a>, créez votre formulaire et
ajoutez le code JavaScript “embed” sur votre page.</p>
<p>Vous pouvez aussi créer un compte sur <a href="http://mailchimp.com">mailchimp.com</a>, créer un
formulaire et l’ajouter sur votre page grâce au code “embed”.</p>
<h3 id="comment-recevoir-des-paiements"><a class="markdownIt-Anchor" href="#comment-recevoir-des-paiements">#</a> Comment recevoir des paiements ?</h3>
<p>Créez un compte sur <a href="http://stripe.com">stripe.com</a> et ajoutez le code JavaScript sur
votre page.</p>
<h3 id="qu-est-ce-que-gh-pages"><a class="markdownIt-Anchor" href="#qu-est-ce-que-gh-pages">#</a> Qu’est-ce que gh-pages ?</h3>
<p><code>gh-pages</code> est une branche spéciale de votre code sur GitHub (une version du
code) qui publie et héberge <em>automagiquement</em> votre site.</p>
<h3 id="comment-tre-pr-sent-sur-google"><a class="markdownIt-Anchor" href="#comment-tre-pr-sent-sur-google">#</a> Comment être prêsent sur Google ?</h3>
<p>Créez du contenu de <strong>qualité</strong>, ciblé, <strong>unique</strong> sur Internet et <strong>utile</strong> à
vos visiteurs. Créez du lien avec des sites et communautés sur le même thème.</p>
<p>Naturellement, d’autres sites parleront alors du vôtre, vous enverront des
visiteurs et vous feront monter progressivement dans les résultats au fil des mois.</p>
<hr>
<p>Voilà pour ce premier pas vers le développement web !</p>
<p>Les commentaires ci-dessous sont là pour recevoir vos remarques et questions :)</p>
]]></description><link>http://putaindecode.io/fr/articles/github/pages/site-web-gratuit/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/github/pages/site-web-gratuit/</guid><pubDate>Fri, 31 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les Dockerfiles]]></title><description><![CDATA[<p>Dans <a href="/fr/articles/docker/">l’article précédent</a>, je vous ai
présenté le fonctionnement de base de Docker. Mais cela vous limitait à
l’usage des images que vous pouviez trouver sur le <a href="https://registry.hub.docker.com/">Docker
Hub</a>. Afin de vraiment pouvoir utiliser
Docker au maximum, il serait appréciable de pouvoir créer des images adaptées à
nos projets et c’est là l’utilité des Dockerfiles.</p>
<h1 id="les-dockerfiles"><a class="markdownIt-Anchor" href="#les-dockerfiles">#</a> Les Dockerfiles</h1>
<p>Les Dockerfiles sont des fichiers qui permettent de construire une image Docker
adaptée à nos besoins, étape par étape. Rentrons dans le vif du sujet en créant
une image permettant de lancer un projet JavaScript.</p>
<p>Pour commencer, créez un nouveau fichier <code>Dockerfile</code> à la racine de votre
projet.</p>
<p>La première chose à faire dans un Dockerfile est de définir de quelle image
vous héritez. Pour cet exemple, je vous propose d’utiliser une image de Debian
comme base (ce qui est une bonne pratique, car cette image
est plutôt légère en comparaison avec celle d’Ubuntu par exemple).</p>
<pre><code><span class="hljs-tag">FROM</span> <span class="hljs-tag">debian</span><span class="hljs-pseudo">:jessie</span></code></pre>
<p><code>FROM</code> permet de définir notre image de base, vous pouvez l’utiliser uniquement
une fois dans un Dockerfile.</p>
<p>Comme nous voulons créer une image pour une application JavaScript full-stack,
nous devons commencer par installer Node.js. Pour ce faire, on va télécharger
l’archive Node.js directement depuis le site officiel à l’aide de curl que nous
allons aussi devoir installer.</p>
<pre><code><span class="hljs-constant">RUN</span> apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">apt</span>/<span class="hljs-title">lists</span>/*</span>

<span class="hljs-constant">RUN</span> curl -<span class="hljs-constant">LO</span> <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -<span class="hljs-constant">C</span> /usr/local --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz</code></pre>
<p><code>RUN</code> permet d’exécuter une commande à l’intérieur de votre image comme si vous
étiez devant un shell unix.</p>
<p>La première commande nous permet d’installer curl et de nettoyer ensuite le
gestionnaire de paquets afin que notre image soit un peu plus légère.</p>
<p>Avec la deuxième commande, nous téléchargeons le binaire de Node.js que nous
installons ensuite à ça place, et on n’oublie pas de supprimer l’archive
ensuite.</p>
<p>Vous pouvez vous demander pourquoi j’exécute plusieurs commandes sur une même
instruction <code>RUN</code> ? Eh bien, cela permet simplement de limiter le nombre
d’instructions dans votre Dockerfile ce qui rendra votre image finale plus
légère.</p>
<p>Maintenant, nous allons ajouter les sources de notre projet dans l’image et
télécharger nos dépendances.</p>
<pre><code><span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/</span></code></pre>
<p><code>ADD</code> permet d’ajouter des fichiers locaux ou distants à l’intérieur de votre
image, il est le plus souvent utilisé pour importer les sources de votre projet
ou des fichiers de configuration.</p>
<p><code>WORKDIR</code> permet de changer le répertoire courant de votre image, toutes les
commandes qui suivront seront exécutées à partir de ce répertoire.</p>
<p>Avec la dernière instruction, nous ajoutons les sources de notre projet à
l’intérieur de l’image, mais vous allez vous demander pourquoi nous ne l’avons
pas fait en même temps que l’ajout des fichiers de dépendances. Eh bien, cela
nous permet d’économiser beaucoup de temps !</p>
<p>Quand Docker crée une nouvelle image à partir d’un Dockerfile, il exécute chaque
instruction dans un conteneur, et le résultat de cette instruction est
sauvegardé sous forme de couche. Au final, une image est un assemblage de
plusieurs couches (une par instruction). Et donc, quand vous reconstruisez une
image pour la seconde fois, les instructions qui n’impliquent pas de changements
ne sont pas réexécutées, car la couche est récupérée depuis l’image précédente. Par
contre, si l’instruction implique un changement quelconque, elle est réexécutée
ainsi que toutes les instructions suivantes.</p>
<p>Dans notre cas, les sources auront tendance à beaucoup changer, et donc ne pas
retélécharger les dépendances à chaque changement dans le code est un réel gain
de temps !</p>
<p>Maintenant, nous allons indiquer quel port et dossier nous souhaitons partager
avec l’extérieur du conteneur.</p>
<pre><code><span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">3000</span>

<span class="hljs-built_in">VOLUME</span> <span class="bash">/app/<span class="hljs-built_in">log</span></span></code></pre>
<p><code>EXPOSE</code> et <code>VOLUME</code> permettent respectivement d’indiquer quel port et quel
dossier nous souhaitons partager.</p>
<p>Et pour finir, nous pouvons indiquer quelle instruction doit s’exécuter au
lancement de votre conteneur grâce à l’instruction <code>CMD</code>.</p>
<pre><code>CMD <span class="hljs-keyword">node</span><span class="hljs-identifier"> </span><span class="hljs-title">server</span>.js</code></pre>
<p>Voici un résumé de notre Dockerfile :</p>
<pre><code><span class="hljs-comment"># Image de base</span>
<span class="hljs-built_in">FROM</span> debian:jessie

<span class="hljs-comment"># Installation de curl avec apt-get</span>
<span class="hljs-built_in">RUN</span> <span class="bash">apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/lib/apt/lists/*
</span>
<span class="hljs-comment"># Installation de Node.js à partir du site officiel</span>
<span class="hljs-built_in">RUN</span> <span class="bash">curl -LO <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span> --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz
</span>
<span class="hljs-comment"># Ajout du fichier de dépendances package.json</span>
<span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-comment"># Changement du repertoire courant</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-comment"># Installation des dépendances</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-comment"># Ajout des sources</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/
</span>
<span class="hljs-comment"># On expose le port 3000</span>
<span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">3000</span>

<span class="hljs-comment"># On partage un dossier de log</span>
<span class="hljs-built_in">VOLUME</span> <span class="bash">/app/<span class="hljs-built_in">log</span>
</span>
<span class="hljs-comment"># On lance le serveur quand on démarre le conteneur</span>
<span class="hljs-built_in">CMD</span> <span class="bash">node server.js</span></code></pre>
<p>Avant de transformer ce Dockerfile en une image, vous devez créer un fichier de
plus, le <code>.dockerignore</code>, ce fichier permet comme un <code>.gitignore</code> de ne pas
inclure certain fichiers dans votre image Docker, et c’est très important afin
d’éviter d’inclure les dépendances de votre projet dans votre image
(<code>node_modules</code> dans notre cas) qui sont propres à votre
système, mais pas au système du conteneur. Voici à quoi votre <code>.dockerignore</code>
doit ressembler :</p>
<pre><code><span class="hljs-tag">node_modules</span>
<span class="hljs-class">.git</span></code></pre>
<p>Pour transformer ce Dockerfile en une image Docker, vous devez utiliser cette
commande :</p>
<pre><code class="language-console">$ docker build -t fullstack-js .
Sending build context to Docker daemon 4.381 MB
Sending build context to Docker daemon
Step 0 : FROM debian:jessie
 -<span class="ruby">--&gt; bf84c1d84a8f
</span>Step 1 : RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">93258459</span>a279
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>fffcf3749a2
</span>Removing intermediate container 93258459a279
Step 2 : RUN curl -LO "https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz" &amp;&amp; tar -xzf node-v0.12.5-linux-x64.tar.gz -C /usr/local --strip-components=1 &amp;&amp; rm node-v0.12.5-linux-x64.tar.gz
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> a3a17d584bae
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>eaa62ace8de
</span>Removing intermediate container a3a17d584bae
Step 3 : ADD *.json /app/
 -<span class="ruby">--&gt; <span class="hljs-number">1</span>e8ffd7e10a8
</span>Removing intermediate container 5db20e8b8ed2
Step 4 : WORKDIR /app
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">7</span>b84b06642b1
</span> -<span class="ruby">--&gt; <span class="hljs-number">9</span>c0e2287c34d
</span>Removing intermediate container 7b84b06642b1
Step 5 : RUN npm install
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0523</span>df6e9aac
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">6</span>d7327ebee3<span class="hljs-number">0</span>
</span>Removing intermediate container 0523df6e9aac
Step 6 : ADD . /app
 -<span class="ruby">--&gt; <span class="hljs-number">13</span>bdbe70c6fa
</span>Removing intermediate container 3c83d82c1d53
Step 7 : EXPOSE 3000
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">51</span>e252173b12
</span> -<span class="ruby">--&gt; <span class="hljs-number">6</span>c62eb1197e2
</span>Removing intermediate container 51e252173b12
Step 8 : VOLUME /app/log
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">4</span>af0bb73307b
</span> -<span class="ruby">--&gt; <span class="hljs-number">15</span>b6190de473
</span>Removing intermediate container 4af0bb73307b
Step 9 : CMD node server.js
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">9522</span>c6b9bf95
</span> -<span class="ruby">--&gt; aaf20fb25dac
</span>Removing intermediate container 9522c6b9bf95
Successfully built aaf20fb25dac</code></pre>
<p>L’option <code>-t</code> permet de nommer votre image docker, ce qui vous servira lorsque
vous voudrez lancer votre conteneur. Et le <code>.</code> est le repertoire où se trouve
le Dockerfile, dans notre cas le dossier courant.</p>
<p>Maintenant, vous pouvez lancer votre conteneur de cette manière :</p>
<pre><code class="language-console">$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> -p 3000:3000 -v $(<span class="hljs-keyword">pwd</span>)/<span class="hljs-keyword">log</span>:/<span class="hljs-keyword">app</span>/<span class="hljs-keyword">log</span> fullstack-js</code></pre>
<p>Cette commande permet de lancer notre image en partageant le port et un dossier
avec votre ordinateur, si vous voulez plus de détails sur le fonctionnement du
client Docker, je vous invite à lire mon <a href="/fr/articles/docker/">article
précédent</a>.</p>
<hr>
<p>Dans cet article, vous avez pu voir comment créer votre propre Dockerfile,
maintenant vous pouvez créer des images Docker parfaitement adaptées à votre
projet, et même plus. En cherchant sur Internet, vous pourrez trouver des images
Docker pour tout et n’importe quoi, comme des images pour lancer Chrome dans un
conteneur par exemple. Pour en savoir plus, je vous redirige vers le
blog de <a href="https://blog.jessfraz.com/post/docker-containers-on-the-desktop/">Jessie
Frazelle</a>.</p>
<p>Dans le prochain article, je vous parlerai de docker-compose, un outil qui
permet de lancer des applications multi-conteneurs facilement.</p>
]]></description><link>http://putaindecode.io/fr/articles/docker/dockerfile/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/docker/dockerfile/</guid><pubDate>Thu, 02 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[SemVer, c'est quoi ?]]></title><description><![CDATA[<p><em>Ce post a été largement inspiré de la mauvaise expérience que j’ai pu avoir
avec l’évolution de <a href="http://backbonejs.org/">Backbone.js</a> qui, ne respectant pas SemVer, m’a posé des
problèmes lors de mise à jour de versions. Les node_modules (dépendances de
dépendances) sont aussi en question.</em></p>
<p>Depuis quelques temps, vous devez entendre le terme <strong>SemVer</strong> par-ci par-là
mais peut-être que vous ne savez pas ce que c’est ou que vous ne savez pas
comment l’appliquer. Et je vous comprends, j’ai mis un peu de temps à maitriser
le sujet.</p>
<p>Pour faire simple, <strong>SemVer</strong> (voulant dire <em>Semantic Versioning</em>) est une
gestion sémantique des versions. En d’autres termes, une façon de numéroter les
versions de manière logique, cohérente, parlante, ayant du sens. Ce n’est
cependant pas forcément une norme, vous n’êtes pas obligé(e) de la respecter
mais ce serait vraiment, vraiment dommage car il tend justement à l’être.</p>
<p>Mais tout d’abord, posons les bases, qu’est-ce qu’une version ?</p>
<p>Une version s’applique à un produit, une application, une bibliothèque, un OS,
tout ce qui a une progression en informatique. Cela permet de définir
l’avancement du produit. La majorité du temps (sauf pour quelques hérétiques),
cela s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code>, <code>Y</code> et <code>Z</code> sont des entiers (pas
forcément des chiffres d’ailleurs, cela peut être supérieur à 9) soit <code>1.0.10</code>
par exemple. Il est possible que vous voyiez cette forme <code>vX.Y.Z</code> comme <code>v1.0.10</code>
mais en toute franchise, je ne l’apprécie pas. J’aime que mon tag équivaille à
ma version en elle-même. Purement personnel.</p>
<p>Maintenant que nous savons ce qu’est une version, voyons voir ce qu’est
réellement <strong>SemVer</strong>.</p>
<p><strong>SemVer</strong> est un moyen cohérent, pertinent de nommer ses versions afin de
savoir rapidement quelles modifications ont été apportées à votre projet.</p>
<p>Voyons voir ce que dit la documentation officielle de
<a href="http://semver.org/lang/fr/">SemVer</a></p>
<blockquote>
<p>Étant donné un numéro de version MAJEUR.MINEUR.CORRECTIF, il faut incrémenter :</p>
</blockquote>
<blockquote>
<p>le numéro de version MAJEUR quand il y a des changements
rétro-incompatibles,<br>
le numéro de version MINEUR quand il y a des changements rétro-compatibles,<br>
le numéro de version de CORRECTIF quand il y a des corrections d’anomalies
rétro-compatibles</p>
</blockquote>
<blockquote>
<p>Des libellés supplémentaires peuvent être ajoutés pour les versions de
pré-livraison et pour des méta-données de construction sous forme d’extension du
format MAJEURE.MINEURE.CORRECTIF.</p>
</blockquote>
<p>On comprend effectivement l’idée de <strong>SemVer</strong> (et la suite du site explique
comment l’appliquer) mais je trouve que l’on peut mieux expliquer.</p>
<p>Pour comprendre <strong>SemVer</strong>, il faut se mettre dans la peau de l’utilisateur qui
va se servir de votre production.</p>
<p>En effet, <strong>SemVer</strong> est un contrat que vous signez avec vos utilisateurs, une
forme de respect qui leur permet d’adapter leur code ou non en fonction des
versions que vous proposez.</p>
<p>Si je devais définir à quelqu’un ce qu’est <strong>SemVer</strong>, je lui dirais ceci :</p>
<blockquote>
<p>SemVer s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code> est “majeur”, <code>Y</code> est “mineur”,
<code>Z</code> est “patch”.</p>
</blockquote>
<blockquote>
<p>Qu’est-ce que cela veut dire. Cela veut dire que si vous avez corrigé un bug
dans votre lib et que cela n’affecte en rien le code écrit par votre
utilisateur, alors incrémentez <code>Z</code> (+0.0.1).</p>
</blockquote>
<blockquote>
<p>Si vous avez fait des ajouts dans votre app qui peuvent être intéressants pour
l’utilisateur et mérite une certaine attention afin d’améliorer le code qui
utilise votre lib, alors incrémentez <code>Y</code> (+0.1.0).</p>
</blockquote>
<blockquote>
<p>Si en revanche, vous avez cassé ne serait-ce qu’une partie de l’API (“breaking
changes”), que vous avez <em>juste</em> changé des noms de méthodes / fonctions déjà
existantes (et donc sûrement utilisées par quelqu’un d’autre), que finalement
cela nécessite <strong>forcément</strong> une modification de la part de l’utilisateur sous
peine que sa propre app ne fonctionne plus, alors incrémentez <code>X</code> (+1.0.0).</p>
</blockquote>
<p>C’est vraiment une question de respect envers qui vous proposez votre lib. Par
<strong>SemVer</strong>, je vous informe des potentielles modifications ou lectures de
documentation que vous devez faire. Il ne faut vraiment pas voir ça comme une
évolution de votre propre code.</p>
<p>Par exemple, vous avez refactorisé tout votre code mais l’API n’a pas changé.
Alors <code>Z</code> suffit. Et si vous avez ajoutez des méthodes, c’est plutôt <code>Y</code>.
Pourtant il y a eu une quantité phénoménale de code modifié. Des lignes et des
lignes. Est-ce pour autant que vous devez incrémentez <code>X</code> ? Non. Surtout lorsque
les tests automatisés n’ont pas été modifiés et passent toujours.</p>
<p>En revanche, vous ne faites qu’une petite modification de nom de méthode qui ne
vous semble pas appropriée, ça ne vous prend qu’une ligne de modification, vous
pourriez croire que c’est uniquement <code>Z</code> à changer ? Non plus. Là, vous modifiez
le contrat que l’utilisateur a acquiescé en utilisant votre lib ; vous avez
alors la responsabilité de lui indiquer que son code doit absolument changer
sinon celui-ci ne marchera plus correctement.</p>
<p>En bref, ne voyez pas l’évolution de votre projet avec <strong>SemVer</strong> mais le
contrat que vous signez implicitement avec vos utilisateurs.</p>
<p>Oh et oui, surtout, surtout, ce n’est pas parce que vous êtes arrivé(e) à <code>9</code>
dans <code>Y</code> ou <code>Z</code> que le nombre le précédant doit augmenter. Par exemple <em>mineur</em>
sur <code>1.9.0</code> ? Alors <code>1.10.0</code> et non <code>2.0.0</code>.</p>
<p>J’espère qu’avec ceci, vous vous sentirez plus à l’aise.</p>
<h2 id="tips-npm"><a class="markdownIt-Anchor" href="#tips-npm">#</a> Tips npm</h2>
<p>Avec npm, il est possible de mettre à jour rapidement son <code>package.json</code> et tag
git en utilisant la commande <code>$ npm version</code>. Comme ceci :</p>
<pre><code class="language-console">$ npm version (major|<span class="hljs-string">minor</span>|<span class="hljs-string">patch)</span></code></pre>
<p>Cela vous incrémentera le <code>package.json</code>  et vous fera un beau commit + tag dans
git tel que :</p>
<pre><code class="language-console">* b474d9c (HEAD -&gt; master, tag: <span class="hljs-number">1.5</span><span class="hljs-number">.3</span>, origin/master) <span class="hljs-number">1.5</span><span class="hljs-number">.3</span>`.</code></pre>
<p>Et pour éviter d’avoir le “v” dans les tags git qui est par défaut dans npm,
faites :</p>
<pre><code class="language-console">$ npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">tag</span>-<span class="hljs-keyword">version</span>-prefix <span class="hljs-string">""</span></code></pre>
<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog">#</a> Changelog</h2>
<p><strong>SemVer</strong> va de pair avec les <a href="http://keepachangelog.com/">changelog</a>. Mettre à
jour le changelog vous permet d’indiquer très rapidement ce qui a été modifié
sans que l’utilisateur ait forcément à regarder votre code. Il est surtout très
important lors d’ajouts de fonctionnalités ou de modifications (majeures et
mineures) afin de voir directement les méthodes / fonctions affectées mais aussi
dans le cas d’un patch de voir le gain obtenu de cette nouvelle mise à jour. À
ajouter directement dans le <code>README.md</code> à la fin ou carrément dans un fichier ou
des fichiers dédiés à ça.
Voici un <a href="https://github.com/cssnext/cssnext/blob/master/CHANGELOG.md">exemple</a>.</p>
<hr>
<p>Stay safe, use <strong>SemVer</strong>.</p>
<p>Ressources :</p>
<ul>
<li><a href="http://semver.org/">site officiel</a></li>
<li><a href="http://semver-ftw.org/">semver-ftw</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/semver/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/semver/</guid><pubDate>Tue, 16 Jun 2015 00:00:00 GMT</pubDate></item></channel></rss>