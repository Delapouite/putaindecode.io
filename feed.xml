<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Putain de code !]]></title>
        <description><![CDATA[Putain de code !]]></description>
        <link>http://putaindecode.fr</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 02 Jul 2015 05:07:33 GMT</lastBuildDate>
        <atom:link href="http://putaindecode.fr/feed.xml" rel="self" type="application/rss+xml"/>
        <language><![CDATA[fr]]></language>
        <category><![CDATA[code]]></category>
        <item>
            <title><![CDATA[Les Dockerfiles]]></title>
            <description><![CDATA[<p>Dans <a href="/posts/docker/introduction-a-docker" >l’article précédent</a>, je vous ai
introduit le fonctionnement de base de Docker. Mais cela vous limitait à
l’usage des images que vous pouviez trouver sur le <a href="https://registry.hub.docker.com/" >Docker
Hub</a>. Afin de vraiment pouvoir utiliser
Docker au maximum il serait appréciable de pouvoir créer des images adaptées à
nos projets et c’est là l’utilité des Dockerfiles.</p>
<h1 id="les-dockerfiles">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/les-dockerfiles/#les-dockerfiles">#</a>
      Les Dockerfiles
    </h1><p>Les Dockerfiles sont des fichiers qui permettent de construire une image Docker
adaptée à nos besoins étape par étape. Rentrons dans le vif du sujet en créant
une image permettant de lancer un projet Javascript.</p>
<p>Pour commencer, créer un nouveau fichier <code>Dockerfile</code> à la racine de votre
projet.</p>
<p>La première chose à faire dans un Dockerfile est de définir de quelle image
vous héritez, pour cet exemple, je vous propose d’utiliser une image de Debian
comme base (ce qui est une bonne pratique, car cette image
est plutôt légère en comparaison de celle d’Ubuntu par exemple).</p>
<pre><code><span class="hljs-tag">FROM</span> <span class="hljs-rule"><span class="hljs-attribute">debian</span>:<span class="hljs-value">jessie</span></span>
</code></pre><p><code>FROM</code> permet de définir notre image de base, vous pouvez l’utiliser uniquement
une fois dans un Dockerfile.</p>
<p>Comme nous voulons créer une image pour une application Javascript full-stack,
nous devons commencer par installer Node.js. Pour ce faire, on va télécharger
l’archive Node.js directement depuis le site officiel à l’aide de curl que nous
allons aussi devoir installer.</p>
<pre><code><span class="hljs-built_in">RUN</span> <span class="bash">apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/lib/apt/lists/*
</span>
<span class="hljs-built_in">RUN</span> <span class="bash">curl -LO <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span> --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz</span>
</code></pre><p><code>RUN</code> permet d’exécuter une commande à l’intérieur de votre image comme si vous
étiez devant un shell unix. </p>
<p>La première commande nous permet d’installer curl et de nettoyer ensuite le
gestionnaire de paquet afin que notre image soit un peu plus légère.</p>
<p>Avec la deuxième commande, nous téléchargeons le binaire de Node.js que nous
installons ensuite à ça place, et on n’oublie pas de supprimer l’archive
ensuite.</p>
<p>Vous pouvez vous demander pourquoi j’exécute plusieurs commandes sur une même
instruction <code>RUN</code> ? Eh bien cela permet simplement de limiter le nombre
d’instructions dans votre Dockerfile ce qui rendra votre image finale plus
légère.</p>
<p>Maintenant, nous allons ajouter les sources de notre projet dans l’image et
télécharger nos dépendances.</p>
<pre><code><span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/</span>
</code></pre><p><code>ADD</code> permet d’ajouter des fichiers locaux ou distants à l’intérieur de votre
image, il est le plus souvent utilisé pour importer les sources de votre projet
ou des fichiers de configuration.</p>
<p><code>WORKDIR</code> permet de changer le répertoire courant de votre image, toutes les
commandes qui suivront seront exécuter à partir de ce répertoire.</p>
<p>Avec la dernière instruction, nous ajoutons les sources de notre projet à
l’intérieur de l’image, mais vous allez vous demander pourquoi nous ne l’avons
pas fait en même temps que l’ajout des fichiers de dépendances. Eh bien cela
nous permet d’économiser beaucoup de temps ! </p>
<p>Quand docker crée une nouvelle image à partir d’un Dockerfile il exécute chaque
instruction dans un conteneur, et le résultat de cette instruction est
sauvegardé sous forme de couche. Au final, une image est un assemblage de
plusieurs couches (une par instruction). Et donc quand vous reconstruisez une
image pour la seconde fois, les instructions qui n’implique pas de changement
ne sont pas réexécuté, car la couche est récupéré depuis l’image précédente, par
contre si l’instruction implique un changement, elle est réexécuté ainsi que
tout les instructions suivantes.</p>
<p>Dans notre cas, les sources auront tendance à beaucoup changer, et donc ne pas
retélécharger les dépendances à chaque changement dans le code est un réel gain
de temps !</p>
<p>Maintenant, nous allons indiquer quel port et dossier, nous souhaitons partager
avec l’extérieur du conteneur.</p>
<pre><code>EXPOSE 3000

<span class="hljs-title">VOLUME /app/log</span>
</code></pre><p><code>EXPOSE</code> et <code>VOLUME</code> permettent respectivement d’indiquer quel port et quel
dossier nous souhaitons partager.</p>
<p>Et pour finir, nous pouvons indiquer quelle instruction doit s’exécuter au
lancement de votre conteneur grâce à l’instruction <code>CMD</code>.</p>
<pre><code><span class="hljs-built_in">CMD</span> <span class="bash">node server.js</span>
</code></pre><p>Voici un résumé de notre Dockerfile :</p>
<pre><code><span class="hljs-comment"># Image de base</span>
<span class="hljs-built_in">FROM</span> debian:jessie

<span class="hljs-comment"># Installation de curl avec apt-get</span>
<span class="hljs-built_in">RUN</span> <span class="bash">apt-get update \
&amp;&amp; apt-get install -y curl \
&amp;&amp; rm -rf /var/lib/apt/lists/*
</span>
<span class="hljs-comment"># Installation de Node.js à partir du site officiel</span>
<span class="hljs-built_in">RUN</span> <span class="bash">curl -LO <span class="hljs-string">"https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz"</span> \
&amp;&amp; tar -xzf node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span> --strip-components=<span class="hljs-number">1</span> \
&amp;&amp; rm node-v0.<span class="hljs-number">12.5</span>-linux-x64.tar.gz
</span>
<span class="hljs-comment"># Ajout du fichier de dépendances package.json </span>
<span class="hljs-built_in">ADD</span> <span class="bash">package.json /app/
</span>
<span class="hljs-comment"># Changement du repertoire courant</span>
<span class="hljs-built_in">WORKDIR</span> <span class="bash">/app
</span>
<span class="hljs-comment"># Installation des dépendances</span>
<span class="hljs-built_in">RUN</span> <span class="bash">npm install
</span>
<span class="hljs-comment"># Ajout des sources</span>
<span class="hljs-built_in">ADD</span> <span class="bash">. /app/
</span>
<span class="hljs-comment"># On expose le port 3000</span>
<span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">3000</span>

<span class="hljs-comment"># On partage un dossier de log</span>
<span class="hljs-built_in">VOLUME</span> <span class="bash">/app/<span class="hljs-built_in">log</span>
</span>
<span class="hljs-comment"># On lance le serveur quand on démarre le conteneur</span>
<span class="hljs-built_in">CMD</span> <span class="bash">node server.js</span>
</code></pre><p>Avant de transformer ce Dockerfile en une image, vous devez créer un fichier de
plus, le <code>.dockerignore</code>, ce fichier permet comme un <code>.gitignore</code> de ne pas
inclure certain fichier dans votre image docker, et c’est très important afin
d’éviter d’inclure les dépendances de votre projet dans votre image
(<code>node_modules</code> dans notre cas) qui sont propres à votre
système, mais pas au système du conteneur. Voici à quoi votre <code>.dockerignore</code>
doit ressembler :</p>
<pre><code><span class="hljs-tag">node_modules</span>
<span class="hljs-class">.git</span>
</code></pre><p>Pour transformer ce Dockerfile en une image docker, vous devez utiliser cette
commande :</p>
<pre><code class="lang-console">$ docker build -t fullstack-js .
Sending build context to Docker daemon 4.381 MB
Sending build context to Docker daemon
Step 0 : FROM debian:jessie
 -<span class="ruby">--&gt; bf84c1d84a8f
</span>Step 1 : RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">93258459</span>a279
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>fffcf3749a2
</span>Removing intermediate container 93258459a279
Step 2 : RUN curl -LO "https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz" &amp;&amp; tar -xzf node-v0.12.5-linux-x64.tar.gz -C /usr/local --strip-components=1 &amp;&amp; rm node-v0.12.5-linux-x64.tar.gz
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> a3a17d584bae
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">4</span>eaa62ace8de
</span>Removing intermediate container a3a17d584bae
Step 3 : ADD *.json /app/
 -<span class="ruby">--&gt; <span class="hljs-number">1</span>e8ffd7e10a8
</span>Removing intermediate container 5db20e8b8ed2
Step 4 : WORKDIR /app
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">7</span>b84b06642b1
</span> -<span class="ruby">--&gt; <span class="hljs-number">9</span>c0e2287c34d
</span>Removing intermediate container 7b84b06642b1
Step 5 : RUN npm install
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0523</span>df6e9aac
</span>...
 -<span class="ruby">--&gt; <span class="hljs-number">6</span>d7327ebee3<span class="hljs-number">0</span>
</span>Removing intermediate container 0523df6e9aac
Step 6 : ADD . /app
 -<span class="ruby">--&gt; <span class="hljs-number">13</span>bdbe70c6fa
</span>Removing intermediate container 3c83d82c1d53
Step 7 : EXPOSE 3000
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">51</span>e252173b12
</span> -<span class="ruby">--&gt; <span class="hljs-number">6</span>c62eb1197e2
</span>Removing intermediate container 51e252173b12
Step 8 : VOLUME /app/log
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">4</span>af0bb73307b
</span> -<span class="ruby">--&gt; <span class="hljs-number">15</span>b6190de473
</span>Removing intermediate container 4af0bb73307b
Step 9 : CMD node server.js
 -<span class="ruby">--&gt; <span class="hljs-constant">Running</span> <span class="hljs-keyword">in</span> <span class="hljs-number">9522</span>c6b9bf95
</span> -<span class="ruby">--&gt; aaf20fb25dac
</span>Removing intermediate container 9522c6b9bf95
Successfully built aaf20fb25dac
</code></pre>
<p>L’option <code>-t</code> permet de nommer votre image docker ce qui vous servira lorsque
vous voudrez lancer votre conteneur. Et le <code>.</code> est le repertoire ou ce trouve
le Dockerfile, dans notre cas le dossier courant.</p>
<p>Maintenant, vous pouvez lancer votre conteneur de cette manière :</p>
<pre><code class="lang-console">$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> -p 3000:3000 -v $(<span class="hljs-keyword">pwd</span>)/<span class="hljs-keyword">log</span>:/<span class="hljs-keyword">app</span>/<span class="hljs-keyword">log</span> fullstack-js
</code></pre>
<p>Cette commande permet de lancer notre image en partageant le port et un dossier
avec votre ordinateur, si vous voulez plus de détail sur le fonctionnement du
client docker, je vous invite à lire mon <a href="/posts/docker/introduction-a-docker" >article
précédent</a>.</p>
<hr>
<p>Dans cet article, vous avez pu voir comment créer votre propre Dockerfile,
maintenant vous pouvez créer des images docker parfaitement adaptées à votre
projet, et même plus. En cherchant sur internet, vous pourrez trouver des images
docker pour tout et n’importe quoi, comme des images pour lancer chrome dans un
conteneur par exemple, si vous voulez en savoir plus je vous redirige vers le
blog de <a href="https://blog.jessfraz.com/post/docker-containers-on-the-desktop/" >Jessie
Frazelle</a>.</p>
<p>Dans le prochain article, je vous parlerais de docker-compose, un outil qui
permet de lancer des applications multi-conteneurs facilement.</p>
]]></description>
            <link>http://putaindecode.fr/posts/docker/les-dockerfiles/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/docker/les-dockerfiles/</guid>
            <pubDate>Thu, 02 Jul 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[SemVer, c'est quoi ?]]></title>
            <description><![CDATA[<p><em>Ce post a été largement inspiré de la mauvaise expérience que j’ai pu avoir
avec l’évolution de <a href="http://backbonejs.org/" >Backbone.js</a> qui, ne respectant pas SemVer, m’a posé des
problèmes lors de mise à jour de versions. Les node_modules (dépendances de
dépendances) sont aussi en question.</em></p>
<p>Depuis quelques temps, vous devez entendre le terme <strong>SemVer</strong> par-ci par-là
mais peut-être que vous ne savez pas ce que c’est ou que vous ne savez pas
comment l’appliquer. Et je vous comprends, j’ai mis un peu de temps à maitriser
le sujet.</p>
<p>Pour faire simple, <strong>SemVer</strong> (voulant dire <em>Semantic Versioning</em>) est une
gestion sémantique des versions. En d’autres termes, une façon de numéroter les
versions de manière logique, cohérente, parlante, ayant du sens. Ce n’est
cependant pas forcément une norme, vous n’êtes pas obligé(e) de la respecter
mais ce serait vraiment, vraiment dommage car il tend justement à l’être.</p>
<p>Mais tout d’abord, posons les bases, qu’est-ce qu’une version ?</p>
<p>Une version s’applique à un produit, une application, une bibliothèque, un OS,
tout ce qui a une progression en informatique. Cela permet de définir
l’avancement du produit. La majorité du temps (sauf pour quelques hérétiques),
cela s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code>, <code>Y</code> et <code>Z</code> sont des entiers (pas
forcément des chiffres d’ailleurs, cela peut être supérieur à 9) soit <code>1.0.10</code>
par exemple. Il est possible que vous voyiez cette forme <code>vX.Y.Z</code> comme <code>v1.0.10</code>
mais en toute franchise, je ne l’apprécie pas. J’aime que mon tag équivaille à
ma version en elle-même. Purement personnel.</p>
<p>Maintenant que nous savons ce qu’est une version, voyons voir ce qu’est
réellement <strong>SemVer</strong>.</p>
<p><strong>SemVer</strong> est un moyen cohérent, pertinent de nommer ses versions afin de
savoir rapidement quelles modifications ont été apportées à votre projet.</p>
<p>Voyons voir ce que dit la documentation officielle de
<a href="http://semver.org/lang/fr/" >SemVer</a></p>
<blockquote>
<p>Étant donné un numéro de version MAJEUR.MINEUR.CORRECTIF, il faut incrémenter :</p>
<p>le numéro de version MAJEUR quand il y a des changements
rétro-incompatibles,<br>
le numéro de version MINEUR quand il y a des changements rétro-compatibles,<br>
le numéro de version de CORRECTIF quand il y a des corrections d’anomalies
rétro-compatibles</p>
<p>Des libellés supplémentaires peuvent être ajoutés pour les versions de
pré-livraison et pour des méta-données de construction sous forme d’extension du
format MAJEURE.MINEURE.CORRECTIF.</p>
</blockquote>
<p>On comprend effectivement l’idée de <strong>SemVer</strong> (et la suite du site explique
comment l’appliquer) mais je trouve que l’on peut mieux expliquer.</p>
<p>Pour comprendre <strong>SemVer</strong>, il faut se mettre dans la peau de l’utilisateur qui
va se servir de votre production.</p>
<p>En effet, <strong>SemVer</strong> est un contrat que vous signez avec vos utilisateurs, une
forme de respect qui leur permet d’adapter leur code ou non en fonction des
versions que vous proposez.</p>
<p>Si je devais définir à quelqu’un ce qu’est <strong>SemVer</strong>, je lui dirais ceci :</p>
<blockquote>
<p>SemVer s’écrit de cette façon : <code>X.Y.Z</code> où <code>X</code> est “majeur”, <code>Y</code> est “mineur”,
<code>Z</code> est “patch”.</p>
<p>Qu’est-ce que cela veut dire. Cela veut dire que si vous avez corrigé un bug
dans votre lib et que cela n’affecte en rien le code écrit par votre
utilisateur, alors incrémentez <code>Z</code> (+0.0.1).</p>
<p>Si vous avez fait des ajouts dans votre app qui peuvent être intéressants pour
l’utilisateur et mérite une certaine attention afin d’améliorer le code qui
utilise votre lib, alors incrémentez <code>Y</code> (+0.1.0).</p>
<p>Si en revanche, vous avez cassé ne serait-ce qu’une partie de l’API (“breaking
changes”), que vous avez <em>juste</em> changé des noms de méthodes / fonctions déjà
existantes (et donc sûrement utilisées par quelqu’un d’autre), que finalement
cela nécessite <strong>forcément</strong> une modification de la part de l’utilisateur sous
peine que sa propre app ne fonctionne plus, alors incrémentez <code>X</code> (+1.0.0).</p>
</blockquote>
<p>C’est vraiment une question de respect envers qui vous proposez votre lib. Par
<strong>SemVer</strong>, je vous informe des potentielles modifications ou lectures de
documentation que vous devez faire. Il ne faut vraiment pas voir ça comme une
évolution de votre propre code.</p>
<p>Par exemple, vous avez refactorisé tout votre code mais l’API n’a pas changé.
Alors <code>Z</code> suffit. Et si vous avez ajoutez des méthodes, c’est plutôt <code>Y</code>.
Pourtant il y a eu une quantité phénoménale de code modifié. Des lignes et des
lignes. Est-ce pour autant que vous devez incrémentez <code>X</code> ? Non. Surtout lorsque
les tests automatisés n’ont pas été modifiés et passent toujours.</p>
<p>En revanche, vous ne faites qu’une petite modification de nom de méthode qui ne
vous semble pas appropriée, ça ne vous prend qu’une ligne de modification, vous
pourriez croire que c’est uniquement <code>Z</code> à changer ? Non plus. Là, vous modifiez
le contrat que l’utilisateur a acquiescé en utilisant votre lib ; vous avez
alors la responsabilité de lui indiquer que son code doit absolument changer
sinon celui-ci ne marchera plus correctement.</p>
<p>En bref, ne voyez pas l’évolution de votre projet avec <strong>SemVer</strong> mais le
contrat que vous signez implicitement avec vos utilisateurs.</p>
<p>Oh et oui, surtout, surtout, ce n’est pas parce que vous êtes arrivé(e) à <code>9</code>
dans <code>Y</code> ou <code>Z</code> que le nombre le précédant doit augmenter. Par exemple <em>mineur</em>
sur <code>1.9.0</code> ? Alors <code>1.10.0</code> et non <code>2.0.0</code>.</p>
<p>J’espère qu’avec ceci, vous vous sentirez plus à l’aise.</p>
<h2 id="tips-npm">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/env/semver-c-est-quoi/#tips-npm">#</a>
      Tips npm
    </h2><p>Avec npm, il est possible de mettre à jour rapidement son <code>package.json</code> et tag
git en utilisant la commande <code>$ npm version</code>. Comme ceci :</p>
<pre><code class="lang-console">$ npm version (major|<span class="hljs-string">minor</span>|<span class="hljs-string">patch)</span>
</code></pre>
<p>Cela vous incrémentera le <code>package.json</code>  et vous fera un beau commit + tag dans
git tel que :</p>
<pre><code class="lang-console"><span class="hljs-subst">*</span> b474d9c (HEAD <span class="hljs-subst">-&gt; </span>master, <span class="hljs-built_in">tag</span>: <span class="hljs-number">1.5</span><span class="hljs-built_in">.3</span>, origin/master) <span class="hljs-number">1.5</span><span class="hljs-built_in">.3</span><span class="hljs-string">`.</span>
</code></pre>
<p>Et pour éviter d’avoir le “v” dans les tags git qui est par défaut dans npm,
faites :</p>
<pre><code class="lang-console">$ npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">tag</span>-<span class="hljs-keyword">version</span>-prefix <span class="hljs-string">""</span>
</code></pre>
<h2 id="changelog">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/env/semver-c-est-quoi/#changelog">#</a>
      Changelog
    </h2><p><strong>SemVer</strong> va de pair avec les <a href="http://keepachangelog.com/" >changelog</a>. Mettre à
jour le changelog vous permet d’indiquer très rapidement ce qui a été modifié
sans que l’utilisateur ait forcément à regarder votre code. Il est surtout très
important lors d’ajouts de fonctionnalités ou de modifications (majeures et
mineures) afin de voir directement les méthodes / fonctions affectées mais aussi
dans le cas d’un patch de voir le gain obtenu de cette nouvelle mise à jour. À
ajouter directement dans le <code>README.md</code> à la fin ou carrément dans un fichier ou
des fichiers dédiés à ça.
Voici un <a href="https://github.com/cssnext/cssnext/blob/master/CHANGELOG.md" >exemple</a>.</p>
<hr>
<p>Stay safe, use <strong>SemVer</strong>.</p>
<p>Ressources :</p>
<ul>
<li><a href="http://semver.org/" >site officiel</a></li>
<li><a href="http://semver-ftw.org/" >semver-ftw</a></li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/env/semver-c-est-quoi/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/env/semver-c-est-quoi/</guid>
            <pubDate>Tue, 16 Jun 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introduction à Docker]]></title>
            <description><![CDATA[<p>Avant de vous parler de Docker je vais vous raconter une histoire que tout
développeur a vécu au moins une fois.</p>
<p>Il était une fois un jeune développeur qui codait tranquillement sur son
ordinateur. Il était pressé car comme tout étudiant qui se
respecte il devait présenter son travail le lendemain matin. Après des heures de
travail, l’application était là, et elle fonctionnait à merveille ! Le
lendemain, notre codeur arriva tout fier pour sa présentation, avec son projet
sur une clé usb. Il le transfère sur l’ordinateur de son pote et là, ça
ne fonctionne pas !</p>
<h2 id="quel-est-le-probleme">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#quel-est-le-probleme">#</a>
      Quel est le problème ?
    </h2><p>L’application de notre jeune développeur ne fonctionne pas sur l’ordinateur de son ami à cause d’un problème d’environnement. Entre deux systèmes, il
peut y avoir des différences de version sur les dépendances ou encore des
bibliothèques manquantes.</p>
<p>Ici, notre problème se limite à 2 systèmes, mais imaginez une équipe de 10
personnes avec des ordinateurs sous OS X, Linux ou même Windows, un serveur de
test sous Ubuntu 12.04, et un serveur de production sous CentOS 7.
S’assurer que leur application fonctionne bien sur tous ces environnements peut
s’avérer être un vrai cauchemar !</p>
<p>Mais il existe des solutions et parmi l’une d’entre elles nous avons…</p>
<h2 id="docker">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#docker">#</a>
      Docker
    </h2><h3 id="c-est-quoi-docker">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#c-est-quoi-docker">#</a>
      C’est quoi Docker ?
    </h3><p>Docker est une plateforme qui va vous permettre d’exécuter votre code à
l’intérieur d’un conteneur indépendamment de la machine sur laquelle vous êtes !
Un conteneur ressemble à une machine virtuelle sauf qu’il n’embarque pas tout un
système d’exploitation avec lui ce qui lui permet de s’exécuter en quelque
secondes et d’être beaucoup plus léger.</p>
<p>Docker peut donc résoudre notre problème d’environnement, car quelle que soit la
machine que nous utiliserons, le code s’exécutera de la même manière.</p>
<p>La plateforme Docker est composée de deux éléments :</p>
<ul>
<li>Le démon Docker qui s’exécute en arrière-plan et qui s’occupe de gérer vos
conteneurs</li>
<li>Le client Docker qui vous permet d’interagir avec le démon par l’intermédiaire
d’un outil en ligne de commande</li>
</ul>
<p>Si vous voulez plus d’informations sur le fonctionnement interne de Docker je
vous redirige vers l’article du site officiel : <a href="https://docs.docker.com/introduction/understanding-docker" >Understanding
Docker</a></p>
<h3 id="comment-l-installer">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#comment-l-installer">#</a>
      Comment l’installer ?
    </h3><p>Le client Docker fonctionne sur tous les systèmes d’exploitation. En revanche,
le démon Docker utilise des fonctionnalités du noyau Linux afin de gérer
les conteneurs. Il ne fonctionne donc que sur Linux. Heureusement la majorité des
serveurs utilise Linux, et pour vos ordinateurs sous OS X, ou même Windows, il
existe une solution.</p>
<p>Si vous utilisez une machine avec une distribution Linux vous pourrez lancer le
démon Docker directement sur cette dernière, par contre avec Windows ou OS X
vous devrez lancer le démon dans une machine virtuelle, mais rassurez-vous,
c’est très simple !</p>
<p>Pour le guide d’installation de Docker en fonction de votre système je vous
redirige de nouveau vers le site officiel : <a href="https://docs.docker.com/installation/#installation" >Guide
d’installation</a></p>
<h3 id="un-premier-exemple">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#un-premier-exemple">#</a>
      Un premier exemple
    </h3><p>Avant de commencer, vous allez devoir télécharger une image Docker qui servira
de base à vos prochains conteneurs.</p>
<p>Pour cet exemple, on va partir d’une image Ubuntu :</p>
<pre><code class="lang-console">$ docker pull <span class="hljs-string">ubuntu:</span>trusty
<span class="hljs-string">trusty:</span> Pulling from ubuntu
<span class="hljs-string">e9e06b06e14c:</span> Pull complete
<span class="hljs-string">a82efea989f9:</span> Pull complete
<span class="hljs-number">37</span><span class="hljs-string">bea4ee0c81:</span> Pull complete
<span class="hljs-number">07</span><span class="hljs-string">f8e8c5e660:</span> Already exists
<span class="hljs-string">ubuntu:</span><span class="hljs-string">trusty:</span> The image you are pulling has been verified. <span class="hljs-string">Important:</span> image verification is a tech preview feature and should not be relied on to provide security.
<span class="hljs-string">Digest:</span> <span class="hljs-string">sha256:</span><span class="hljs-number">014</span>fa1d5b72b4fe0ec2b4642610fbbfdd52f502da8e14e80de07bd1dd774e4ef
<span class="hljs-string">Status:</span> Downloaded newer image <span class="hljs-keyword">for</span> <span class="hljs-string">ubuntu:</span>trusty
</code></pre>
<p>Cette commande va télécharger depuis le Docker Hub l’image de la version 14.04
(trusty) d’Ubuntu. Il existe bien d’autres images que vous pourrez trouver
<a href="https://registry.hub.docker.com" >sur le registry Docker</a>.</p>
<p>Pour voir les images que vous avez téléchargées, utilisez cette commande :</p>
<pre><code class="lang-console">$ docker images
REPOSITORY    TAG       IMAGE ID        CREATED       VIRTUAL SIZE
ubuntu        trusty    <span class="hljs-number">07f</span>8e8c5e660    <span class="hljs-number">4</span> weeks ago   <span class="hljs-number">188.3</span> MB
</code></pre>
<p>Sur ma machine, l’image d’Ubuntu fais 188.3 MB, je vous avais dit que c’était
léger en comparaison à une machine virtuelle !</p>
<p>Maintenant, nous allons lancer un conteneur et rentrer à l’intérieur :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>docker run -it <span class="hljs-symbol">ubuntu:</span>trusty bash
root<span class="hljs-variable">@2cdceb5ff771</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span>
</code></pre>
<p>Cette commande crée un conteneur à partir de l’image <code>ubuntu:trusty</code>, y lance le
programme <code>bash</code> et y attache votre shell grâce aux options <code>-it</code></p>
<p>Vous pouvez maintenant exécuter les commandes que vous voulez, elle
s’exécuteront à l’intérieur du conteneur, par exemple :</p>
<pre><code class="lang-console">root@<span class="hljs-number">2</span>cdceb5ff771:/<span class="hljs-comment">#</span>
$ apt-<span class="hljs-keyword">get</span> moo
                 (__)
                 (oo)
           /<span class="hljs-comment">------\/</span>
          / |    ||
         *  /\<span class="hljs-comment">---/\</span>
            ~~   ~~
...<span class="hljs-string">"Have you mooed today?"</span>...
</code></pre>
<p>Vous pouvez quitter le conteneur en faisant un <code>Ctrl-d</code></p>
<p>Maintenant que vous êtes retourné sur votre machine, vous pouvez afficher la
liste des conteneurs lancés avec cette commande :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>docker ps
<span class="hljs-constant">CONTAINER ID </span>   <span class="hljs-constant">IMAGE </span>  <span class="hljs-constant">COMMAND </span>  <span class="hljs-constant">CREATED </span>  <span class="hljs-constant">STATUS </span>   <span class="hljs-constant">PORTS </span>  <span class="hljs-constant">NAMES</span>
</code></pre>
<p>Il n’y a rien ? C’est normal ! En quittant le conteneur ce dernier s’est arrêté
aussi. Pour l’afficher quand même, il suffit d’entrer cette commande :</p>
<pre><code class="lang-console">$ docker ps -<span class="hljs-tag">a</span>
CONTAINER ID    IMAGE           COMMAND   CREATED         STATUS                    PORTS   NAMES
<span class="hljs-number">2</span>cdceb5ff771    ubuntu:trusty   <span class="hljs-string">"bash"</span>    <span class="hljs-number">12</span> minutes ago  Exited (<span class="hljs-number">0</span>) <span class="hljs-number">2</span> minutes ago          loving_newton
</code></pre>
<p>Et pour supprimer ce conteneur ?</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>docker rm <span class="hljs-number">2</span>cdc
<span class="hljs-number">2</span>cdc
</code></pre>
<p>Évidemment, remplacez ‘2cdc’ par le <code>CONTAINER ID</code> approprié.</p>
<p>Passons maintenant à un deuxième exemple plus concret avec une application web.</p>
<h2 id="un-deuxieme-exemple-avec-node-js">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/docker/introduction-a-docker/#un-deuxieme-exemple-avec-node-js">#</a>
      Un deuxième exemple avec Node.js
    </h2><p>Pour commencer, vous allez récupérer l’image docker officiel de Node.js en
faisant :</p>
<pre><code class="lang-console">$ docker pull <span class="hljs-string">node:</span><span class="hljs-number">0.12</span>.4
<span class="hljs-number">0.12</span>.4: Pulling from node
<span class="hljs-number">7711</span><span class="hljs-string">db4bb553:</span> Pull complete
<span class="hljs-string">d1744e6e9471:</span> Pull complete
<span class="hljs-number">9332645</span><span class="hljs-string">b03a3:</span> Pull complete
<span class="hljs-string">a52a290821b3:</span> Pull complete
<span class="hljs-number">3575</span><span class="hljs-string">f1347ce7:</span> Already exists
<span class="hljs-number">39</span><span class="hljs-string">bb80489af7:</span> Already exists
<span class="hljs-string">df2a0347c9d0:</span> Already exists
<span class="hljs-number">7</span><span class="hljs-string">a3871ba15f8:</span> Already exists
<span class="hljs-string">a2703ed272d7:</span> Already exists
<span class="hljs-string">c9e3effdd23a:</span> Already exists
<span class="hljs-string">node:</span><span class="hljs-number">0.12</span>.4: The image you are pulling has been verified. <span class="hljs-string">Important:</span> image verification is a tech preview feature and should not be relied on to provide security.
<span class="hljs-string">Digest:</span> <span class="hljs-string">sha256:</span><span class="hljs-number">81</span>fb0812dd5e81f768773a121c8a6daced36893210c5ed50b504c4abcb04e10c
<span class="hljs-string">Status:</span> Downloaded newer image <span class="hljs-keyword">for</span> <span class="hljs-string">node:</span><span class="hljs-number">0.12</span>.4
</code></pre>
<p>Puis créez un fichier <code>server.js</code> avec le contenu suivant :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>)

<span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>{
  res.end(<span class="hljs-string">'Coucou depuis Docker'</span>)
});

server.listen(<span class="hljs-number">3000</span>)
</code></pre>
<p>Et maintenant, pour lancer notre application à l’intérieur d’un conteneur, vous
devez faire :</p>
<pre><code class="lang-console">$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> --name node-<span class="hljs-keyword">app</span> -p 3000:3000 -v $(<span class="hljs-keyword">pwd</span>):/<span class="hljs-keyword">app</span> node:0.12.4 node /<span class="hljs-keyword">app</span>/server.js
e9ca3cd8f90b8554ca99ec8ba15a039f827005bd8fecbf80d72ce7267006a6df
</code></pre>
<p>Si vous vous rendez sur <code>localhost:3000</code> (ou l’IP de la VM si êtes sur Windows
ou Mac), vous verrez : ‘Coucou depuis Docker’</p>
<p>C’est beau, mais comment ça marche ? Examinons les options une par une :</p>
<ul>
<li><code>-d</code> : cette option permet de lancer le conteneur en mode démon et donc de
tourner en tâche de fond à la différence de <code>-it</code> qui lançait le conteneur au
premier plan et nous donnait un accès direct au conteneur.</li>
<li><code>--name node-app</code> : cette option permet simplement de nommer notre conteneur,
ce qui peut servir pour l’arrêter et le relancer plus simplement (et à d’autres
choses plus complexes dont je parlerai dans un prochain article).</li>
<li><code>-p 3000:3000</code> : cette option permet de partager le port de votre machine avec
le port du conteneur. Le premier nombre est le port de votre machine et le
deuxième le port dans le conteneur.</li>
<li><code>-v $(pwd):/app</code> : cette option permet de partager un dossier avec votre
conteneur, ici, nous partageons le dossier courant (où se trouve notre fichier
<code>server.js</code>) avec le dossier <code>/app</code> dans le conteneur (attention si vous êtes
sur Mac ou Windows uniquement votre ‘home’ est partagé).</li>
<li><code>node:0.12.4</code> : l’image Docker que vous voulez utiliser.</li>
<li><code>node /app/server.js</code> : la commande à exécuter dans le conteneur.</li>
</ul>
<p>Et maintenant ? Vous pouvez afficher le conteneur en faisant : <code>docker ps</code>, l’arrêter
avec : <code>docker stop node-app</code> et le supprimer avec <code>docker rm node-app</code>.</p>
<hr>
<p>Dans cet article, nous avons vu comment récupérer des images Docker depuis le
Docker Hub et comment les instancier afin de créer des conteneurs. Mais pour aller
plus loin, ce serait bien si nous pouvions créer nos propres images, c’est ce que
nous apprendrons à faire à l’aide des Dockerfile dans le prochain article.</p>
]]></description>
            <link>http://putaindecode.fr/posts/docker/introduction-a-docker/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/docker/introduction-a-docker/</guid>
            <pubDate>Thu, 11 Jun 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Les webhooks GitHub]]></title>
            <description><![CDATA[<p>Vous avez pu lire récemment une <a href="/posts/ci/le-deploiement-continu/" >introduction sur l’intégration
continue</a> qui mène vers <a href="/posts/ci/introduction/" >le déploiement
continu</a>. Si vous utilisez GitHub pour héberger vos
sources et que vous cherchez un moyen très simple (peut-être un peu trop) de
mettre en place le déploiement continu <em>sans serveur d’intégration continue
dédié</em>, alors les webhooks peuvent répondre parfaitement à votre besoin.</p>
<h2 id="les-quoi">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/webhooks-github/#les-quoi">#</a>
      Les quoi ?
    </h2><p>Les webhooks permettent de lancer une action de façon automatique par
l’intermédiaire d’un ou plusieurs événements depuis un dépôt
<a href="http://github.com" >GitHub</a>. Concrètement, il va être possible de déployer son
projet sur un serveur de production, sauvegarder son site Internet, ou même
mettre à jour des stats dès qu’un commit sera envoyé ou même une issue ouverte.
Il est possible de faire tout ce que l’on veut dans la limite de son imagination
comme l’explique GitHub.</p>
<h2 id="comment-ca-marche">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/webhooks-github/#comment-ca-marche">#</a>
      Comment ça marche ?
    </h2><p>Le fonctionnement est on ne peut plus simple, un événement (merge, push, release
etc.) va déclencher une requête HTTP POST vers l’URL que vous avez configurée.
Le reste de l’exécution se fera sur le serveur où pointe l’URL, libre à vous
d’écrire le script que vous voulez pour effectuer les opérations que vous
souhaitez.</p>
<p>Il faut cependant être conscient que la simplification a un coût, à savoir que
même si une PR ou un commit venaient à rendre inopérant votre projet l’événement
se lancerait quand même.</p>
<h2 id="la-mise-en-place">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/webhooks-github/#la-mise-en-place">#</a>
      La mise en place
    </h2><p>Seul le propriétaire d’un dépôt dispose des droits nécessaires pour configurer
un webhook. Il suffit pour cela de se rendre dans <code>Settings</code> puis <code>Webhooks &amp;
Services</code> :</p>
<p><img src="http://putaindecode.fr/posts/ci/webhooks-github/setting_webhook.jpg" alt="Settings Webhooks GitHub"></p>
<p>Un petit clic sur <code>Add webhook</code> et vous obtenez une interface encore une fois
très simple :</p>
<p><img src="http://putaindecode.fr/posts/ci/webhooks-github/configuration_webhook.jpg" alt="Configuration Webhooks GitHub"></p>
<p>Cette interface se compose de trois parties :</p>
<ol>
<li>l’URL vers laquelle votre requête sera lancée</li>
<li>une secret key pour sécuriser votre requête</li>
<li>l’événement qui va déclencher votre requête</li>
</ol>
<p>La partie événement est relativement complète et là encore vous disposez de
trois possibilités :</p>
<ol>
<li>se déclenche au push</li>
<li>se déclenche à chaque événement</li>
<li>à vous de choisir les événements (un ou plusieurs) qui vous conviennent</li>
</ol>
<p>Une fois le <em>Webhook</em> activé un premier test ou plus exactement un <code>ping</code> va se
lancer. Il permettra de détecter que votre serveur répond bien à la requête :</p>
<p><img src="http://putaindecode.fr/posts/ci/webhooks-github/test_webhook.jpg" alt="Test Webhooks request GitHub"></p>
<p>La requête envoyée est très basique et embarque un JSON sur les informations de
votre dépôt (description, URL) et une liste des API mises à disposition. Le
reste du travail doit se faire sur votre serveur par l’intermédiaire de votre
API/script, etc.</p>
<p>Voici un petit exemple utilisant <code>express</code> :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express"</span>)
<span class="hljs-keyword">var</span> app = express()
<span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"body-parser"</span>)
<span class="hljs-keyword">var</span> xhub = <span class="hljs-built_in">require</span>(<span class="hljs-string">"express-x-hub"</span>)

<span class="hljs-comment">//Const</span>
<span class="hljs-keyword">var</span> xhubSecret = <span class="hljs-string">"MySecretKey"</span>
<span class="hljs-keyword">var</span> port = <span class="hljs-string">"8085"</span>
<span class="hljs-keyword">var</span> host = <span class="hljs-string">"localhost"</span>

<span class="hljs-comment">//Secret key</span>
app.use(xhub({ algorithm: <span class="hljs-string">"sha1"</span>, secret: xhubSecret }))

<span class="hljs-comment">// Configure express json</span>
app.use(bodyParser.json())

<span class="hljs-comment">// Main : Start the express http server</span>
<span class="hljs-keyword">var</span> server = app.listen(port, host, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(
    <span class="hljs-string">"App listening at http://%s:%s"</span>,
    server.address().address,
    server.address().port
  )
})

<span class="hljs-comment">// Add default route</span>
app.post(<span class="hljs-string">"/webhook"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{
  <span class="hljs-keyword">if</span>(!req.isXHubValid()){
    res.status(<span class="hljs-number">400</span>).send(<span class="hljs-string">'Invalid X-Hub Request'</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Secret key is invalid"</span>)
    <span class="hljs-keyword">return</span>
  }

  <span class="hljs-keyword">var</span> command = req.headers[<span class="hljs-string">"x-github-event"</span>]

  <span class="hljs-keyword">switch</span>(command) {

    <span class="hljs-comment">//Event create (Branch, or tag created)</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"create"</span>:
      res.send(<span class="hljs-string">"Event create trigger"</span>)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Create event"</span>)
      <span class="hljs-keyword">break</span>

    <span class="hljs-comment">//Event release (Release published in a repository)</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"release"</span>:
      res.send(<span class="hljs-string">"Event release trigger"</span>)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Release Event"</span>)
      <span class="hljs-keyword">break</span>

    <span class="hljs-keyword">default</span>:
      res.status(<span class="hljs-number">400</span>).send(<span class="hljs-string">"Event not supported : "</span> + command)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Event not supported : "</span> + req.headers[<span class="hljs-string">"X-Github-Event"</span>])
  }
})
</code></pre>
<p>Pour vous donner une idée de ce que peut envoyer GitHub, voici deux gists :</p>
<ul>
<li><a href="http://putaindecode.fr/posts/ci/webhooks-github/header.txt" >Headers</a></li>
<li><a href="http://putaindecode.fr/posts/ci/webhooks-github/payload.json" >Payload</a></li>
</ul>
<h2 id="this-is-just-the-beginning">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/webhooks-github/#this-is-just-the-beginning">#</a>
      This is just the beginning
    </h2><p>Cette solution est un début de piste pour le déploiement continu, mais elle ne
doit pas se faire sans une solution de test que ce soit coté GitHub ou coté
serveur.</p>
<p>Si vous souhaitez plus d’informations ou même pousser un peu plus la mise en
place des webhooks, GitHub a comme à son habitude publié un
<a href="https://developer.github.com/webhooks/" >guide</a> très bien détaillé et complet.</p>
]]></description>
            <link>http://putaindecode.fr/posts/ci/webhooks-github/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/ci/webhooks-github/</guid>
            <pubDate>Tue, 09 Jun 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introduction à cssnext]]></title>
            <description><![CDATA[<p>D’après le <a href="http://cssnext.io/" >site officiel</a>:</p>
<blockquote>
<p><strong>cssnext</strong> est un transpileur CSS qui vous permet d’utiliser dès aujourd’hui la syntaxe CSS de demain. Il transforme les spécifications CSS qui ne sont pas encore mises en œuvre sur les navigateurs les plus populaires en CSS compatible.</p>
</blockquote>
<h2 id="ca-veut-dire-quoi-exactement">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#ca-veut-dire-quoi-exactement">#</a>
      Ça veut dire quoi exactement ?
    </h2><p>Depuis CSS3, vous avez savez sans doute que CSS est divisé en plusieurs documents indépendants appelés “modules”. Ces modules peuvent avoir différents niveaux de stabilité et différents <a href="http://www.w3.org/Style/CSS/current-work#legend" >statuts</a>. La mise en œuvre de ces modules par les navigateurs peut prendre un certain temps et encore plus pour que le W3C les approuve comme <a href="http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C" >Recommandation</a>.</p>
<p>Avec <strong>cssnext</strong>, vous pouvez utiliser la syntaxe des <a href="http://www.xanthir.com/b4Ko0" >nouveaux modules CSS</a> tels que les <em>propriétés personnalisées (custom properties level 1)</em> ou les <em>media queries personnalisées (custom media queries level 1)</em>. <strong>cssnext</strong> va transformer ces nouvelles et étranges syntaxes en du CSS compréhensible par les navigateurs que vous voulez supporter.</p>
<p>En clair, il vous donne un <strong>avant-goût du futur</strong>.</p>
<p>Je ne sais pas vous mais étant quelqu’un qui aime expérimenter avec les dernières technologies de pointe, je trouve ça plutôt cool !</p>
<p>Je vous conseille de jeter un oeil à la <a href="http://cssnext.io/features/" >liste des fonctionnalités</a>.</p>
<h3 id="quid-de-mon-preprocesseur-actuel">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#quid-de-mon-preprocesseur-actuel">#</a>
      Quid de mon préprocesseur actuel ?
    </h3><p>Oubliez les risques liés à une abstraction trop élevée des CSS par les pré-processeurs actuels ; certes causés par une (sur-|mauvaise) utilisation de ces outils mais quand même.</p>
<p>Devinez quoi, vous n’en avez pas forcément besoin.</p>
<p>Essayez <strong>cssnext</strong> et retournez à ce bon <del>vieux</del> nouveau CSS. Et avec un zeste de <a href="/posts/css/petite-definition-bem/" >méthodologie BEM</a>, vous vous sentirez revivre.</p>
<h2 id="exemples">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#exemples">#</a>
      Exemples
    </h2><p>Voyons voir quelles sont les fonctionnalités offertes par <strong>cssnext</strong> pour le moment.</p>
<p>Avant toute chose, vous devriez aller faire un tour sur le <a href="http://cssnext.io/playground/" >playground du site officiel</a>.</p>
<h3 id="prefixes-proprietaires-automatiques">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#prefixes-proprietaires-automatiques">#</a>
      Préfixes propriétaires automatiques
    </h3><pre><code class="lang-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span>
</code></pre>
<p>Cela va être transformé par <strong>cssnext</strong> via Autoprefixer en :</p>
<pre><code class="lang-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
      <span class="hljs-rule"><span class="hljs-attribute">-ms-transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transform</span>:<span class="hljs-value"> <span class="hljs-function">skewX</span>(<span class="hljs-number">25deg</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">-webkit-transition</span>:<span class="hljs-value"> -webkit-transform <span class="hljs-number">1s</span></span></span>;
          <span class="hljs-rule"><span class="hljs-attribute">transition</span>:<span class="hljs-value"> transform <span class="hljs-number">1s</span></span></span>;
}</span>
</code></pre>
<h3 id="proprietes-personnalisees-et-var-limite-a-root">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#proprietes-personnalisees-et-var-limite-a-root">#</a>
      Propriétés personnalisées et var() limité à <code>:root</code>
    </h3><p>Aussi connues sous le nom des très attendues <a href="http://www.w3.org/TR/css-variables/" >variables CSS</a>.</p>
<pre><code class="lang-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--primary-Color</span>:<span class="hljs-value">                 <span class="hljs-hexcolor">#E86100</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--secondary-Color</span>:<span class="hljs-value">               <span class="hljs-hexcolor">#2c3e50</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">--r-Grid-baseFontSize</span>:<span class="hljs-value">           <span class="hljs-number">1rem</span></span></span>;
}</span>
</code></pre>
<p>À utiliser de cette façon :</p>
<pre><code class="lang-css"><span class="hljs-class">.h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--primary-Color)</span></span>;
}</span>
<span class="hljs-class">.h1</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--secondary-Color)</span></span>;
}</span>
<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">var</span>(--r-Grid-baseFontSize)</span></span>;
}</span>
</code></pre>
<h3 id="media-queries-personnalisees">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#media-queries-personnalisees">#</a>
      Media Queries personnalisées
    </h3><p>Pour créer des alias sémantiques, clairs et simples (<a href="http://dev.w3.org/csswg/mediaqueries/#custom-mq" >lisez la doc’</a>).</p>
<pre><code class="lang-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-medium (width &lt;= <span class="hljs-number">40rem</span>)</span>;
<span class="hljs-at_rule">@<span class="hljs-keyword">custom-media</span> --viewport-large (max-width: <span class="hljs-number">50em</span>)</span>;
</code></pre>
<p>Prenons par exemple :</p>
<pre><code class="lang-css"><span class="hljs-pseudo">:root</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">--fontSize</span>:<span class="hljs-value"> <span class="hljs-number">1.2rem</span></span></span>;
}</span>

<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-medium) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.2</span>)</span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (--viewport-large) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-function">calc</span>(<span class="hljs-function">var</span>(--fontSize) * <span class="hljs-number">1.4</span>)</span></span>; }</span>
}
</code></pre>
<p>Le code généré sera alors :</p>
<pre><code class="lang-css"><span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">40rem</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.44rem</span></span></span>; }</span>
}
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">50em</span>) </span>{
  <span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1.68rem</span></span></span>; }</span>
}
</code></pre>
<h3 id="selecteurs-personnalises">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#selecteurs-personnalises">#</a>
      Sélecteurs personnalisés
    </h3><p>Encore une fois, un petit tour sur les <a href="http://dev.w3.org/csswg/css-extensions/#custom-selectors" >specs</a> pour commencer. Disons qu’on veuille appliquer des styles à toutes les balises de titre.</p>
<pre><code class="lang-css"><span class="hljs-at_rule">@<span class="hljs-keyword">custom-selector</span> :--heading h1, h2, h3, h4, h5, h6</span>;

<span class="hljs-pseudo">:--heading</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">0</span></span></span>;
}</span>
</code></pre>
<p>Ce qui va générer le code suivant :</p>
<pre><code class="lang-css">h1,
h2,
h3,
h4,
h5,
h6 { margin-top; 0; }
</code></pre>
<h3 id="color">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#color">#</a>
      <code>color()</code>
    </h3><p>Une simple <a href="http://dev.w3.org/csswg/css-color/#modifying-colors" >fonction color</a> qui sert à appliquer des <em>réglages couleur</em> (teinte, luminosité, entre autres) à une couleur de base.</p>
<p>Exemples :</p>
<pre><code class="lang-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">red</span>(+<span class="hljs-number">30</span>) <span class="hljs-function">green</span>(-<span class="hljs-number">50</span>) <span class="hljs-function">blue</span>(<span class="hljs-number">6%</span>) <span class="hljs-function">alpha</span>(.<span class="hljs-number">65</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">saturation</span>(-<span class="hljs-number">8%</span>) <span class="hljs-function">whiteness</span>(+<span class="hljs-number">50%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">lightness</span>(<span class="hljs-number">5%</span>) <span class="hljs-function">blackness</span>(-<span class="hljs-number">25%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">tint</span>(<span class="hljs-number">80%</span>))</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">color</span>(<span class="hljs-hexcolor">#2B88E6</span> <span class="hljs-function">shade</span>(<span class="hljs-number">75%</span>))</span></span>;
}</span>
</code></pre>
<p>Le code ci-dessus sera transformé en…</p>
<pre><code class="lang-css"><span class="hljs-class">.class</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">43</span>, <span class="hljs-number">136</span>, <span class="hljs-number">230</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">73</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0.65</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-top-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">181</span>, <span class="hljs-number">201</span>, <span class="hljs-number">222</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-right-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">3</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-bottom-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">213</span>, <span class="hljs-number">231</span>, <span class="hljs-number">250</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-left-color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">11</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>)</span></span>;
}</span>
</code></pre>
<p><strong>cssnext</strong> propose aussi les fonctionalités suivantes liées à la couleur.</p>
<h4 id="hwb">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#hwb">#</a>
      hwb()
    </h4><p>D’après les <a href="http://dev.w3.org/csswg/css-color/#the-hwb-notation" >spécifications</a>, HWB (Hue-Whiteness-Blackness) est similaire à la notation HSL mais plus facile à utiliser pour les humains.</p>
<pre><code class="lang-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">hwb</span>(<span class="hljs-number">125</span>, <span class="hljs-number">32%</span>, <span class="hljs-number">47%</span>)</span></span>;
}</span>
</code></pre>
<p>Rendu :</p>
<pre><code class="lang-css"><span class="hljs-class">.title</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgb</span>(<span class="hljs-number">33</span>, <span class="hljs-number">135</span>, <span class="hljs-number">42</span>)</span></span>;
}</span>
</code></pre>
<h4 id="gray">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#gray">#</a>
      gray()
    </h4><p>Les gris sont <a href="http://dev.w3.org/csswg/css-color/#grays" >tellement cool</a> qu’ils ont une fonction rien que pour eux.</p>
<pre><code class="lang-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">120</span>, <span class="hljs-number">50%</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">gray</span>(<span class="hljs-number">17%</span>, <span class="hljs-number">25%</span>)</span></span>;
}</span>
</code></pre>
<p>Ce qui donnera :</p>
<pre><code class="lang-css"><span class="hljs-class">.section</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">120</span>, <span class="hljs-number">0.5</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0.25</span>)</span></span>;
}</span>
</code></pre>
<h4 id="rrggbbaa">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#rrggbbaa">#</a>
      #rrggbbaa
    </h4><p><strong>cssnext</strong> transforme les <a href="http://dev.w3.org/csswg/css-color/#hex-notation" >notations hexadécimales</a> #RRGGBBAA et #RGBA en rgba().</p>
<pre><code class="lang-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#5c69</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#C73D5C59</span></span></span>;
}</span>
</code></pre>
<p>Résultat :</p>
<pre><code class="lang-css"><span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">85</span>, <span class="hljs-number">204</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0.6</span>)</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-function">rgba</span>(<span class="hljs-number">199</span>, <span class="hljs-number">61</span>, <span class="hljs-number">92</span>, <span class="hljs-number">0.34902</span>)</span></span>;
}</span>
</code></pre>
<h4 id="rebeccapurple">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#rebeccapurple">#</a>
      rebeccapurple
    </h4><p>Transforme simplement la couleur <a href="https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-" ><code>rebeccapurple</code></a> en <code>rgb(102, 51, 153)</code>.</p>
<h3 id="rem-units">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#rem-units">#</a>
      rem units
    </h3><p>Rien de bien extraordinaire ici, on génère un <strong><em>fallback</em> en pixels pour les unités en rem</strong>. Certaines personnes pourraient penser qu’un tel <em>fallback</em> est inutile de nos jours. Cependant, pour des projets bien spécifiques (compatibilité IE 7 et 8 requise), c’est encore une nécessité.
Non mais vous n’avez quand même pas besoin d’un exemple pour ça ? Si ? Bon… d’accord. Allons-y !</p>
<pre><code class="lang-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span>
</code></pre>
<p>Résultat :</p>
<pre><code class="lang-css"><span class="hljs-class">.section-Highlight</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">40px</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">2.5rem</span></span></span>;
}</span>
</code></pre>
<h2 id="note-importante-sur-les-fonctionnalites">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#note-importante-sur-les-fonctionnalites">#</a>
      Note importante sur les fonctionnalités
    </h2><p>Vous pouvez manuellement activer ou désactiver certaines fonctionnalités si vous n’en ressentez pas le besoin.
Cela étant dit, il vous est conseillé d’utiliser l’option <a href="http://cssnext.io/usage/#browsers" ><code>browsers</code></a>,
qui permet de gérer automatiquement la liste des fonctionnalités à activer.
Par exemple si vous spécifiez un environnement où IE 8 n’est pas supporté, l’option de transformation des <code>rem</code>
en <code>px</code> ne sera pas activé. Tout comme Autoprefixer ne rajoutera pas les préfixes inutiles.</p>
<h2 id="fonctionnalites-bonus">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#fonctionnalites-bonus">#</a>
      Fonctionnalités bonus
    </h2><p>Les deux fonctionnalités qui vont suivre ne sont pas vraiment en rapport avec les spécifications CSS. Cependant, elles méritent tout de même leur place dans cette brève présentation de l’outil.</p>
<h3 id="import">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#import">#</a>
      <code>import</code>
    </h3><p>Et si vous pouviez importer des fichiers locaux et des modules (<code>node_modules</code> ou <code>web_modules</code>) pour produire un seul et même fichier CSS les contenant tous ? Oui, <a href="https://github.com/sass/sass/issues/193" >c’est à vous que je m’adresse, les utilisateurs de Sass</a>, hum. Eh bien, avec <strong>cssnext</strong>, c’est possible.</p>
<h3 id="compress">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#compress">#</a>
      <code>compress</code>
    </h3><p>Comme vous l’avez sûrement deviné, c’est juste une option pour compresser <em>ou pas</em> votre fichier de sortie, et ceci grâce à <a href="https://github.com/ben-eb/cssnano" >cssnano</a>.</p>
<h3 id="usage">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/introduction-a-cssnext/#usage">#</a>
      Usage
    </h3><p>Voici un exemple simple de ces deux fonctionnalités. J’ai ici utilisé <a href="https://github.com/cssnext/gulp-cssnext" >gulp-cssnext</a>, un des <a href="http://cssnext.io/setup/" >nombreux plugins</a> qui vous aident à démarrer avec <strong>cssnext</strong>.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>),
    cssnext = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-cssnext"</span>);

gulp.task(<span class="hljs-string">'styles'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  gulp.src(<span class="hljs-string">"css/index.css"</span>)
  .pipe(cssnext({
    compress: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// default is false</span>
  }))
  .pipe(gulp.dest(<span class="hljs-string">"./dist/"</span>))
});
</code></pre>
<p>Ensuite, dans mon fichier <code>index.css</code>, j’ai ceci :</p>
<pre><code class="lang-css"><span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"normalize.css"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/normalize.css/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"cssrecipes-defaults"</span></span>; <span class="hljs-comment">/* == @import "./node_modules/cssrecipes-defaults/index.css"; */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"project-modules/partner"</span></span>; <span class="hljs-comment">/* relatif à css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"typo"</span></span>; <span class="hljs-comment">/* même niveau que mon index.css principal situé dans css/ */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">import</span> <span class="hljs-string">"highlight"</span> (min-width: <span class="hljs-number">25em</span>)</span>;
</code></pre>
<p>Et le rendu final sera :</p>
<pre><code class="lang-css"><span class="hljs-comment">/* contenu de ./node_modules/normalize.css/index.css */</span>
<span class="hljs-comment">/* contenu de ./node_modules/cssrecipes-defaults/index.css */</span>
<span class="hljs-comment">/* contenu de project-modules/partner.css */</span>
<span class="hljs-comment">/* contenu de typo.css */</span>
<span class="hljs-at_rule">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">25em</span>) </span>{
  <span class="hljs-comment">/* contenu de highlight.css */</span>
}
</code></pre>
<p>Je sais ce que vous ressentez. Ce n’est peut-être pas le coup de foudre au premier coup d’œil (enfin, pour certains comme moi si, mais bon, passons). Vous ne l’acceptez pas encore mais il va falloir vous rendre à l’évidence, un jour ou l’autre vous coderez comme ça. Mieux vaut vous y mettre tout de suite, non ? :)</p>
<p>Bref, pour résumer, disons simplement que le but principal de <strong>cssnext</strong> est de pouvoir développer selon les spécifications du W3C en gardant bien à l’esprit que, théoriquement, il sera possible de le supprimer plus tard (quand il ne sera plus utile).</p>
<p>En effet, dans un futur proche, les fonctionnalités qu’offre cet outil ne seront plus gérées par <strong>cssnext</strong> lui-même mais directement par les navigateurs. Laissons-les s’adapter, chacun à leur vitesse et préparons-nous. Voilà tout l’intérêt du code <em>future-proof</em>, comme le permet <a href="http://babeljs.io/" >babeljs</a> pour le JavaScript.</p>
<p>En attendant, il y a encore du boulot : voici une <a href="https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3A%22type%3A+feature+request%22" >liste des fonctionnalités à venir</a>.</p>
<p>Maintenant, à vous de jouer. N’oubliez pas d’aller faire un tour sur le <a href="https://github.com/cssnext/cssnext" >repo GitHub</a>, n’hésitez pas à suivre <a href="https://twitter.com/cssnext" >@cssnext</a> sur Twitter pour être au courant des dernières news et rejoignez la <a href="https://gitter.im/cssnext/cssnext" >room cssnext sur Gitter</a> si vous avez des questions.</p>
<ul>
<li><a href="http://cssnext.io/" >Site officiel</a></li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/css/introduction-a-cssnext/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/css/introduction-a-cssnext/</guid>
            <pubDate>Tue, 02 Jun 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introduction au déploiement continu]]></title>
            <description><![CDATA[<h1 id="deployer-en-continu">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/le-deploiement-continu/#deployer-en-continu">#</a>
      Déployer en continu ?
    </h1><p>Il s’agit d’avoir un site stable en production, ceci de manière automatisée et
continue. Rien que ça.</p>
<p>Il faut comprendre par là sans passer par FTP avec Filezilla.
Pas de bouton “Upload” ou “Sync” après avoir fait une modification de code.
Pas de risque de péter tout votre site si vos modifications rentrent en conflit
avec les modifications de votre collègue, qui lui aussi vient de pousser un
bon gros patch bien sale.</p>
<p>La première conséquence est que les mises en
production ne sont plus stressantes, car très régulières.<br><a href="http://www.estcequonmetenprodaujourdhui.info/" >Certaines personnes ne recommandent pas les mises en production tous les jours
</a> mais lorsque vous avez mis en
place l’intégration continue, vous minimisez grandement les risques.</p>
<p>La preuve en est que certaines entreprises font des mises en productions plusieurs
centaines de fois par jour ! (GitHub est un bon exemple).</p>
<h2 id="pre-requis-au-deploiement-continu">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/le-deploiement-continu/#pre-requis-au-deploiement-continu">#</a>
      Pré-requis au déploiement continu
    </h2><p>Vous n’avez qu’une chose à faire avant de vous attaquer à la mise en place du
déploiement continu : vous devez déjà avoir
<a href="/posts/ci/introduction/" >l’intégration continue</a> en place.</p>
<p>Une fois vous êtes bon à ce niveau, vous pouvez passer à l’étape suivante.</p>
<h2 id="faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/le-deploiement-continu/#faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">#</a>
      Faire un script qui fait les choses qui vont bien quand les tests vont bien
    </h2><p>Une fois qu’on a une commande qui peut jouer tous les tests et dire “y’a bon” ou
“tatoukassé”, il nous faut prévoir les actions à réaliser quand nos tests sont
OK.</p>
<p>Un déploiement FTP, un déploiement git, ou plus compliqué via CDN, peu importe.
<strong>Il faut juste une commande qui marche simplement.</strong></p>
<p>Pour notre site, la commande est <code>npm run deploy</code>. Cette commande pousse le site
généré sur la branche <code>gh-pages</code>
(puisqu’on se sert <a href="https://pages.github.com/" >des pages GitHub</a>).</p>
<h2 id="automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/le-deploiement-continu/#automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien">#</a>
      Automatiser le script qui fait les choses qui vont bien quand les tests vont bien
    </h2><p>On peut ensuite éventuellement englober les précédentes étapes dans une seule
commande qui va se débrouiller s’il n’y a pas d’erreur. Mais bon, si vous n’avez
que deux commandes (comme on a dans l’exemple de notre site), un simple appel de
cette façon devrait faire l’affaire :</p>
<pre><code class="lang-console">$ <span class="hljs-built_in">npm</span> test &amp;&amp; <span class="hljs-built_in">npm</span> run deploy
</code></pre>
<p>Si <code>npm test</code> retourne une erreur, la deuxième commande ne sera pas exécutée.</p>
<h2 id="la-suite-au-prochaine-episode">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/le-deploiement-continu/#la-suite-au-prochaine-episode">#</a>
      La suite au prochaine épisode
    </h2><p>La prochaine étape (dans un prochain article) sera de mettre ça en place sur un
serveur d’intégration continue, nous y étudierons simplement ce que nous avons
fait pour notre site.</p>
<p>Si vous êtes trop curieux, vous pouvez déjà <a href="https://github.com/putaindecode/putaindecode.fr" >consulter le code source de notre
site</a> et fouiller dans le
<code>package.json</code> (section <code>scripts</code>) pour deviner la suite…</p>
]]></description>
            <link>http://putaindecode.fr/posts/ci/le-deploiement-continu/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/ci/le-deploiement-continu/</guid>
            <pubDate>Mon, 25 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Qu'est-ce que l'intégration continue ?]]></title>
            <description><![CDATA[<p>Certains risquent d’être déçus puisque nous ne parlerons pas ici des fameux <code>3x8</code>,
technique qui consiste à faire tourner 3 équipes d’intégrateurs HTML en
continu afin d’avoir du PSD &gt; HTML 24h sur 24.</p>
<h2 id="le-principe-de-l-integration-continue">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#le-principe-de-l-integration-continue">#</a>
      Le principe de l’intégration continue
    </h2><blockquote>
<p>L’intégration continue est un ensemble de pratiques utilisées en génie
logiciel consistant à vérifier à chaque modification de code source que le
résultat des modifications ne produit pas de régression dans l’application
développée.</p>
</blockquote>
<p><small>
<a href="https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue" >Source: Wikipédia</a>
</small></p>
<h2 id="pre-requis-pour-mettre-en-place-l-integration-continue">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#pre-requis-pour-mettre-en-place-l-integration-continue">#</a>
      Pré-requis pour mettre en place l’intégration continue
    </h2><p>Avant de rentrer dans le vif du sujet, assurez-vous d’avoir déjà de bonne bases,
pour maintenir une base de code saine en
<a href="/posts/git/versionner-avec-git/" >versionnant avec git</a>.
Nous sommes en 2015, l’année où l’on était censé avoir les voitures
volantes, nous n’allons donc pas expliquer ici à quoi sert de versionner du
code.</p>
<p>Du code versionné ne suffit pas, il faut avoir des tests automatisés bien
entendu.
<a href="/posts/js/introduction-au-testing-js-front/" >Front</a> et back, il en faut de tous
les côtés.</p>
<p>Ensuite, il nous faudra choisir un serveur qui va gérer l’intégration continue.
Il existe des services tels que:</p>
<ul>
<li><a href="http://travis-ci.org/" >Travis</a></li>
<li><a href="https://circleci.com/" >CircleCI</a></li>
<li><a href="https://www.atlassian.com/software/bamboo/" >Bamboo</a></li>
<li><a href="https://codeship.com/" >Codeship</a></li>
<li><a href="http://jenkins-ci.org/" >Jenkins</a></li>
</ul>
<h2 id="l-integration-continue-en-pratique">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#l-integration-continue-en-pratique">#</a>
      L’intégration continue en pratique
    </h2><p>Un fois qu’on a notre code testé et versionné et qu’on a configuré son serveur
de <em>CI</em>, chaque modification va déclencher des actions sur ce serveur, puis,
en fonction des résultats, va déclencher d’autres actions tout en vous notifiant
si besoin.</p>
<p>Un exemple classique serait le suivant : une fois les dernières modifications de
code poussées sur la branche principale sur votre dépôt de code, le serveur
d’intégration continue va jouer tous les tests et déployer le tout en production si
tout a marché sur des roulettes.</p>
<p>Si des problèmes surviennent, rien ne sera déployé et vous serez notifié sur
les services que vous avez configurés (email, IRC, webhook, etc).</p>
<p>Nous pouvons imaginer que votre serveur vienne vous insulter sur
votre logiciel de chat interne, en vous montrant du doigt.
On pourrait aussi imaginer une synthèse vocale crier votre nom et préciser à
toute l’équipe que
<a href="https://www.youtube.com/watch?v=mbDcnUH6rOc" >vous avez merté</a> :
<em>“MoOx, you just fucked up the build by breaking 42 tests!
Fix that please”</em>.
Pour finir dans les exemples farfelus, nous pourrions avoir une petite tourelle
type <em>Nerf</em> qui vous met un petit headshot qui va bien.
Des équipes font vraiment ça, et vous vous en doutez, y’a de la grosse marrade au
programme.</p>
<p>L’idée est vraiment de pousser le plus souvent possible, les plus petites
modifications possibles avec la meilleure couverture de tests possible.
Ceci afin de minimiser les risques. De plus, cela aide à rester focalisé.</p>
<p>Tout ce processus (versionné aussi tant qu’à faire), qui permet de jouer tous
les tests <strong>rapidement</strong> (dans un environnement similaire à la production), doit
être transparent et accessible localement, afin que les développeurs aient une
bonne visibilité et une bonne compréhension du système en place.</p>
<h2 id="faire-des-tests-automatises-c-est-la-vie">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#faire-des-tests-automatises-c-est-la-vie">#</a>
      Faire des tests automatisés, c’est la vie
    </h2><p>J’ai mis un titre pour ça car c’est important. Vraiment.
Tout développeur qui n’a pas encore écrit ses premiers tests a peur.
Puis avec le temps, il se dit que finalement, il ne fallait pas
avoir autant d’appréhension et qu’il était très con de ne pas avoir
testé automatiquement tout ses codes sources plus tôt.
À tel point qu’une
<a href="http://the--kyza.deviantart.com/art/What-the-Flux-511691704" >DeLorean modifiée</a>
pour se prévenir soi-même ne serait pas de refus.</p>
<p>Une fois la barrière franchie, on se dit vraiment qu’on était stupide de pas
avoir essayé avant.</p>
<h2 id="une-commande-qui-execute-les-tests">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#une-commande-qui-execute-les-tests">#</a>
      Une commande qui éxecute les tests
    </h2><p>Un fois qu’on a écrit des tests, ou même souvent avant, on automatise
l’exécution des tests. En général c’est rapide, étant donné qu’une simple
commande ou un simple script suffit.
Beaucoup de <em>test runners</em> existent et vous n’aurez aucune difficulté à en
trouver un en adéquation avec votre language favori.</p>
<p>Pour notre site, la commande est <code>npm test</code>. Simple, efficace.</p>
<p>Elle exécute tout ce qui est nécessaire à compiler notre application et à jouer
les tests tout en retournant un résultat lisible et un code d’erreur si besoin.</p>
<h2 id="et-apres">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/ci/introduction/#et-apres">#</a>
      Et après ?
    </h2><p>Là, si vous avez déjà mis tout ça en place, le bonheur ultime du développeur
n’est pas loin : vous pouvez rapidement vérifier qu’il n’y a pas de régressions
et agir en conséquence.</p>
<p>Chez <em>Putain de code !</em> (en date de cet article), notre couverture de
tests est loin d’être bonne. Mais ce site étant un petit plaisir un peu risqué,
nous faisons quand même du
<a href="/posts/ci/le-deploiement-continu" >déploiement continu</a>, l’étape d’après !<br>On aime bien l’idée du <em><a href="http://zachholman.com/talk/move-fast-break-nothing" >move fast &amp; break <del>no</del>thing
</a></em>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/ci/introduction/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/ci/introduction/</guid>
            <pubDate>Thu, 21 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comment déboguer facilement du web y compris sur tablettes et téléphones]]></title>
            <description><![CDATA[<p>Vous souhaitez déboguer votre site ou application web mais vous ne savez pas trop comment faire ? Bon. Je sais que vous savez mais je peux peut-être vous faciliter la tâche.</p>
<p>Commençons par le plus simple.</p>
<h2 id="un-navigateur-un-inspecteur">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#un-navigateur-un-inspecteur">#</a>
      Un navigateur, un inspecteur
    </h2><p>Si vous ne voulez pas vous prendre la tête, la solution la plus simple reste d’utiliser l’inspecteur fourni par votre navigateur pour analyser vos pages web. Fini les add-ons à installer (comme Firebug), chaque navigateur récent a maintenant son propre inspecteur, même Internet Explorer.</p>
<p>Ça, c’est la partie que vous devez sûrement déjà savoir. Par contre, quid du mobile ?</p>
<h3 id="oui-quid-du-mobile">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#oui-quid-du-mobile">#</a>
      Oui, quid du mobile ?
    </h3><p>C’est justement principalement ce qui m’intéresse ici.</p>
<p>Pour ce qui est du mobile, je vous propose de commencer par brancher votre téléphone ou tablette sur votre poste en USB puis de lancer deux navigateurs. Mais pas n’importe lesquels. Les mêmes navigateurs sur desktop et sur mobile. Par exemple, si vous voulez déboguer Safari sur iOS, alors lancez Safari sur votre Mac. Si vous voulez déboguer Chrome sur Android, alors lancez Chrome sur votre desktop. Ce n’est vraiment plus aussi compliqué qu’auparavant où il était nécessaire d’installer des applications en ligne de commande (comme <a href="https://developer.android.com/tools/help/adb.html" >adb</a> par exemple) avant de pouvoir rendre la connexion possible. Maintenant, les navigateurs incorporent directement de quoi se connecter aux mobiles.</p>
<p>Une connexion se fera entre les deux navigateurs (mobile et desktop) et vous permettra de voir ce qu’il se passe sur votre mobile en regardant la fenêtre de devtools sur votre desktop. Quelques précisions pour chacun des navigateurs :</p>
<ul>
<li>Chrome : lancez l’URL <code>chrome://inspect</code></li>
<li>Safari : allez dans <code>develop</code> puis vous verrez vos appareils connectés et les URL lancées sur vos appareils</li>
</ul>
<p>Pas mal non ?</p>
<p>Mais nous pouvons aller encore plus loin grâce à Firefox qui va nous faciliter la tâche. En effet, celui-ci est capable de déboguer n’importe quel navigateur via WebIDE et son <em>adapter</em> <a href="https://developer.mozilla.org/en-US/docs/Tools/Valence" >Valence</a>.</p>
<h2 id="allez-firefox-webide">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#allez-firefox-webide">#</a>
      Allez, Firefox WebIDE !
    </h2><p>Au départ ce projet avait pour but de déboguer Firefox OS mais grâce au projet <a href="https://developer.mozilla.org/en-US/docs/Tools/Valence" >Valence</a>, WebIDE permet maintenant aussi de se connecter à d’autres navigateurs comme iOS Safari ou Desktop Chrome (n’importe en fait) et de pouvoir déboguer dans les devtools de Firefox. Ça, c’est cool.</p>
<p>Pour activer WebIDE sur votre Firefox, ouvrez un onglet et rentrez comme URL<br /><code>about:config?filter=devtools.webide.enabled</code><br />
puis mettre l’option à <code>true</code>.</p>
<p>Allez après dans devtools, “settings” (l’engrenage) et activez :</p>
<ul>
<li><code>Enable browser chrome and add-on debugging toolboxes</code></li>
<li><code>Enable remote debugging</code></li>
</ul>
<p>puis redémarrez.</p>
<p>Vous devriez avoir “WebIDE” de disponible mais aussi “Browser Toolbox” qui est un debugger pour inspecter l’application Firefox en elle-même. Pratique pour faire des thèmes !</p>
<p>Une fois WebIDE lancé, allez dans <code>Select runtime</code> puis <code>Install Simulator</code> et installez <code>ADB Helper Add-on</code> ainsi que <code>Tools Adapters Add-on</code>.</p>
<p>Vous êtes bon(ne) pour pouvoir déboguer. Plus qu’à brancher votre appareil, allez dans <code>Select runtime</code> et le voir dans la section <code>USB Devices</code>.</p>
<p>N’hésitez pas à vous référer à la <a href="https://developer.mozilla.org/en-US/docs/Tools/WebIDE" >documentation officielle</a> pour de plus amples informations.</p>
<p>Un petit hic tout de même. Cela reste une beta (à mon sens), de ce fait la connexion est un peu instable. Il est parfois difficile de se connecter à un appareil. Pour cela, débranchez votre téléphone puis rebranchez-le, et redémarrez Firefox puis relancez WebIDE, cela devrait être bon.</p>
<p>Mis à part ceci, c’est top.</p>
<blockquote>
<p>Oui mais moi je dois déboguer Android Browser, ça marche tout ça ?</p>
</blockquote>
<p>Biiiien, non. J’avoue tout. Aucune des solutions que je viens de vous donner ne fonctionne sur Android Browser.</p>
<blockquote>
<p>Euh… Quoi ?!</p>
</blockquote>
<p>Oui oui, je comprends que vous soyez étonné(e). Moi aussi, je suis dépité à chaque fois que je dois développer dessus. Ce navigateur est une belle merde. Il ne se met à jour que quand votre OS s’y met. Il est le navigateur par défaut et le moteur des webviews sur de nombreux (anciens (!|?)) Android. À vrai dire, je ne comprends même pas comment ce navigateur a pu exister sauf pour dire “Hey, vous avez vu, on ne vous a pas imposé Chrome, contrairement à Microsoft avec IE”. Ils auraient p’tête dû finalement.</p>
<p>Bref. Rassurez-vous, j’ai des solutions.</p>
<p>Je pourrais vous parler du format en <strong>CLI</strong> mais je ne pense pas que cela vous intéresserait. Et vu qu’on ne peut pas inspecter le DOM, juste voir la console, ce n’est vraiment pas plaisant pour déboguer.</p>
<p>Je pourrais aussi vous parler de la solution du <code>about:debug</code> mais c’est chiant (mais ça dépanne). Cela permet d’afficher une console JS dans le navigateur du mobile. Je vais plutôt vous parler ici d’un inspecteur écrit en page web qui se branche partout, un peu comme un Firebug lite. Son petit nom ? <a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" >weinre</a>.</p>
<h2 id="weinre">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#weinre">#</a>
      weinre
    </h2><p>… est une solution plus trop récente mais qui a le mérite de fonctionner partout, facilement et surtout sur Android browser. Celui-ci va créer une page web avec un webkit-debugger-like, qui lui est connecté via un websocket sur le site que vous êtes en train de déboguer, vous permettant à la fois d’avoir une console mais aussi une inspection du DOM. Et ça, c’est vraiment chouette.</p>
<p><img src="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/weinre-console.png" alt=""></p>
<p>Passons à son installation.</p>
<h3 id="installation">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#installation">#</a>
      Installation
    </h3><pre><code class="lang-console">$ (sudo) npm -g <span class="hljs-keyword">install</span> weinre
</code></pre>
<h3 id="utilisation">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#utilisation">#</a>
      Utilisation
    </h3><p>Lancez d’abord le process :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>weinre
</code></pre>
<p>Ajoutez le script dans votre page qui communiquera avec votre serveur (exemple) :</p>
<pre><code class="lang-javascript">&lt;script src=<span class="hljs-string">"http://localhost:8080/target/target-script-min.js#anonymous"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span></span>
</code></pre>
<p>Puis ouvrez la page <code>http://localhost:8080</code>, vous devriez avoir quelque chose comme ceci :</p>
<p><img src="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/weinre-interface.png" alt=""></p>
<p>Plus qu’à cliquer sur <code>http://localhost:8080/client/#anonymous</code> et vous arriverez sur l’interface du debugger.</p>
<p>Attention par contre. Ayant eu des problématiques de temps de connexion au websocket, j’ai dû rajouter un <code>setTimeout</code> avant de lancer mon JavaScript afin que la connexion entre la page web et le serveur se fasse pour bien afficher la totalité des <code>console.log</code> et autres. Sans ça, j’ai vu le début de mon app ne pas être inspectée, dommage.</p>
<p>Pour le moment j’ai réglé ce problème en mettant un <code>setTimout</code> de 2000ms sur l’exécution de mon code car il n’y a actuellement pas de moyens de savoir si la connexion au websocket s’est faite ou non.</p>
<p>Sachez cependant que le projet n’est plus trop maintenu mais que le principal <em>maintainer</em> est encore à l’écoute et recevra volontiers vos améliorations.</p>
<p>Il existe deux alternatives à weinre :</p>
<ul>
<li><a href="http://jsconsole.com/remote-debugging.html" >jsconsole</a> (que je n’ai pas testé)</li>
<li><a href="http://vorlonjs.com/" >Vorlon.js</a> : très sympa, très prometteur, plus propre que weinre. Seul hic, j’ai voulu tester Vorlon.js sur Android Browser (Android 4.3), il a fait planter Android Browser rendant impossible le debug. Dommage, j’aurais bien remplacé weinre par celui-ci.</li>
</ul>
<hr>
<p>Bien. On a fait le tour des solutions pour inspecter facilement le DOM ainsi qu’avoir une console sur n’importe quel navigateur.</p>
<p>Ce qui serait intéressant maintenant, c’est d’analyser les trames HTTP de n’importe quel appareil.</p>
<h2 id="comment-analyser-le-flux-http">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#comment-analyser-le-flux-http">#</a>
      Comment analyser le flux HTTP
    </h2><p>Pour cette tâche, je vous propose d’installer l’outil <a href="http://mitmproxy.org/" >mitmproxy</a> qui vous permettra de créer un proxy récupérant tout votre trafic HTTP et de vous l’afficher requête par requête.</p>
<p>Ce qui va sûrement vous intéresser sera la partie <a href="http://mitmproxy.org/doc/transparent.html" >transparent proxying</a>. Le proxy se chargera juste d’écouter votre trafic et de l’afficher.</p>
<p>Il sera nécessaire aussi de configurer votre navigateur afin que celui-ci se connecte à votre proxy.</p>
<p>Si vous êtes sur Android, il vous est nécessaire de le spécifier dans la configuration réseau de votre appareil. Pour cela :</p>
<ul>
<li>Connectez-vous au WiFi (du même réseau que votre hôte) (par exemple “MoOx”)</li>
<li>Allez dans “Settings”, “Wi-Fi”</li>
<li>Restez appuyé sur le nom du WiFi (toujours “MoOx”)</li>
<li>Une popin apparaîtra, cliquez sur “Modify network”</li>
<li>Cochez “Show advanced options”</li>
<li>“Proxy settings”, mettez <code>manual</code></li>
<li>Entrez les informations de mitmproxy pour vous y connecter</li>
<li>Validez</li>
</ul>
<p>Tout passera maintenant par lui et vous aurez dans votre shell une belle interface montrant toutes les trames passant.</p>
<p><img src="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/mitmproxy.png" alt=""></p>
<h2 id="note">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/#note">#</a>
      Note
    </h2><p>Une petite note rapide. Pour utliser le Simulator iOS (si vous n’avez pas d’iPhone/iPad sous la main par exemple) il est possible que vous deviez installer <a href="https://github.com/google/ios-webkit-debug-proxy" >iOS Webkit Debug Proxy</a>. Je n’ai pas eu à le faire mais <a href="https://twitter.com/tfeserver" >@tfeserver</a> en a eu besoin. Je vous laisse ça de côté si par hasard cela vous était nécessaire.</p>
<hr>
<p>Avec ça, vous pouvez maintenant masteriser le debug sur tous les appareils sans vous prendre la tête. Il existe aussi une solution s’appelant <a href="http://www.browsersync.io/" >BrowserSync</a> permettant à la fois le debug et la synchro des comportements sur les différents devices mais ça, ce sera peut-être pour un prochain post.</p>
<p>Bon débug.</p>
]]></description>
            <link>http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/</guid>
            <pubDate>Tue, 19 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Les utilitaires en ligne de commande]]></title>
            <description><![CDATA[<p>Avoir accès à ses utilitaires en ligne de commande (<a href="https://en.wikipedia.org/wiki/Command-line_interface" >CLI</a>) est un quotidien dans nos métiers et un avantage indéniable. Ce n’est pas nouveau et cela existe depuis la nuit des temps. Tout utilisateur
d’Unix voue un culte particulier à son terminal.</p>
<p>J’ai récemment eu à développer un utilitaire en Node.js/iojs, j’ai donc voulu avec cet article déblayer un peu le terrain
et présenter quelques utilitaires très pratiques.</p>
<p>Deux postulats avant de commencer :</p>
<ul>
<li>Pourquoi JavaScript ? En cohérence avec le workflow que j’utilise.</li>
<li>Cet article n’a pas pour but d’apprendre à écrire du JavaScript avec Node.js/iojs.</li>
</ul>
<h2 id="hello-world">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#hello-world">#</a>
      Hello world
    </h2><p>Avant de commencer à coder, il va tout d’abord falloir créer deux fichiers qui seront nécessaires et obligatoires :</p>
<pre><code class="lang-console"><span class="hljs-comment">// création du dossier</span>
$ <span class="hljs-keyword">mkdir</span> putaindecode-<span class="hljs-keyword">cli</span> &amp;&amp; <span class="hljs-keyword">cd</span> putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// création de index.js</span>
$ touch index.js

<span class="hljs-comment">// création de package.json</span>
$ touch package.json
</code></pre>
<p>Le fichier <code>index.js</code> va se présenter comme ceci :</p>
<pre><code><span class="hljs-shebang">#!/usr/bin/env node</span>
<span class="hljs-comment">// Cette ligne ou shebang permet de définir l'interpréteur de notre script, à savoir `node`</span>

<span class="hljs-comment">// notre fameux hello world</span>
console.log(<span class="hljs-string">"Hello world"</span>)
</code></pre><p>Pour notre fichier <code>package.json</code>, deux méthodes possibles pour l’écrire, soit en faisant <code>npm init</code> puis suivre les instructions, soit adapter ce JSON :</p>
<pre><code class="lang-console">{
  "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"putaindecode-cli"</span></span>,
  "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.1.0"</span></span>,
  "<span class="hljs-attribute">description</span>": <span class="hljs-value"><span class="hljs-string">"Putaindecode cli"</span></span>,
  "<span class="hljs-attribute">keywords</span>": <span class="hljs-value">[
    <span class="hljs-string">"cli"</span>,
    <span class="hljs-string">"npm"</span>
  ]</span>,
  "<span class="hljs-attribute">author</span>": <span class="hljs-value"><span class="hljs-string">"magsout"</span></span>,
  "<span class="hljs-attribute">license</span>": <span class="hljs-value"><span class="hljs-string">"MIT"</span></span>,
  "<span class="hljs-attribute">repository</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"git"</span></span>,
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode/putaindecode-cli.git"</span>
  </span>}</span>,
  "<span class="hljs-attribute">engines</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">node</span>": <span class="hljs-value"><span class="hljs-string">"&gt;=0.10"</span>
  </span>}</span>,
  "<span class="hljs-attribute">homepage</span>":<span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli"</span>
  <span class="hljs-string">"bugs"</span>: {
    "<span class="hljs-attribute">url</span>": <span class="hljs-value"><span class="hljs-string">"https://github.com/putaindecode-cs/putaindecode-cli/issues"</span>
  </span>}</span>,
  "<span class="hljs-attribute">files</span>": <span class="hljs-value">[
    <span class="hljs-string">"index.js"</span>
  ]</span>,
  "<span class="hljs-attribute">dependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">devDependencies</span>": <span class="hljs-value">{}</span>,
  "<span class="hljs-attribute">bin</span>": <span class="hljs-value">{
    "<span class="hljs-attribute">putaindecode</span>": <span class="hljs-value"><span class="hljs-string">"index.js"</span>
  </span>}
</span>}
</code></pre>
<p>La ligne importante à ne surtout pas oublier :</p>
<pre><code class="lang-console"><span class="hljs-string">"bin"</span>: {
  <span class="hljs-string">"putaindecode-cli"</span>: <span class="hljs-string">"index.js"</span>
}
</code></pre>
<p>Elle permettra de déterminer le script à exécuter lorsque la commande <code>putaindecode-cli</code> sera lancée.</p>
<p>Si on vulgarise un peu le principe, en installant le script, le fichier <code>index.js</code> sera renommé en <code>putaindecode-cli.js</code> et sera copié dans le répertoire adéquat (cela dépend de l’OS).</p>
<p>Lorsque la commande <code>putaindecode-cli</code> sera exécutée, le shell va chercher le fichier exécutable en utilisant les répertoires listés dans la variable PATH.</p>
<p>Si on suit ce raisonnement, l’installation d’un script écrasera automatiquement l’ancienne version ou tout script de même nom.</p>
<p>Pour s’assurer qu’il n’existe pas d’autres commandes portant le même nom, il est conseillé d’utiliser la commande : <code>which putaindecode-cli</code> qui ne retournera rien s’il n’y a aucun résultat :</p>
<pre><code class="lang-console">#putaindecode-<span class="hljs-keyword">cli</span> ne retourne aucun résultat
$ <span class="hljs-keyword">which</span> putaindecode-<span class="hljs-keyword">cli</span>

#node <span class="hljs-keyword">est</span> installé et accessible au path suivant
$ <span class="hljs-keyword">which</span> node
  /usr/<span class="hljs-keyword">local</span>/bin/node
</code></pre>
<h2 id="installation-du-script">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#installation-du-script">#</a>
      Installation du script
    </h2><p>Afin de vérifier que le script fonctionne correctement, il suffit tout simplement d’exécuter dans le répertoire la commande : <code>./index.js</code>.</p>
<p>Une erreur de droit ? Un petit chmod pour arranger ça : <code>chmod +x index.js</code>.</p>
<p>À ce stade, si tout fonctionne bien, <code>Hello World</code> va s’afficher.</p>
<p>Par contre, exécuter notre script de la sorte n’est pas très pratique, d’autant plus qu’il sera nécessaire de connaître à chaque fois le chemin vers le fichier.</p>
<p>Il serait beaucoup plus simple de pouvoir exécuter le script comme une commande. Comme pour tout package npm, cela se fait avec <code>npm install</code>.</p>
<pre><code class="lang-console"><span class="hljs-comment">// installation en global du script</span>
$ npm install -<span class="hljs-keyword">g</span>

<span class="hljs-comment">// exécution de la commande</span>
$ putaindecode-<span class="hljs-keyword">cli</span>

<span class="hljs-comment">// résultat de la commande</span>
Hello world
</code></pre>
<p>Le script est maintenant accessible partout sur l’OS grâce à la commande <code>putaindecode-cli</code>. L’installation en global n’est pas absolument pas nécessaire, tout dépend de l’intérêt de votre script. Il est d’ailleurs souvent préférable de l’installer en local dans un projet avec <code>--save</code> ou <code>--save-dev</code>.</p>
<h2 id="installation-des-scripts-de-base">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#installation-des-scripts-de-base">#</a>
      Installation des scripts de base
    </h2><p>La puissance de <code>NPM</code> provient de son nombre impressionnant de packages mis à disposition.</p>
<p>Pour gagner du temps et éviter d’avoir à recoder la roue. Le script <code>putaindecode-cli</code> va avoir besoin de trois choses :</p>
<ul>
<li>une gestion des commandes (commande, argument, aide)</li>
<li>une gestion des couleurs (notice, error, warning)</li>
<li>une capacité à stopper proprement notre code.</li>
</ul>
<h3 id="commander">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#commander">#</a>
      <code>commander</code>
    </h3><p>Pour les commandes avec en prime la gestion des arguments et de l’aide, <a href="https://github.com/tj/commander" >commander</a> est tout a fait adapté et répondra pratiquement à tous nos besoins.</p>
<p>Il est simple d’utilisation et très bien maintenu.</p>
<p>Voici un exemple de ce qu’on peut faire :</p>
<pre><code class="lang-js"><span class="hljs-comment">/* Default */</span>
program
  .version(pkg.version)

<span class="hljs-comment">/* command */</span>
program
  .command(<span class="hljs-string">"command"</span>)
  .alias(<span class="hljs-string">'c'</span>)
  .description(<span class="hljs-string">"   command does something"</span>)
  .option(<span class="hljs-string">"-v, --verbose"</span>, <span class="hljs-string">"Verbose"</span>)
  .option(<span class="hljs-string">"-f, --force"</span>, <span class="hljs-string">"Force installation"</span>)
  .action(commandAction)
  .on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Example:"</span>)
    <span class="hljs-built_in">console</span>.log();
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command does something"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  });

<span class="hljs-comment">/* help */</span>
program.on(<span class="hljs-string">"--help"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"  Examples:"</span>)
  <span class="hljs-built_in">console</span>.log();
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     command do something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     Force command does something"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"     $ putaindecode-cli command -f"</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">""</span>)
});

program.parse(process.argv)

<span class="hljs-comment">/* help by default */</span>
<span class="hljs-keyword">if</span> (!program.args.length) program.help()
</code></pre>
<h3 id="chalk">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#chalk">#</a>
      <code>chalk</code>
    </h3><p><em>Null</em> besoin de faire un cours sur les couleurs, mais l’affichage d’une notice est bien plus pertinent avec sa couleur associée. C’est à ce moment qu’entre en jeu <a href="https://github.com/sindresorhus/chalk" >chalk</a>. Relativement simple à mettre en place et à utiliser :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">'chalk'</span>)

<span class="hljs-comment">/* var */</span>
<span class="hljs-keyword">var</span> error   = chalk.bold.red
<span class="hljs-keyword">var</span> warn    = chalk.yellow
<span class="hljs-keyword">var</span> success = chalk.green
<span class="hljs-keyword">var</span> notice  = chalk.blue

<span class="hljs-comment">/* code */</span>
<span class="hljs-built_in">console</span>.log(warn(<span class="hljs-string">'No command'</span>))
<span class="hljs-built_in">console</span>.log(notice(<span class="hljs-string">"file modified !"</span>))
</code></pre>
<h3 id="exit">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#exit">#</a>
      <code>exit</code>
    </h3><p>Peu importe comment s’exécute son code, il est important de bien savoir maitriser l’arrêt de son script. Pour ça, <code>process.exit()</code> nous sera bien utile.</p>
<p>Dans le cas d’une erreur, la valeur de <code>exit</code> doit systématiquement être supérieure à 0, et donc bien naturellement en cas de succès, elle doit être égale à 0.</p>
<p>Voici une <a href="http://www.virtsync.com/c-error-codes-include-errno" >liste des valeurs</a> de <code>exit</code> et de leurs correspondances.</p>
<h2 id="thanks-god-for-our-terminal">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/#thanks-god-for-our-terminal">#</a>
      Thanks god for our terminal
    </h2><p>Si vous souhaitez voir quelques exemples de projets avec des commandes et des mises en situations intéressantes, allez faire un tour sur ces projets :</p>
<ul>
<li><a href="https://github.com/cssnext/cssnext/blob/master/bin/cssnext.js" >cssnext</a></li>
<li><a href="https://github.com/sindresorhus/trash/blob/master/cli.js" >trash</a></li>
</ul>
<p>Je vous invite également à visionner la <a href="http://blog.clement.delafargue.name/posts/2015-02-25-declarative-cli-parsing-in-js.html" >vidéo</a> de <a href="https://twitter.com/clementd" >Clement Delafargue</a> qui a fait une présentation sur le sujet en début d’année.</p>
<p>À partir de là on dispose d’une bonne base pour refaire le monde et accroître la flemme du développeur que l’on est en automatisant tout plein de tâches.</p>
]]></description>
            <link>http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/shell/utilitaires-ligne-commande/</guid>
            <pubDate>Tue, 12 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Utiliser React en moteur de templates]]></title>
            <description><![CDATA[<p>Vous connaissez probablement tous des moteurs de templates.
En JavaScript nous avons Handlebars, Jade, EJS, Slim…
Tous ces projets partent de bonnes intentions mais à l’utilisation,
on peut sentir des limitations et donc de l’insatisfaction.</p>
<p>Utiliser Handlebars par exemple, c’est un peu devoir coder tout un tas de helpers
pour gérer une partie de votre affichage, ça peut vite devenir lourd.
Être restreint à une syntaxe limitée par choix est un peu frustrant.
Quand c’est pas ça, c’est la syntaxe du moteur qui va être lourde.</p>
<p>On peut en venir à regretter PHP. Faut avouer que ce langage était plutôt simple
à utiliser en tant que moteur de template.
Efficace et pas de restrictions. On trouve même parfois des <code>mysql_query()</code>
dans des templates…</p>
<p>Blague à part, nous cherchions des langages pour refaire une partie de notre site
puisque nous n’étions pas vraiment satisfaits du processus actuel
(anciennement Handlebars, puis Jade).</p>
<p>Mais finalement, pourquoi ne pas rester avec du JavaScript, purement et simplement ?</p>
<p>C’est ce que nous avons fait avec React et JSX qui sont de plus en plus utilisés.
La syntaxe est plutôt libératrice.</p>
<p>Pour ceux qui ne connaissent pas JSX, il s’agit d’un superset de JavaScript qui
supporte une syntaxe XML transformé en appel de fonctions JavaScript.
Il faut dire que le XML a beau être verbeux, pour définir des
éléments ayant des propriétés et des enfants, on a pas vraiment fait plus
lisible et clair sur ce point. Le HTML est plutôt simple à prendre en main c’est
certain. Les méthodes de rendu de React (ce qui va nous intéresser) sont très proches
de l’HTML.</p>
<p>Ceux qui ont utilisé JSX (bien qu’ayant pu avoir des nausées au premier contact)
avouent souvent qu’ils ont fini par aimer cette petite syntaxe créée par Facebook qui
fonctionne très bien avec React.</p>
<p>Du coup, si on utilisait ça pour faire de simple templates et non pas des composants
d’interface utilisateur dynamiques ? Qui peut le plus peut le moins (quoi qu’en
fait, des templates, c’est un peu des composants d’interface).</p>
<h2 id="exemple-de-template-react-jsx">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/#exemple-de-template-react-jsx">#</a>
      Exemple de template React/JSX
    </h2><p>Si vous ne savez pas trop ce qu’est React, nous vous recommandons de lire
notre <a href="/posts/js/introduction-a-reactjs/" >introduction à React</a>.</p>
<p>Dans notre cas, on ne va pas spécialement bénéficier de certaines de ses forces,
mais ça fera très bien le job pour notre besoin.</p>
<p>Nous n’aborderons pas dans le détail la syntaxe React/JSX, ni ES6, pour rester
focalisés sur la finalité (on a prévu des articles à ce propos, en attendant
  <a href="http://babeljs.io/docs/learn-es6/" >voici de quoi vous occuper avec ES6</a>).</p>
<p><em>Attention, pour ceux qui sont encore sur des plugins jQuery, ça risque de vous
piquer les yeux</em> 😭.</p>
<p><a name="es6-class"></a></p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

export default class PostTemplate extends Component {

  render() {
    return (
      &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;{this.props.pageTitle}&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;article className=<span class="hljs-string">"org-Post"</span>&gt;
            &lt;header className=<span class="hljs-string">"org-Post-header"</span>&gt;
              &lt;h1&gt;{this.props.pageTitle}&lt;/h1&gt;
            &lt;/header&gt;
            &lt;div
              className=<span class="hljs-string">"org-Post-content"</span>
              dangerouslySetInnerHTML={{__html: this.props.pageContent}}
            /&gt;
          &lt;/article&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    )
  }
}
</code></pre>
<p>Ce que vous voyez c’est bien du JavaScript. Un peu amélioré via JSX, on ne va
pas le nier (dans notre cas, on gère tout ça de manière transparente avec
<a href="http://babeljs.io/" >babel(-node)</a>).</p>
<p>Ça ressemble drôlement à de l’HTML et c’est ça qui est appréciable pour nous.
Vous noterez que l’attribut pour définir une classe HTML est <code>className</code> puisque
React est en JavaScript et que le mot <code>class</code> est réservé
(cf. <a href="http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/#es6-class" >la définition en ES6 de la classe</a>).</p>
<p>En même temps ce qui est cool, c’est qu’on reste dans du JavaScript.</p>
<p>On peut donc utiliser toutes nos bibliothèques préférées via <em>npm</em> pour l’affichage
(exemple : <code>momentjs</code>), ou simplement des boucles via les méthodes de parcours de
tableau tel que <code>forEach()</code> ou <code>map()</code> en appelant d’autres composants.</p>
<p>Ci-dessous vous trouverez un exemple plus complexe avec une page pour la liste
des posts et quelques composants.
Les balises qui ressemblent à du HTML et qui commencent par une majuscule sont liées à des
composants qui doivent être définis (dans notre cas importés).
C’est une particularité de React.</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">import</span> Html <span class="hljs-keyword">from</span> <span class="hljs-string">"../Html"</span>
<span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">"../Head"</span>
<span class="hljs-keyword">import</span> Body <span class="hljs-keyword">from</span> <span class="hljs-string">"../Body"</span>
<span class="hljs-keyword">import</span> PostsList <span class="hljs-keyword">from</span> <span class="hljs-string">"../PostsList"</span>

export default class Posts extends Component {

  render() {
    return (
      &lt;Html&gt;
        &lt;Head title={this.props.file.title} /&gt;
        &lt;Body&gt;
          &lt;h1&gt;{this.props.file.title}&lt;/h1&gt;
          &lt;PostsList
            posts={
              this.props.collections.posts
                .filter((item) =&gt; {
                  /*
                    ce que vous voulez pour filtrer votre collection
                    eg:
                    return !item.draft
                  */
                }
              }
          /&gt;
        &lt;/Body&gt;
      &lt;/Html&gt;
    )
  }
}
</code></pre>
<p>Voici deux exemples de composants utilisés ci-dessus :</p>
<h3 id="head">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/#head">#</a>
      Head
    </h3><pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

export default class Head extends Component {

  render() {
    return (
      &lt;head&gt;
        &lt;meta charSet=<span class="hljs-string">"utf-8"</span> /&gt;
        &lt;meta httpEquiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"IE=Edge"</span> /&gt;
        &lt;meta
          name=<span class="hljs-string">"viewport"</span>
          content=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>
        /&gt;
        &lt;title&gt;{this.props.title}&lt;/title&gt;
        &lt;link
          rel=<span class="hljs-string">"stylesheet"</span>
          href=<span class="hljs-string">"/index.css"</span>
        /&gt;
        &lt;link
          rel=<span class="hljs-string">"alternate"</span>
          href=<span class="hljs-string">"/feed.xml"</span>
          title={this.props.title}
          type=<span class="hljs-string">"application/atom+xml"</span>
        /&gt;
        {this.props.children}
      &lt;/head&gt;
    )
  }
}
</code></pre>
<h3 id="body">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/#body">#</a>
      Body
    </h3><pre><code class="lang-js"><span class="hljs-keyword">import</span> React, {Component, PropTypes} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">"../Header"</span>
<span class="hljs-keyword">import</span> Footer <span class="hljs-keyword">from</span> <span class="hljs-string">"../Footer"</span>
<span class="hljs-keyword">import</span> GoogleAnalytics <span class="hljs-keyword">from</span> <span class="hljs-string">"../Analytics"</span>

export default class Body extends Component {

  render() {
    return (
      &lt;body&gt;

        &lt;Header /&gt;

        &lt;div className=<span class="hljs-string">"Main"</span>&gt;
          {this.props.children}
        &lt;/div&gt;

        &lt;Footer /&gt;

        &lt;script src={<span class="hljs-string">"/index.js"</span>}&gt;&lt;/script&gt;

        &lt;GoogleAnalytics /&gt;

      &lt;/body&gt;
    )
  }
}
</code></pre>
<p>Bon c’est bien beau mais comment je gère l’affichage du composant initial
finalement (le parent) ?</p>
<h2 id="comment-utiliser-un-template-react-jsx">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/#comment-utiliser-un-template-react-jsx">#</a>
      Comment utiliser un template React/JSX ?
    </h2><p>C’est bien simple. Dans notre cas, pas besoin de React côté client. On doit gérer
ça côté « serveur » (je mets ça entre guillemets puisque dans notre cas précis, c’est
pour générer un site statique, et c’est donc sur une machine quelconque que la
génération se fait).</p>
<p>Voilà de quoi effectuer le rendu de nos composants vers du bon vieux HTML (car c’est la finalité
d’un <em>moteur de template</em>).</p>
<pre><code class="lang-js">import react from &quot;react&quot;
import markdownify from &quot;./markdown-parser&quot;
// je vous conseille marked pour rendre du markdown
// c&#39;est ce que nous utilisons pour rendre nos pages à l&#39;heure où j&#39;écris ce post

const reactClass = require(&quot;./template/PostTemplate&quot;)
const component = new (react.createFactory(reactClass))({
  // ici on passe nos &quot;props&quot; react
  pageTitle: &quot;Test&quot;,
  pageContent: markdownify(&quot;Imaginons du **markdown** parsé&quot;),
  // vous pouvez bien entendu rajouter d&#39;autres choses
  collections: {
    posts: [
      //...
    ]
  }
})

let html
try {
  html = react.renderToStaticMarkup(component)
}
catch (err) {
  // Vous devrez gérer votre exception selon votre environnement
  // si c&#39;est pour un test on peut simplement ne pas utiliser
  // try/catch, ça nous pètera à la gueule et c&#39;est tant mieux
  throw err
}

// maintenant vous faites ce que vous voulez de votre string html !
// ex: require(&quot;fs&quot;).writeFile(...)
</code></pre>
<p>La méthode intéressante de React est dans notre cas <code>renderToStaticMarkup()</code> qui
va nous générer un HTML qui va bien.</p>
<p>Pour aller plus loin on pourrait décider d’utiliser <code>renderToString()</code> plutôt que
<code>renderToStaticMarkup()</code> afin de pouvoir faire prendre le relais à ReactJS côté client
mais là <a href="/posts/js/reactjs-et-rendu-serverside/" >le niveau de complexité est différent</a>.</p>
<p>Pour la petite anecdote, notre site utilise actuellement <a href="http://www.metalsmith.io/" >metalsmith</a>,
une petite bibliothèque simple mais qui permet par son API de faire des choses sympas.</p>
<p>J’ai donc codé <a href="https://github.com/search?q=user%3AMoOx+metalsmith" >quelques plugins metalsmith</a>
dont un <a href="https://github.com/MoOx/metalsmith-react" >metalsmith-react</a> à l’occasion.</p>
<p>N’hésitez pas à consulter
<a href="https://github.com/putaindecode/putaindecode.fr" >le code source de notre site</a>
pour faire des découvertes sympas.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/utiliser-react-en-moteur-de-templates/</guid>
            <pubDate>Thu, 07 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Implémenter Flux]]></title>
            <description><![CDATA[<p>Si vous n’avez pas encore lu
<a href="http://putaindecode.fr/posts/js/flux-qu-est-ce-c-est/" >l’introduction à flux</a>,
n’hésitez pas à jeter un œil avant de lire ce post.</p>
<p>Une des choses importantes avec Flux, et pourtant pas évidentes après lecture
<a href="https://github.com/facebook/flux/tree/master/examples/" >des exemples officiels</a>,
c’est que les stores doivent être des instances, et non des singletons que
les composants récupèrent en dépendance directe.</p>
<p>La raison de cette nécessité, c’est la possibilité de servir une page
pre-rendue sur le serveur. En soi, vous devez impérativement amorcer votre
dispatcher et vos stores dans le scope de la requête, ou vos utilisateurs
se retrouveront avec des stores remplis de data ne leur appartenant pas.</p>
<p>Puisque l’intérêt d’une solution comme react dans le cadre du server-side
rendering est d’utiliser les mêmes composants que sur le client, il faut
que notre approche soit convenable sur nos deux environements.</p>
<p>La question dès lors est «comment passer les stores à nos composants react
maintenant qu’ils ne sont plus des dépendances directes ?».</p>
<p>On va les passer via les <code>props</code> de parent à enfant ? lolnope.
La plupart de nos composants n’auront pas conscience de la présence de ces
stores, et seront utilisés dans différents contextes. Et c’est justement
l’API <code>context</code> que nous allons utiliser.</p>
<p>Cette API est assez simple, en soi, le <code>context</code> d’un composant est construit
au fur et à mesure que ses ancêtres décident d’y ajouter de la data.</p>
<p>Exemple simple :</p>
<pre><code class="lang-javascript">import React, {Component, PropTypes} from "react"

class App extends Component {

  // on définit les types de ce que l'on souhaite passer dans
  // le contexte
  static childContextTypes = {
    foo: PropTypes.string,
  }

  // on crée une méthode qui retourne ce contexte
  getChildContext() {
    return {
      foo: this.props.foo,
    }
  }

  render() {
    return (
      &lt;div className="putainde-App"&gt;
        &lt;Container /&gt;
      &lt;/div&gt;
    )
  }
}

class Container extends Component {

  // les contextes sont *merged*, ce qui nous permet de le construire
  // sans se soucier du niveau auquel sera notre composant.
  static childContextTypes = {
    bar: PropTypes.string,
  }

  getChildContext() {
    return {
      bar: "oh hai",
    }
  }

  render() {
    return (
      &lt;div className="putainde-Container"&gt;
        &lt;IntermediaryComponent /&gt;
      &lt;/div&gt;
    )
  }

}

// ce composant n'a pas besoin de savoir que ses enfants on besoin
// de certaines propriétés du contexte
class IntermediaryComponent extends Component {
  render() {
    return (
      &lt;Content /&gt;
    )
  }
}

class Content extends Component {

  // pour chaque composant utilisant des propriétés du contexte,
  // on stipule ce dont on a besoin
  static contextTypes = {
    foo: PropTypes.string,
    bar: PropTypes.string,
  }

  render() {
    return (
      &lt;div className="putainde-Content"&gt;
        &lt;div className="putainde-Content-line"&gt;
          &lt;strong&gt;foo&lt;/strong&gt;: {this.context.foo}
        &lt;/div&gt;
        &lt;div className="putainde-Content-line"&gt;
          &lt;strong&gt;bar&lt;/strong&gt;: {this.context.bar}
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }

}

React.render(
  &lt;App foo={Date.now()} /&gt;,
  document.getElementById("App")
)
</code></pre>
<p>Cela nous donne cet output :
<a href="http://jsbin.com/zitohibaze/1/" >http://jsbin.com/zitohibaze/1/</a></p>
<p>Grâce à cette API, on peut créer des composants isolés, et dont les
composants parents n’auront pas nécessairement besoin de connaître le
contexte.</p>
<p>L’idée, pour en revenir à Flux, c’est de passer notre dispatcher dans
ce contexte, et de placer les stores dans le dispatcher au moment de
l’amorce de l’app.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> dispatcher = <span class="hljs-keyword">new</span> Dispatcher()

dispatcher.registerStore(<span class="hljs-keyword">new</span> SomeStore())
dispatcher.registerStore(<span class="hljs-keyword">new</span> SomeOtherStore())

React.render(
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> <span class="hljs-attribute">dispatcher</span>=<span class="hljs-value">{dispatcher}</span> /&gt;</span>,
  document.getElementById("App")
)</span>
</code></pre>
<p>Désormais, pour avoir une API décente pour récuperer les données des stores,
on a deux principales solutions:</p>
<ul>
<li>utiliser un mixin</li>
<li>utiliser un higher-order component</li>
</ul>
<p>Puisque la direction que prend l’API de React, à terme, est de ne plus
fournir de mixins, et de laisser au TC39 le temps de prendre la bonne
décision sur la façon dont JavaScript traitera la composition ; il semble
plus adéquat d’utiliser un higher-order component. Cela aura en plus
l’avantage de rendre le composant récupérant les données <em>stateless</em>.</p>
<p>Ce genre d’API ressemble à ça :</p>
<pre><code class="lang-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComponentWithData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  static stores = {
    <span class="hljs-comment">// nom du store: nom de la prop souhaitée</span>
    MyStore: <span class="hljs-string">"my_store"</span>,
  }

  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
        {/* la data est passée via les props*/}
        {this.props.my_store.foo}
      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    )</span>
  }
}

<span class="hljs-comment">// storeReceiver wrap `ComponentWithData` dans un higher-order component</span>
<span class="hljs-comment">// et se charge de récupérer le store dans le contexte pour les passer</span>
<span class="hljs-comment">// dans les props de `ComponentWithData`</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> storeReceiver(ComponentWithData)
</code></pre>
<p>Enfin, avec cette approche, les action creators que l’on voit dans les
exemples de flux ne peuvent plus garder la même forme, puisqu’il ne doivent
plus avoir le dispatcher comme dépendance directe (ce dernier étant une
instance). Du coup, ce sont désormais des fonctions pures :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> PostActions = {
  getPost(slug) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_GET,
      slug: slug,
    }
  },
  receivePost(res) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_RECEIVE,
      res,
    }
  },
  error(res) {
    <span class="hljs-keyword">return</span> {
      type: ActionTypes.POST_ERROR,
      res,
    }
  },
}
</code></pre>
<p>et nos composants utilisent :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> React, {Component, PropTypes} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> PostActions <span class="hljs-keyword">from</span> <span class="hljs-string">"actions/PostActions"</span>

class MyComponent extends Component {

  static contextTypes = {
    dispatcher: PropTypes.object,
  }

  static propTypes = {
    slug: PropTypes.string,
    title: PropTypes.title,
  }

  handleClick() {
    this.context.dispatcher.dispatch(
      PostActions.getPost(this.props.slug)
    )
  }

  render() {
    return (
      &lt;button
        onClick={() =&gt; this.handleClick()}&gt;
        {this.props.title}
      &lt;/button&gt;
    )
  }
}
</code></pre>
<p>Pour résumer, les avantages de cette approche sont :</p>
<ul>
<li>un meilleur découplage</li>
<li>une isolation solide des composants</li>
<li>la possibilité de pre-render sur le serveur</li>
<li>une testabilité accrue, puisqu’il est simple d’utiliser un mock ou des
instances crées pour le test dans le contexte de nos composants.</li>
</ul>
<p>Bisous bisous.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/implementer-flux/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/implementer-flux/</guid>
            <pubDate>Fri, 01 May 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[HATEOAS, le Graal des développeurs d'API]]></title>
            <description><![CDATA[<p>Nous vivons aujourd’hui dans un monde où tout devient service. Twitter, Facebook, Google Drive, GitHub, tout le monde y va de sa petite API pour que nous, geeks, puissions profiter pleinement des moult fonctionnalités offertes par ces plateformes. Qu’entend-on par service ? Comment les rendre disponibles facilement et intelligemment ? On va essayer d’y répondre ! </p>
<h2 id="les-webservices">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#les-webservices">#</a>
      Les webservices
    </h2><p>Rappelons juste, pour mettre tout le monde d’accord, ce qui se passe pendant une simple navigation web.</p>
<ol>
<li>Tu tapes l’adresse de ton site préféré</li>
<li>Le navigateur envoie la requête</li>
<li>Le navigateur reçoit du code HTML et l’interprète, pour voir s’il faut charger d’autres choses</li>
<li>Le navigateur relance les requêtes pour charger les images, scripts et CSS</li>
<li>Le navigateur reçoit toutes les ressources et te les affiche dans sa fenêtre.</li>
</ol>
<p>On parle donc de contenu qu’il faut afficher pour les êtres humains, avec des images, des styles et des comportements qui facilitent l’ergonomie et te permettent de dire <em>“wouaouw, ce site est vraiment beau, cool et pratique !”</em></p>
<p>Imaginons maintenant la même chose, mais à destination des programmes, qui ne consomment que de l’information brute et structurée, on ne va donc plus s’encombrer avec les CSS, les JS, et autres gifs animés (oui, les gifs animés, ça les fait pas marrer les machines…) ! On va se concentrer sur le contenu échangé et sur les moyens utilisés pour optimiser ces échanges.</p>
<h3 id="la-premiere-ecole-soap">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#la-premiere-ecole-soap">#</a>
      La première école : SOAP
    </h3><p>Imaginons deux programmes qui veulent discuter en passant par le web. Dans les années 90, des mecs super brillants se sont dit : <em>“On va se baser sur le XML pour faire communiquer nos programmes sur le web”</em>.
L’approche est assez logique et ingénieuse. Tout d’abord, les deux parties (le client et le serveur) se partagent une notice d’utilisation : la WSDL (Web Service Description Language), qui est un document XML décrivant toutes les méthodes qui peuvent être appelées par le client sur le serveur, avec les structures de données disponibles pour ces échanges.
Le client prépare donc sa demande et l’enveloppe dans une grosse structure XML contenant toutes les métadonnées (méthode appelée, signature numérique, etc.). Une fois que le serveur a reçu cette demande, il la traite et répond aussi dans une grosse enveloppe XML.</p>
<p>Tu viens de comprendre le SOAP (Service Oriented Application Protocol), aucun rapport avec une quelconque savonnette du coup. Cette méthode a fait ses preuves puisqu’elle fait tourner encore aujourd’hui des milliers de systèmes très complexes et très fiables.</p>
<h3 id="la-maison-d-en-face-rest">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#la-maison-d-en-face-rest">#</a>
      La maison d’en face : REST
    </h3><p>Plusieurs années ont passées et les esprits ont évolué. On a commencé à entendre des grandes déclarations comme : <em>“Le SOAP c’est vraiment lourdingue !”</em>, <em>“Le protocole HTTP est sous-exploité !”</em> ou encore <em>“Les enveloppes XML et les WSDL ? Merci bien !”</em> et c’est à ce moment-là qu’on a donné un acronyme bidon pour décrire le protocole HTTP sans vraiment le nommer : REST (REpresentational State Transfert). Pour l’anecdote, tout le monde s’accorde à dire que cet acronyme ne veut rien dire ;)</p>
<p>Le but du jeu est donc d’utiliser au maximum les possibilités du protocole HTTP, les verbes, les URL et les codes retours pour décrire des API de la manière la plus fidèle possible. On a donc gagné en simplicité et la communication entre machines se veut désormais à la portée de tous. Je reviendrai en détail sur le protocole HTTP un peu plus tard.</p>
<h3 id="un-partout-balle-au-centre">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#un-partout-balle-au-centre">#</a>
      Un partout : balle au centre
    </h3><p>Je tiens à remettre les choses au clair. On entend beaucoup trop souvent : <em>“Fais du REST, SOAP c’est nul”</em>. Il y a en effet clairement un effet de mode ! Les API REST pullulent et sont vraiment très pratiques. Toutefois, dans les gros systèmes nécessitant du RPC ou encore de la signature numérique, pour les échanges de données médicales par exemple, le contrat WSDL et la rigueur du XML sont clairement des alliés ! </p>
<h2 id="alors-comme-ca-http-ca-fait-tout">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#alors-comme-ca-http-ca-fait-tout">#</a>
      Alors comme ça, HTTP ça fait tout ?
    </h2><p>Il y a un type qui s’appelle Leonard Richardson et qui a mis en place un <a href="http://martinfowler.com/articles/richardsonMaturityModel.html" >modèle de maturité</a> pour qualifier les API webservice.</p>
<h3 id="niveau-0">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#niveau-0">#</a>
      Niveau 0
    </h3><p>C’est le minimum acceptable dans la communication HTTP :</p>
<ul>
<li>Toutes les requêtes sont envoyées à la même URL, quelle que soit la demande.</li>
<li>Toutes les requêtes sont envoyées avec le verbe POST.</li>
<li>Quel que soit le type de retour (donnée ou erreur), le code HTTP retourné par le serveur sera toujours 200 (OK, tout s’est bien passé).</li>
<li>Le contenu échangé est majoritairement du XML (pour les enveloppes notamment).</li>
</ul>
<p>Quand on fait du webservice avec SOAP, c’est ce niveau qui est utilisé lors de la communication HTTP.</p>
<h3 id="niveau-1">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#niveau-1">#</a>
      Niveau 1
    </h3><p>Avec ce premier niveau, on essaye d’enrichir un peu plus l’utilisation. On ajoute la notion de <em>ressource</em>, en fonction de la donnée métier manipulée, l’URL de la requête sera différente. La preuve par l’exemple :</p>
<ul>
<li><strong><em>POST /agenda</em></strong> : permet de travailler avec les données de l’agenda de l’application</li>
<li><strong><em>POST /customers</em></strong> : permet de travailler avec le registre des clients  </li>
</ul>
<p>On profite aussi de la vue hiérarchique que nous proposent les URL :</p>
<ul>
<li><strong><em>POST /customers/42</em></strong> : permet de travailler avec le client qui possède l’identifiant 42</li>
</ul>
<p>Rien qu’en traçant les URL appelées sur le serveur, on peut comprendre ce que le client HTTP cherche à faire… pas dégueu, non ?</p>
<h3 id="niveau-2">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#niveau-2">#</a>
      Niveau 2
    </h3><p>Le protocole HTTP utilise des verbes pour les requêtes et des codes numériques pour les retours. Ce sont ces deux mécanismes qui seront utilisés en complément du niveau 1.</p>
<p>Les principaux verbes HTTP que l’on utilise sont GET, POST, PUT et DELETE. Leur nom est déjà très évocateur.</p>
<ul>
<li><strong><em>GET /customers/42</em></strong> pour récupérer les informations du client 42</li>
<li><strong><em>PUT /customers</em></strong> <em>(+ corps de la requête)</em> pour enregistrer un nouveau client</li>
<li><strong><em>POST /customers/42</em></strong> <em>(+ corps de la requête)</em> pour mettre à jour les informations du client 42</li>
<li><strong><em>DELETE /customers/42</em></strong> pour supprimer le client 42</li>
</ul>
<p>Facile, non ? La réponse du serveur devient tout aussi logique grâce aux codes HTTP.
Ces codes sont juste des nombres de 3 chiffres respectant cette logique :</p>
<ul>
<li><strong><em>1xx</em></strong> : <em>“Je suis en train de bosser, attends encore un peu.”</em></li>
<li><strong><em>2xx</em></strong> : <em>“Voilà le résultat, ça s’est bien passé.”</em></li>
<li><strong><em>3xx</em></strong> : <em>“Le contenu est déplacé, va voir ailleurs (cf. en-tête location).”</em></li>
<li><strong><em>4xx</em></strong> : <em>“Tu me demandes n’importe quoi, tu as merdé.”</em></li>
<li><strong><em>5xx</em></strong> : <em>“J’ai merdé…”</em></li>
</ul>
<p>Parmi les plus connus, on a donc 404 (<em>“tu me demandes quelque chose qui n’existe pas”</em>), 403 (<em>“accès interdit”</em>), 304 (<em>“pas la peine de m’emmerder, la donnée est dans ton cache”</em>) et bien sûr 200 (<em>“OK, tout va bien”</em>).</p>
<p>Et si les codes HTTP sont ta nouvelle passion, je te suggère de te documenter sur le code <a href="http://fr.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol" >418</a> !</p>
<h3 id="niveau-3-hateoas">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#niveau-3-hateoas">#</a>
      Niveau 3 : HATEOAS
    </h3><p>Alors on a les verbes HTTP et les codes retours. À quoi peut ressembler le Graal des API REST alors ? Si on réfléchit un peu, on peut se dire qu’il faudrait, pour toutes les URL, donner un code retour HTTP cohérent pour chaque verbe, logique non ? De cette manière, on peut entamer un véritable dialogue avec le serveur HTTP, entièrement basé sur REST. Voilà une bonne nouvelle pour ceux qui veulent tailler une bavette ailleurs que sur Google Hangouts !</p>
<p>Un petit exemple de dialogue : </p>
<pre><code>&gt; <span class="hljs-type">GET</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">200</span> <span class="hljs-type">OK</span>

&gt; <span class="hljs-type">PUT</span> /customers/<span class="hljs-number">42</span> <span class="hljs-decorator">{...}</span>
<span class="hljs-number">409</span> <span class="hljs-type">Conflict</span>

&gt; <span class="hljs-type">DELETE</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">204</span> <span class="hljs-type">No</span> <span class="hljs-type">Content</span>

&gt; <span class="hljs-type">GET</span> /customers/<span class="hljs-number">42</span>
<span class="hljs-number">404</span> <span class="hljs-type">Not</span> <span class="hljs-type">Found</span>
</code></pre><p>C’est un bon début, mais ce niveau 3 va quand même un peu plus loin ! N’as-tu jamais trouvé génial qu’avec de simples liens dans les pages web, tu pouvais naviguer des heures et des heures ? </p>
<p>Pourquoi ne pas ajouter des liens dans les ressources retournées via REST ? Nous venons de mettre le doigt sur HATEOAS (<em>Hypermedia As The Engine Of Application State</em>). On peut désormais imaginer un tas de choses comme :</p>
<ul>
<li>Quand on renvoie un tableau json par exemple, dans chaque item, <ul>
<li>on peut ajouter les liens qui permettent de le mettre à jour ;</li>
<li>on peut ajouter les liens qui permettent de récupérer des données liées comme l’auteur d’un livre, les mentions d’un tweet, etc. ;</li>
<li>on peut ajouter l’URL de putaindecode.fr.</li>
</ul>
</li>
</ul>
<p>Voici un exemple de trame JSON avec les informations HATEOAS. Pour information, il s’agit d’un webservice qui permet de lister des conférences.</p>
<pre><code><span class="hljs-collection">[
  <span class="hljs-collection">{
    <span class="hljs-string">"conference"</span>: <span class="hljs-collection">{
      <span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>,
      <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
        <span class="hljs-collection">{
          <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
          <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/conferences/"</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
          <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/conferences/1"</span>
        }</span>
      ]</span>,
      <span class="hljs-string">"name"</span>: <span class="hljs-string">"Take Off Conf 2013"</span>,
      <span class="hljs-string">"startDate"</span>: <span class="hljs-string">"2013-01-17T00:00:00+01:00"</span>,
      <span class="hljs-string">"endDate"</span>: <span class="hljs-string">"2013-01-18T00:00:00+01:00"</span>,
      <span class="hljs-string">"talks"</span>: <span class="hljs-collection">[
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Jakob Mattsson"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"You are not service oriented enough!"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/1"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">2</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Olivier Lacan"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Science-based development"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/2"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">3</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Xavier Coulon"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Build your website with awestruct and publish..."</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/3"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>,
        <span class="hljs-collection">{
          <span class="hljs-string">"id"</span>: <span class="hljs-number">4</span>,
          <span class="hljs-string">"speakerName"</span>: <span class="hljs-string">"Rémi Parmentier"</span>,
          <span class="hljs-string">"title"</span>: <span class="hljs-string">"Design for developers"</span>,
          <span class="hljs-string">"links"</span>: <span class="hljs-collection">[
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"self"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/4"</span>
            }</span>,
            <span class="hljs-collection">{
              <span class="hljs-string">"rel"</span>: <span class="hljs-string">"list"</span>,
              <span class="hljs-string">"href"</span>: <span class="hljs-string">"http://localhost:8080/hateoas-webservice/rs/talks/"</span>
            }</span>
          ]</span>
        }</span>
      ]</span>
    }</span>
  }</span>,<span class="hljs-collection">{
  ...
  }</span> 
]</span>
</code></pre><p>Dans cette trame, tu auras remarqué les objets dans les tableaux nommés “links”, ce sont les liens disponibles pour chacun des objets renvoyés ! On peut imaginer qu’en fonction des droits de l’utilisateur courant, il y ait plus ou moins de liens.</p>
<h2 id="est-ce-que-c-est-standard">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#est-ce-que-c-est-standard">#</a>
      Est-ce que c’est standard ?
    </h2><p>Eh bien non ! Il n’y a pas vraiment de convention pour l’écriture des liens dans les trames renvoyées. Cela dépend du format renvoyé dans un premier temps. Comment formaliser un standard si on renvoie en JSON, XML et YML en fonction des en-têtes HTTP du client ?</p>
<p>De la même manière, tu auras remarqué que l’on ne précise pas le verbe HTTP à utiliser sur les URL. C’est la raison pour laquelle il faut implémenter un retour cohérent pour tous les verbes HTTP courants !</p>
<p>Et pour finir, comment connaître le format du document JSON accepté avec les requêtes POST par exemple ? Il n’y a pas non plus de règle ! On pourrait imaginer par exemple un document “type” qui serait renvoyé après une requête “OPTION” sur l’URL.</p>
<p>Il y a toutefois quelques expérimentations comme <a href="http://en.wikipedia.org/wiki/Hypertext_Application_Language" >HAL</a> ou encore <a href="http://jsonapi.org/" >JSON API</a> qui tentent de normaliser un peu ce flou artistique.</p>
<p>Tu fais ta petite popote ! Tu fais comme tu veux ! Ça a du bon aussi !</p>
<h2 id="bon-ok-je-fais-comment-pour-le-mettre-en-place-maintenant">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#bon-ok-je-fais-comment-pour-le-mettre-en-place-maintenant">#</a>
      “Bon ok, je fais comment pour le mettre en place maintenant ?”
    </h2><p>Tu remontes tes manches et tu te démerdes !</p>
<p>Il y a quelques frameworks qui vont te donner un coup de main. Dans le monde Java par exemple, il existe <a href="http://docs.jboss.org/resteasy/docs/2.0.0.GA/userguide/html/LinkHeader.html" >Resteasy-links</a> (avec un exemple d’utilisation <a href="https://github.com/awillemant/hateoas-example" >sur mon repo GitHub</a>), ou encore <a href="http://projects.spring.io/spring-hateoas/" >Spring HATEOAS</a></p>
<p>Pour les <em>Nodistes</em>, une simple recherche sur <a href="https://www.npmjs.com/search?q=hateoas" >npmjs</a> renverra un tas d’outils ! </p>
<h2 id="references">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/api/hateoas/#references">#</a>
      Références
    </h2><p>Oui, parce qu’il y a des gens bien plus brillants que moi pour vous convaincre sur l’Hypermedia !</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/HATEOAS" >Wikipédia</a></li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html" >Blog de Martin Fowler</a></li>
<li>Les travaux de Steve Klabnik, Rubyiste reconnu (ex : <a href="https://www.youtube.com/watch?v=g4sqydY3hHU" >Designing Hypermedia APIs</a>)</li>
<li>Ori Pekelman : <a href="https://www.youtube.com/watch?v=ZZxOaCP8vyg" >son talk à la Take Off Conf 2014</a></li>
<li><a href="http://blog.xebia.fr/2014/03/17/post-vs-put-la-confusion/" >Un excellent article de Xebia sur la bonne utilisation de POST et PUT</a></li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/api/hateoas/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/api/hateoas/</guid>
            <pubDate>Thu, 12 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Du CSS évolutif]]></title>
            <description><![CDATA[<p>Modulaire, maintenable, réutilisable, accessible. Ces termes sont au cœur de nos métiers et on nous les rabâche toute la journée.</p>
<p>Malgré la grossièreté de ces mots pour certains d’entre vous, il est tout à fait possible de pondre du CSS en utilisant tous ces principes.</p>
<h2 id="maintenable">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#maintenable">#</a>
      Maintenable
    </h2><p>L’un des trucs les plus chiants du CSS c’est bien la cascade, qui, malgré sa bonne volonté, n’apporte pas que des solutions. Pour pallier aux problèmes que l’on peut vite créer, <a href="http://putaindecode.fr/posts/css/petite-definition-bem/" >la méthodologie BEM</a> a vu le jour avec son <a href="http://blog.kaelig.fr/post/48196348743/fifty-shades-of-bem" >lot de variantes</a>.</p>
<p>La grande majorité des membres de p! utilisent cette convention :</p>
<pre><code class="lang-css"><span class="hljs-class">.MyComponent</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent</span><span class="hljs-class">.is-state</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent--modifier</span> <span class="hljs-rules">{}</span>

<span class="hljs-class">.MyComponent-element</span> <span class="hljs-rules">{}</span>
<span class="hljs-class">.MyComponent-anotherElement</span> <span class="hljs-rules">{}</span>
</code></pre>
<p>D’un coup d’œil, on devine la structure <code>HTML</code> qui en découle et l’utilité de chaque élément. Les états sont toujours les mêmes et clairement identifiables car commençant par <code>is-*</code>, de même que les éléments définis par <code>-</code> ainsi que les modificateurs <code>--</code>.</p>
<p>Avec cette méthodologie rares sont les sélecteurs dépassant :</p>
<pre><code class="lang-css"><span class="hljs-class">.MyComponent-element</span> <span class="hljs-class">.MyComponent-anotherElement</span> <span class="hljs-rules">{}</span>
</code></pre>
<p>L’intérêt ? Apporter de la sémantique à notre code CSS, en utilisant des classes, des classes et des classes afin de clairement s’abstraire de la cascade. Finis les <code>!important</code>, on évite ainsi les problèmes d’éléments et les soudains changements de structure HTML qui te forcent à réécrire tes sélecteurs.</p>
<p>Cette méthode est d’ailleurs, entre autres, utilisée par <a href="http://twitter.com" >Twitter</a> via <a href="http://suitcss.github.io/" >SUIT CSS</a>.</p>
<h2 id="modulaire">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#modulaire">#</a>
      Modulaire
    </h2><p>Partant de notre méthodologie, on va développer notre site web comme un gros Lego. Chaque partie graphique de notre projet sera un composant, une brique.</p>
<p>On pourrait imaginer des éléments comme <code>NavBar</code>, <code>Pagination</code>, <code>Article</code> que l’on va assembler au fur et à mesure de notre développement. Notre site sera composé de plusieurs dizaines de fichiers (<code>Composant</code>), mais aucun n’excèdera quelques centaines de lignes, grand maximum. Beaucoup plus facile à débugger et donc sur le long terme plus maintenable.</p>
<p>Il va de soi qu’on utilisera son outil préféré pour concaténer et minimiser le tout en un seul fichier, sinon on risque d’avoir quelques problèmes de <em>webperf</em>.</p>
<h2 id="accessible">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#accessible">#</a>
      Accessible
    </h2><p>Pour obtenir un design adaptatif ou accessible, il est nécessaire d’utiliser des unités dites relatives. C’est à ce moment qu’interviennent les unités stars du moment que sont <code>em</code> et <code>rem</code>.</p>
<p>Mais voilà que <code>em</code> rencontre un inconvénient majeur, encore et toujours notre fameuse cascade. Chaque élément dépend de son propre <code>font-size</code> ou de celui de son parent. Alors, vous imaginez l’élément de l’élément de l’élément. On peut vite perdre les pédales. Je vous vois venir avec l’unité <code>rem</code>. Effectivement on résout complètement le problème de la cascade, mais on perd en modularité.</p>
<p>Prenons notre exemple de <code>NavBar</code>, voici comment on pourrait commencer ce composant :</p>
<pre><code class="lang-css"><span class="hljs-class">.NavBar</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
}</span>
  <span class="hljs-class">.NavBar-item</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> .<span class="hljs-number">875em</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">1em</span></span></span>;
  }</span>
</code></pre>
<p>Notre classe principale étant définie en <code>rem</code>, il devient alors très facile de calculer l’ensemble de ces <code>-item</code> en <code>em</code>.
On diminue ainsi de nouveau les problèmes de cascade. De plus, on peut très facilement augmenter la taille générale de notre composant, en augmentant la taille de son <code>font-size</code> dans sa classe principale.
On atteint alors un double d’objectif : en plus d’être accessible en supprimant les pixels, on rend notre composant réutilisable sur d’autres projets en s’adaptant très facilement à son contexte.</p>
<h2 id="namespace">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#namespace">#</a>
      Namespace
    </h2><p>On utilise tous des scripts <code>vendors</code>. Pour éviter les collisions avec ceux-ci et encore une fois à cause de cette maudite cascade, voici un petit truc qui vous évitera de modifier vos classes : l’ajout d’un namespace à nos composants.</p>
<p>On va utiliser notre exemple de tout à l’heure avec <code>NavBar</code> :</p>
<pre><code class="lang-css"><span class="hljs-class">.putainde-NavBar</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">1rem</span></span></span>;
}</span>
  <span class="hljs-class">.putainde-NavBar-item</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> .<span class="hljs-number">875em</span></span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">1em</span></span></span>;
  }</span>
</code></pre>
<h2 id="pour-finir">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#pour-finir">#</a>
      Pour finir
    </h2><p>C’est verbeux, on ne peut pas le nier. Par moment, on peut se dire qu’écrire une classe seulement pour une propriété, est-ce si pertinent que ça ? Sauf qu’au moment ou vous écrivez votre <code>css</code> vous ne pouvez pas dire qu’à la prochaine mise à jour, il vous faudra peut-être en rajouter 5, et donc votre classe sera finalement bien utile.</p>
<p>Toutes ces méthodes m’ont fait abandonner <code>Sass</code> et son framework <code>Compass</code>. Ce qu’apporte un langage comme <code>Sass</code> (au-delà de l’aspect programmation, mais c’est une autre histoire) vient principalement de ses features telles que  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#nested_rules" >nested</a> et <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend" >@extend</a>. Et franchement, une bonne indentation, un bon nommage de classes et une utilisation intelligente de <code>BEM</code> vous feront vite oublier <code>Sass</code> sans regarder en arrière.</p>
<p>Sur l’ensemble de mes projets, je n’écris plus que ce qu’on appelle communément du <code>Vanilla CSS</code>. Petit bémol quand même, histoire de pouvoir utiliser des spécifications pas forcément encore compatibles sur tous les navigateurs, j’ai ajouté dans mon workflow l’outil <a href="https://github.com/postcss/postcss" >PostCSS</a>, le tout contrôlé par <a href="http://cssnext.github.io/" >cssnext</a> dont voici quelques exemples d’<a href="https://cssnext.github.io/cssnext-playground/" >utilisation</a>.</p>
<p>Je vous encourage vivement à tester ces deux outils (<a href="https://github.com/postcss/postcss" >PostCSS</a> ou <a href="http://cssnext.github.io/" >cssnext</a>) qui vous apporteront variables, manipulation des couleurs, etc, ainsi que concaténation des <code>@import</code> tout en conservant du CSS valide (selon les spécifications).</p>
<h2 id="le-truc-du-moment">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/css/du-css-evolutif/#le-truc-du-moment">#</a>
      Le truc du moment
    </h2><p>Avant de terminer cet article, je voulais mentionner l’idée/concept qui commence à faire son petit bout de chemin à savoir le <code>style inline</code>.</p>
<p>Cela revient tout simplement à écrire directement le CSS dans son code <code>HTML</code></p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-size:1rem"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"font-size:.875em; padding:1em"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Avant d’hurler au blasphème ou au scandale, il est nécessaire de mettre en adéquation cette idée avec les contraintes rencontrées lors du développement d’une application utilisant principalement du <code>JavaScript</code>.</p>
<p>Si vous souhaitez un peu plus d’informations sur le sujet, je vous invite à lire la <a href="https://speakerdeck.com/vjeux/react-css-in-js" >présentation</a> de <a href="https://twitter.com/Vjeux" >@Vjeux</a>, front-end engineer chez Facebook. Il explique les problèmes rencontrés avec le <code>CSS</code> et les solutions mises en place par les développeurs de Facebook ou plus exactement de <code>ReactJS</code>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/css/du-css-evolutif/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/css/du-css-evolutif/</guid>
            <pubDate>Tue, 10 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Il démarre Vim par erreur, ce qui se passe ensuite est tout simplement bluffant]]></title>
            <description><![CDATA[<blockquote>
<p>À première vue, vous allez éprouver de la tristesse, mais ce qui se passe ensuite est tout simplement incroyable…</p>
<p>Alors qu’il était en train d’effectuer une mise en production,
ce développeur s’est confronté à une situation qui aurait pu complètement déraper.
Une intervention directement sur le serveur de production était obligatoire afin d’éditer la base de données au format .txt.</p>
<p>Après avoir passé plusieurs heures pour se connecter à distance via une connexion sécurisée,
Maxime est tombé nez à nez avec une console d’administration en ligne de commande !
Il était complètement désemparé par l’absence de fenêtre.</p>
<p>Ce qui s’est passé ensuite est tout simplement incroyable :
fort de sa persévérance, Maxime décide tout de même de se rapprocher du clavier !
Après une rapide recherche sur les Internets,
il tape la première commande qu’il trouve :</p>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>vim
</code></pre>
<p>Alors qu’on pourrait imaginer un drame, comme il arrive souvent quand <a href="https://duckduckgo.com/?q=I+am+stuck+in+VIM" >une personne tombe dans ce piège</a>,
Maxime ne s’est pas laissé abattre et a persisté dans sa démarche…</p>
</blockquote>
<p>Bon, assez plaisanté.</p>
<h2 id="_pourquoi-j-essayerais-vim-_">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/#_pourquoi-j-essayerais-vim-_">#</a>
      <em>Pourquoi j’essayerais Vim ?</em>
    </h2><p>J’ai commencé par Eclipse. Qu’il fallait réinstaller assez souvent sans quoi on perdait 10 minutes de sa vie à chaque ouverture d’autocomplete.
Je suis passé par NetBeans, WebStorm… Sans être convaincu. Plus récemment, j’étais assez content sous Sublime Text avant d’essayer Atom
(car en gros Atom est quasiment la même chose, en technologie web, open source et fait par GitHub).
Mais j’ai toujours eu envie de me la péter devant 2 écrans tout noir,
en ligne de commande, comme dans les super productions américaines.</p>
<p>Plus sérieusement, je passe de plus en plus de temps devant ma console…
Enfin vous savez, le terminal, pas l’autre truc un peu plus fun (et encore que).</p>
<p>J’ai toujours eu envie de comprendre pourquoi autant de gens (car mine de rien il y en a un paquet) utilisaient Vim,
et se moquaient un bon coup à chaque sortie d’un nouvel éditeur.
Car bon faut avouer, se moquer c’est facile.
Du coup un jour, j’ai démarré Vim.</p>
<h2 id="_pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouve-dans-vim-_">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/#_pourquoi-j-ai-rien-compris-quand-je-me-suis-retrouve-dans-vim-_">#</a>
      <em>Pourquoi j’ai rien compris quand je me suis retrouvé dans Vim ?</em>
    </h2><p>Le truc le plus déroutant dans Vim, c’est les modes.
Et quand on ouvre Vim, on ne se retrouve pas dans le mode le plus logique (à première vue).</p>
<p>En fait, ce qu’on dit pas trop, c’est que Vim est toujours utilisé aujourd’hui car on peut l’utiliser uniquement au clavier.
Vous allez me répondre qu’on peut en faire de même avec tous les éditeurs de texte.</p>
<p>Mais <strong>Vim a clairement été développé pour minimiser les déplacements des mains</strong>.</p>
<p>C’est pour moi la chose la plus importante à retenir. Et la chose la plus attractive.
Les bons développeurs ont tous une bonne flemme au fond d’eux, c’est bien connu.</p>
<p>Pour un peu plus sur l’histoire de Vim, direction <a href="https://fr.wikipedia.org/wiki/Vim" >wikipedia.org/wiki/Vim</a>.</p>
<h2 id="commencer-avec-vim">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/#commencer-avec-vim">#</a>
      Commencer avec Vim
    </h2><p>Du coup, quand je suis dans Vim, comment ça se passe ?</p>
<p>Je passerai plus tard assez rapidement sur les différents points, vu que d’autres ressources,
dont notamment le livre <a href="https://vimebook.com/" >Vim pour les humains</a>, le font très bien en douceur.</p>
<p>C’est d’ailleur grâce à ce livre que je me suis lancé.
Je tiens donc à remercier <a href="http://viserlalune.com/" >Vincent Jousse</a> pour avoir pris le temps d’écrire cet ouvrage.</p>
<p>Profitez de cet ouvrage, en plus <a href="http://ploum.net/le-prix-libre-une-impossible-utopie/" >le prix est libre</a>.
Et puis quand on pense au prix des licences de certains IDE…</p>
<p>Ce livre est fait pour n’importe qui, débutant ou pas.
Vraiment, mangez-en si vous souhaitez essayer Vim (oui je sais, manger un e-book comme ça, ça paraît pas évident).</p>
<p>J’ai essayé plusieurs fois sans trop savoir où commencer, sans succès.
Ce livre m’a aidé et se dévore en quelques dizaines de minutes (deux ou trois heures grand max),
clavier sous les mains (bah oui rien de mieux pour se lancer).</p>
<p>J’ai essayé et me voilà conquis, une fois que j’ai compris sa valeur ajoutée.</p>
<p>Pour bien s’y prendre, forcez-vous à travailler avec Vim au moins une journée en suivant les conseils que vous trouverez dans cet ouvrage.
Cela a fonctionné pour moi : je gagne déjà du temps au bout de quelques semaines d’utilisation.</p>
<p>Pourquoi pas vous ?</p>
<h2 id="pour-apprendre-vim">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/#pour-apprendre-vim">#</a>
      Pour apprendre Vim
    </h2><p>Vous pouvez donc :</p>
<ul>
<li>lire l’e-book <a href="http://vimebook.com" >Vim pour les humains</a></li>
<li>lancer la commande <code>vimtutor</code></li>
<li>jouer à <a href="http://vim-adventures.com/" >Vim Adventures</a></li>
<li>vous entraîner sur des exemples concrets avec <a href="http://vimgolf.com/" >VimGolf</a></li>
</ul>
<p>Voici aussi un cheatsheet indispensable qui permet de bien mémoriser le pourquoi des touches
(b = begin, w = word, e = end, r = replace, i = insert, a = append, o = open, ctrl f = forward, ctrl b = backward, etc).</p>
<p><img src="http://putaindecode.fr/posts/vim/vim-cheatsheet.gif" alt="cheatsheet VIM"></p>
<p>Vous remarquerez que souvent les commandes en majuscules font la même chose mais dans le sens inverse (f/F, o/O), ou de manière plus catégorique (d/D, y/Y).</p>
<h2 id="passer-a-vim-est-un-investissement">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/#passer-a-vim-est-un-investissement">#</a>
      Passer à Vim est un investissement
    </h2><p>Point important : il faut avoir envie.
Il ne s’agit pas de changer simplement d’éditeur, car on doit complètement changer ses habitudes.
Plus aucun raccourci clavier que vous avez l’habitude d’utiliser ne va fonctionner.
Je me répète mais il faut se forcer un minimum avant d’imaginer les possibilités de cet éditeur.</p>
<p>Cela dit, on peut rapidement voir la puissance de Vim après quelques heures d’utilisation
(même si on peut aussi un peu rager en cherchant des commandes simples qu’on arrive pas à faire).</p>
<p>Sachez aussi que beaucoup d’éditeurs ont des modes Vim (Sublime Text, Atom et d’autres). Il doit bien y avoir une raison, non ?
Notez aussi que Vim est installé par défaut sur beaucoup d’environnement de type Unix.</p>
<p>Vim est configurable à souhait (via le fichier <code>.vimrc</code>) et possède même son propre language de scripts (Vim Script ou viml)
ce qui permet de créer de nouvelles fonctionnalités simplement. Et même du coup d’en faire des “plugins”.</p>
<p>Je vous prépare un prochain post pour vous faire un petit mémo condensé de ce qu’on peut faire avec, et surtout comment.</p>
<blockquote>
<p>:q^C:wq</p>
</blockquote>
]]></description>
            <link>http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/vim/il-demarre-vim-par-erreur-ce-qui-se-passe-ensuite-est-tout-simplement-bluffant/</guid>
            <pubDate>Tue, 03 Mar 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Quelques retours sur React et le rendu serveur]]></title>
            <description><![CDATA[<p>On entend souvent parler d’applications JavaScript isomorphiques, et même si le 
nom ne <a href="https://news.ycombinator.com/item?id=8237449" >fait</a> <a href="https://twitter.com/wycats/status/566857009836724224" >pas</a> 
<a href="https://medium.com/the-thinkmill/making-the-case-for-progressive-javascript-a98dfa82b9d7" >l’unanimité</a>, 
ce qu’il y a derrière, le concept de <em>server side rendered JavaScript</em> est en 
passe de devenir  un sujet plutôt tendance pour 2015 grâce à la monté en puissance 
de <a href="http://facebook.github.io/react/" >Reactjs</a>.  Faire du rendu d’application 
JavaScript coté serveur permet de réconcilier enfin le développeur de 
<em>Single Page App</em> (SPA) avec l’amélioration progressive, l’accessibilité et le 
SEO&nbsp;; quoique Google comme les lecteurs d’écran ont plutôt bien évolué sur
ce point. L’autre avantage non négligeable à mon sens, est qu’on améliore les 
performances perçues par rapport
 à une SPA classique puisque&nbsp;:</p>
<ul>
<li>On supprime une requête <em>ajax</em> au démarrage pour récupérer le contenu
initial. </li>
<li>On améliore la vitesse de rendu initial de page. </li>
<li>On bénéficie de la fluidité de navigation d’une SPA.</li>
</ul>
<p>Pour plus d’info sur les avantages, il y a <a href="http://tech.m6web.fr/isomorphic-single-page-app-parfaite-react-flux/" >cet article</a> sur le blog de M6Tech.</p>
<p>Afin de me familiariser avec React et son écosystème, rien de mieux que mettre 
les mains dedans&nbsp;! C’est un peu pour toutes ces raisons que j’ai décidé de 
l’utiliser pour mon site web (un site statique). </p>
<p><strong>Inutile et donc totalement justifié pour le développeur que je suis</strong>. 
Une des premières briques que j’ai mises en place a été le routeur.</p>
<h2 id="react-router">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/#react-router">#</a>
      react-router
    </h2><p>Pour une fois dans la communauté JavaScript, il y a une bibliothèque de référence 
et c’est celle là : <a href="https://github.com/rackt/react-router" >react-router</a>. 
Le routeur est fortement inspiré par celui d’Ember au sens où les URL et leurs routes 
sont au cœur du dispositif. Le routeur se présente sous forme de composant React 
et ça donne ça.</p>
<pre><code class="lang-jsx">//routes.js

var <span class="hljs-variable">React =</span> require(<span class="hljs-string">"react"</span>);
var <span class="hljs-variable">Router =</span> require(<span class="hljs-string">"react-router"</span>);

var <span class="hljs-variable">Route =</span> Router.Route;
var <span class="hljs-variable">DefaultRoute =</span> Router.DefaultRoute;
var <span class="hljs-variable">NotFoundRoute =</span> Router.NotFoundRoute;

var <span class="hljs-variable">App =</span> require(<span class="hljs-string">"./app"</span>);
var <span class="hljs-variable">Home =</span> require(<span class="hljs-string">"./home/homePage"</span>);
var <span class="hljs-variable">Project =</span> require(<span class="hljs-string">"./project/projectPage"</span>);
var <span class="hljs-variable">NotFound =</span> require(<span class="hljs-string">"./notFound"</span>);

var <span class="hljs-variable">routes =</span> (
  &lt;Route <span class="hljs-variable">path=</span><span class="hljs-string">"/"</span> <span class="hljs-variable">handler=</span>{App}&gt;
    &lt;DefaultRoute <span class="hljs-variable">name=</span><span class="hljs-string">"index"</span> <span class="hljs-variable">handler=</span>{Home} /&gt;
    &lt;Route <span class="hljs-variable">name=</span><span class="hljs-string">"project"</span> <span class="hljs-variable">path=</span><span class="hljs-string">"/projects/:url"</span> <span class="hljs-variable">handler=</span>{Project} /&gt;
    &lt;NotFoundRoute <span class="hljs-variable">name=</span><span class="hljs-string">"404"</span> <span class="hljs-variable">handler=</span>{NotFound} /&gt;
  &lt;/Route&gt;
);

module.<span class="hljs-variable">exports =</span> routes;
</code></pre>
<p>À mon sens, l’aspect déclaratif apporte de la clarté et améliore la compréhension 
du système. On voit rapidement quel composant est utilisé en fonction de l’URL. 
L’autre avantage du déclaratif, c’est qu’il permet de manière assez simple, 
d’imbriquer les routes en imbriquant les nœuds <code>&lt;Route&gt;</code>.</p>
<p>En plus des composants, on a aussi à disposition des <em>mixins</em> pour naviguer 
programmatiquement ou accéder aux infos du routeur (chemin, paramètres, …)</p>
<p>Et le gros plus de cette bibliothèque : elle peut aussi s’utiliser coté serveur, 
pour la génération des vues et éviter ainsi de dupliquer du code puisqu’on va 
pouvoir carrément utiliser tel quel le fichier précédent. Plutôt cool&nbsp;!
Voici un exemple de <em>middleware</em> pour faire marcher ça dans Express&nbsp;:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react"</span>);
<span class="hljs-keyword">var</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">"react-router"</span>);

<span class="hljs-comment">// notre fichier routes.js</span>
<span class="hljs-keyword">var</span> routes = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./src/routes"</span>);
<span class="hljs-comment">// notre template de page html</span>
<span class="hljs-keyword">var</span> Html = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./src/html"</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactView</span>(<span class="hljs-params">req, res, next</span>) </span>{
  Router.run(routes, req.url, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Handler, state</span>) </span>{
    <span class="hljs-comment">// on récupère les données pour cette vue en fonction de la requête.</span>
    <span class="hljs-keyword">var</span> data = getViewData(req);

    <span class="hljs-comment">// on génère la soupe au tag avec nos données dedans</span>
    <span class="hljs-keyword">var</span> markup = React.renderToString(React.createElement(Handler), data);

    <span class="hljs-comment">// on utilise React comme moteur de template</span>
    <span class="hljs-keyword">var</span> HtmlElement = React.createElement(Html, {markup: markup});  
    res.send(<span class="hljs-string">"&lt;!DOCTYPE html&gt;"</span> +  React.renderToStaticMarkup(HtmlElement));
  });
}
</code></pre>
<p>Et voici le composant <code>Html.jsx</code> que l’on utilise comme <em>template</em> pour notre page principale.</p>
<pre><code class="lang-jsx">var React = require('react');

var Html = React.createClass({
  render: function() {
    return (
      <span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charSet</span>=<span class="hljs-value">"utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">meta</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Mon site perso<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"/js/app.js"</span> /&gt;</span><span class="handlebars"><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"react-app"</span> <span class="hljs-attribute">dangerouslySetInnerHTML</span>=</span></span><span class="hljs-expression">{{__<span class="hljs-variable">html</span>: <span class="hljs-variable">this.props.markup</span>}}</span><span class="xml"><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
    );
  }

});

module.exports = Html;</span></span>
</code></pre>
<p>Une fois que le code HTML a été généré via<code>React.renderToString(React.createElement(Handler), data);</code>, 
on pourrait utiliser n’importe quel moteur de template (lodash.template, handlebars, ejs, jade, PHP…) 
pour générer le HTML de la page à renvoyer. Dans un souci de rationalisation des outils, 
j’ai préféré utiliser React. </p>
<p>Vous avez dû vous apercevoir qu’on utilise 2 méthodes différentes pour générer 
du HTML avec React&nbsp;:</p>
<ul>
<li><code>React.renderToString(React.createElement(Handler), data);</code></li>
<li><code>React.renderToStaticMarkup(React.createElement(Handler), data);</code></li>
</ul>
<p>La différence entre les deux méthodes est simple. Dans la première, React annote 
les nœuds HTML avec des <code>data-reactid</code> dans le but de pouvoir ensuite reprendre 
la main lorsque votre l’application s’exécutera dans le navigateur. De cette manière, 
React sait que vous l’initialisez avec un contenu généré depuis le serveur. 
Et si il détecte une différence entre le code existant et celui qu’il génère, 
vous aurez droit à un <a href="https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/browser/ui/__tests__/ReactRenderDocument-test.js#L205-L215" >petit warning</a>. 
La deuxième méthode permet de générer du code HTML sans annotations, 
comme n’importe quel moteur de <em>template</em>.</p>
<p>Les plus attentifs auront remarqué qu’on passe les données initiales lors de 
la création de l’application via des <em>props</em> React. Quid de l’utilisation 
de flux dans tout ça ?</p>
<h2 id="flux-et-le-rendu-serveur">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/#flux-et-le-rendu-serveur">#</a>
      Flux et le rendu serveur
    </h2><p>Avec <a href="http://facebook.github.io/flux/" >Flux</a>, ce sont les stores qui maintiennent 
l’état de notre application. Si l’on ne veut pas afficher notre application 
sans aucune données, nous allons devoir préalablement peupler nos stores 
avant d’appeler <code>React.renderToString()</code>. </p>
<p>Là où ça se corse un peu, c’est qu’il va falloir remplir nos stores avant de démarrer 
notre application sous peine de voir le message d’alerte dont je parlais plus haut. 
Le plus simple alors est de passer ces données au moteur de template, 
en plus du markup (par exemple sous la forme d’un nœud <code>&lt;script type=&quot;application/json&quot;&gt;JSON DATA&lt;/script&gt;</code>.
Il ne reste plus qu’a récupérer ces données avant d’appeler <code>React.render( Application, document.getElementById(&quot;react-app&quot;))</code></p>
<p>Par exemple&nbsp;: </p>
<pre><code class="lang-javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">"DOMContentLoaded"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{
  <span class="hljs-comment">// getData() va récuperer et parser le contenu du tag script </span>
  <span class="hljs-comment">// qui contient nos données</span>
  <span class="hljs-keyword">var</span> storeData= getData(); 

  <span class="hljs-comment">// on déclenche une actions</span>
  actions.init( storeData);

  <span class="hljs-comment">// on lance le rendu</span>
  React.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">App</span> /&gt;</span>, document.getElementById("react-app"));
});</span>
</code></pre>
<h2 id="le-mot-de-la-fin">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/#le-mot-de-la-fin">#</a>
      Le mot de la fin
    </h2><p>Penser son application React pour qu’elle puisse être rendue coté serveur 
introduit de nouvelles problématiques, notamment avec l’ajout du <em>pattern</em> Flux. 
En fonction des pages que l’on souhaite afficher, on devra initialiser différents <em>stores</em>. 
À nous de déterminer, en fonction de l’URL et du composant à afficher, 
lequel initialiser, et cela, que l’on soit sur le client ou le serveur. 
De la même manière, il faudra être capable de charger nos données, indépendamment 
de l’environnement d’exécution (coucou XHR).</p>
<p>Un début de réponse se trouve dans les exemples fournis avec react-router. 
L’idée est de passer par une propriété <code>statics</code> lors de la création des composants React 
qui seront associés à une <code>&lt;Route/&gt;</code>.</p>
<pre><code class="lang-jsx"><span class="hljs-keyword">var</span> ProjectPage = React.createClass({ 
  statics: {
    fetchData: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(params)</span></span>{
      <span class="hljs-keyword">return</span> api.getPageData(params.url)
        .then( actions.initProject)
        .<span class="hljs-keyword">catch</span>( actions.loadProjectError);
    }
  }
 ...
 });
</code></pre>
<p>Dans ce bloc <code>statics</code>, on définit une fonction qui servira à récupérer les données 
pour ce composant mais on pourrait très bien imaginer retourner la liste d’actions 
à lancer ou encore les <em>stores</em> à initialiser voire même un descripteur des données nécessaires 
à la vue (<a href="https://www.youtube.com/watch?v=9sc8Pyc51uU" >cf Relay / GraphQL</a>) </p>
<p>Ensuite, lorsque le callback fourni à <code>Router.run()</code> est appelé, il suffit de parcourir 
les <em>Handler</em> pour récupérer les informations contenues dans les blocs <code>statics</code>, 
les traiter et enfin faire <code>React.render()</code>.</p>
<pre><code class="lang-Javascript">// On renvoie une promesse qui sera résolue lorsque que toutes les données démandées via fetchData seront reçues.
Router.run(routes, Router.HistoryLocation, function (Handler, <span class="hljs-keyword">state</span>) {
  var p = Promise.<span class="hljs-literal">all</span>(<span class="hljs-keyword">state</span>.routes
    .filter(route =&gt; route.handler.fetchData)  // définit fetchData
    .map(route =&gt; {
      return route.handler.fetchData(<span class="hljs-keyword">state</span>.params);
    })
  );
  p.then( x =&gt; {
    React.render(<span class="hljs-variable">&lt;Handler {...state} /&gt;</span>, document.getElementById(<span class="hljs-string">"react-app"</span>))
  });
});
</code></pre>
<p>Le principe est simple et peut être facilement encapsulé dans un module pour 
être partagé entre le client et le serveur.  J’espère que cet article vous a permis 
d’appréhender un peu mieux le rendu coté serveur d’une application React. 
N’hésitez pas à laisser des commentaires si vous avez des questions où 
si vous souhaitez partager vos expériences dans ce domaine. </p>
<p>Et quelques liens vidéo des sessions de la #reactjsconf :</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=XZfvW1a8Xac" >React.js Conf 2015 - react-router increases your productivity </a> </li>
<li><a href="https://www.youtube.com/watch?v=z5e7kWSHWTg" >React.js Conf 2015 - Hype!</a> : un aperçu des possibilités de react-router</li>
</ul>
]]></description>
            <link>http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/reactjs-et-rendu-serverside/</guid>
            <pubDate>Mon, 23 Feb 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript modulaire pour le front-end : les bases]]></title>
            <description><![CDATA[<p>Quand on réalise des applications en JS pour les navigateurs web, on ne peut plus se contenter de mettre des tags <code>script</code> dans le bon ordre pour charger les bibliothèques tierces que l’on utilise comme pour un site web. C’est pourquoi il existe des outils pour permettre d’écrire du JavaScript modulaire et réutiliser plus facilement les innombrables bibliothèques publiées par la communauté JS.</p>
<p>Cependant, ce principe d’écriture modulaire et de publication de code n’étant pas intégré dans le langage lui-même, de très nombreuses solutions existent plus ou moins compatibles les unes avec les autres et aboutissant à une forte fragmentation de la communauté.
Donc quand on décide de se mettre au JavaScript modulaire, on trouve tout un tas d’articles (en anglais) parfois trop vieux (“une étape de build n’est pas adaptée au navigateur”), parfois trop subjectifs (“J’aime pas la syntaxe AMD”), parfois confus (“utiliser les modules pour de l’injection de dépendances”), parfois simplistes (“AMD vs CommonJS”).</p>
<p>C’est pourquoi j’ai voulu partager mon expérience, en essayant d’abord de reposer les bases du problème, puis en vous faisant part de ce que j’estime être la solution la plus satisfaisante actuellement.</p>
<p>D’abord, il faut faire la distinction entre 3 aspects du problème :</p>
<ul>
<li>le format d’écriture des modules (“module authoring format”)</li>
<li>le système de gestion des packages (“package management”)</li>
<li>la convention de résolution des dépendances de module</li>
</ul>
<h1 id="format-d-ecriture-des-modules">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#format-d-ecriture-des-modules">#</a>
      Format d’écriture des modules
    </h1><p>Le module est la brique de base pour décomposer un gros fichier JS en plusieurs fichiers plus petits et focalisés sur une fonctionnalité précise. La plupart du temps un module est un fichier JS qui fournit une fonction, un constructeur ou un objet de valeur. Et comme, pour fournir cette fonctionnalité, un module peut avoir besoin d’autres modules, il existe un mécanisme pour déclarer ses dépendances.</p>
<p>Actuellement, 2 standards principaux existent pour écrire ces modules : <strong>AMD</strong> et <strong>CommonJS</strong>.
Il est également possible d’utiliser la <a href="http://www.2ality.com/2014/09/es6-modules-final.html" >syntaxe retenue par ES6</a> (qui j’espère va enfin devenir le standard unique) mais pour l’instant, ça demande encore une étape de “transpilation” en AMD ou CJS.</p>
<p>Le format AMD (dans sa forme la plus courante) est :</p>
<pre><code class="lang-js">define([<span class="hljs-string">'moduleA'</span>, <span class="hljs-string">'moduleB'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>{
  <span class="hljs-comment">// j'utilise a et b</span>
  <span class="hljs-keyword">return</span> maFonctionTresUtile;
});
</code></pre>
<p>Le format CommonJS (dans sa forme la plus courante) est :</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">'moduleA'</span>);
<span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">'moduleB'</span>);
<span class="hljs-comment">// j'utilise a et b</span>
<span class="hljs-built_in">module</span>.exports = maFonctionTresUtile;
</code></pre>
<p>Ca n’est pas très différent dans l’esprit : tous les 2 permettent de décrire des dépendances et d’exporter une valeur.
La différence principale réside dans le fait que :</p>
<ul>
<li>CommonJS prévoit une évaluation en une passe dans laquelle il faut résoudre les dépendances au fur et à mesure</li>
<li>alors que AMD prévoit une évaluation en 2 passes :<ul>
<li>une première pour récupérer uniquement la liste des dépendances</li>
<li>et une seconde où on exécute le callback (le corps du module) avec les dépendances résolues.
C’est pourquoi on parle de format “synchrone” dans le premier cas et “asynchrone” dans le second car on peut résoudre les dépendances de façon asynchrone en AMD.</li>
</ul>
</li>
</ul>
<p>Dans les 2 cas, par contre, il y a besoin d’une <em>résolution des dépendances</em>, c’est à dire qu’un module ne peut pas être exécuté tel quel dans un navigateur en le chargeant via un tag <code>script</code>. Non, il faut un <em>loader</em>, c’est à dire un outil qui va charger le module qu’on lui demande et va résoudre les dépendances en cascade. Mais contrairement à ce que l’on pourrait croire, les règles de résolution des dépendances n’ont rien à voir avec le format du module (on verra ça plus tard).</p>
<h1 id="package-management">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#package-management">#</a>
      Package management
    </h1><p>Parlons maintenant des packages. En effet, pouvoir découper du code en modules, c’est bien ; mais ce qui est encore mieux c’est de pouvoir le partager avec d’autres pour qu’il soit facilement réutilisable et arrêter le syndrôme de :</p>
<blockquote>
<p>“je recode un event emitter dans ma bibliothèque comme ça je n’ai pas de
dépendance et c’est plus facile à consommer par mes utilisateurs”</p>
</blockquote>
<p> C’est le problème n°1 des bibliothèques front qui présentent souvent comme un argument de ne pas avoir de dépendances. Sauf que, si on y réfléchit, ça veut dire que : soit c’est une bibliothèque très bas niveau, soit le mec a recodé des trucs qui existent déjà au lieu de s’occuper de son sujet principal.</p>
<p>C’est là qu’entre en jeu la notion de <em>package</em> (que je ne traduirai pas en français, car ça ne servirait qu’à apporter de la confusion). Un package est un ensemble de fichiers (pas forcément des fichiers JS d’ailleurs) avec des métadonnées associées pour décrire principalement :</p>
<ul>
<li>où est stocké le package,</li>
<li>qui est l’auteur,</li>
<li>quelle est la licence,</li>
<li>quelle est la version,</li>
<li>et … quelles sont les dépendances et leurs versions !</li>
</ul>
<p>Ici les dépendances sont des dépendances entre packages, <a href="http://fr.slideshare.net/domenicdenicola/client-side-packages" >ce qui n’a rien à voir avec les dépendances entre modules</a>.</p>
<p>Pour faciliter l’utilisation des packages, on utilise un <em>package manager</em>, dont le rôle principal est, à partir d’un id de module (et éventuellement d’un numéro de version), de trouver l’adresse où se trouve les fichiers, les télécharger et les installer localement… et ceci de façon récursive pour les dépendances, ce qui est le gros avantage par rapport à le faire à la mano. Mais sinon, ça n’est pas plus compliqué que ça dans le principe, et ça reste valable pour des fichiers JS ou non, front-end ou non.</p>
<p>Les principaux package managers pour le front-end sont <a href="https://www.npmjs.com/" >npm</a> et <a href="http://bower.io" >bower</a>.
La grande différence entre les deux est que <strong>npm installe les dépendances de façon relative</strong> : pour chaque package, les dépendances sont installées dans un sous-dossier (node_modules).</p>
<ul>
<li>mon-projet-avec-nmp<ul>
<li>app.js</li>
<li>node_modules<ul>
<li>une-dependance<ul>
<li>main.js</li>
<li>nodes_modules<ul>
<li>une-dependance-indirecte<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>une-autre-dependance<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Alors que <strong>bower prend le parti d’installer les dépendances à plat</strong> : le package et ses dépendances et les dépendances des dépendances sont toutes installées au même niveau dans le même dossier.</p>
<ul>
<li>mon-projet-avec-bower<ul>
<li>app.js</li>
<li>bower_components<ul>
<li>une-dependance<ul>
<li>main.js</li>
</ul>
</li>
<li>une-autre-dependance<ul>
<li>main.js</li>
</ul>
</li>
<li>une-dependance-indirecte<ul>
<li>main.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>L’approche bower semble être une bonne idée car si 2 packages ont la même dépendance (ou des dépendances compatibles semver), une seule est installée. Alors qu’avec npm chaque package installe sa propre dépendance.</p>
<p>Cependant, s’il y a une incompatibilité de versions :</p>
<blockquote>
<p>le package A déclare une dépendance sur X en version 1
le package B déclare une dépendance sur X mais en version 2</p>
</blockquote>
<p>Avec bower, on est coincé : on ne peut installer qu’une seule version. Lors du <code>bower install</code>, il faudra choisir quelle version on garde : soit A devra utiliser X2, soit B devra utiliser X1.</p>
<ul>
<li>mon-app-avec-bower<ul>
<li>bower_components<ul>
<li>package-A</li>
<li>package-B</li>
<li>package-X<ul>
<li>main.js // v1 ou v2 mais pas les 2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Bower appelle cela de la <em>résolution de conflits</em>. Mais concrêtement, cela veut dire qu’on force une dépendance qui n’est pas supportée officiellement par le package en question. Donc on se retrouve responsable de vérifier que le package B fonctionne correctement avec X1. Pas cool :-(</p>
<p>Alors qu’avec npm les versions des dépendances sont respectées, il n’y a pas de question à se poser.</p>
<ul>
<li>mon-app-avec-npm<ul>
<li>node_modules<ul>
<li>package-A<ul>
<li>node_modules<ul>
<li>package-X<ul>
<li>main.js // v1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>package-B<ul>
<li>node_modules<ul>
<li>package-X<ul>
<li>main.js // v2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="resolution-des-dependances-de-module">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#resolution-des-dependances-de-module">#</a>
      Résolution des dépendances de module
    </h1><p>La question est alors :</p>
<blockquote>
<p>“Pourquoi existe-t-il des package managers spécifiquement pour le web front-end ?”</p>
</blockquote>
<p>Réponse :</p>
<blockquote>
<p> “Pour faciliter l’utilisation de modules publiés dans des packages dans le contexte du front-end”</p>
</blockquote>
<p>Super ! Mais concrêtement ?</p>
<p>Et bien, venons en au coeur du problème : <em>la résolution des module-id en fichier</em>. Comme on l’a vu, pour charger un module dans le navigateur, il faut utiliser un loader. Et une de ses tâches est de <em>résoudre</em> les <code>module_id</code> en adresse de fichier.</p>
<p>Au pire il faudrait explicitement dire au loader pour chaque <code>module_id</code> où est le fichier correspondant. Heureusement, ce n’est pas le cas, ni avec requireJS, ni avec les loaders compatibles npm.</p>
<h2 id="amd">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#amd">#</a>
      AMD
    </h2><p>RequireJS et les autres loaders AMD vont assez loin en  matière de <a href="http://requirejs.org/docs/api.html#config" >configuration</a> mais souvent , ça revient à décrire des règles du style <em>tous les modules id qui commencent par <code>mon-package</code> sont à chercher dans le dossier <code>./mon-package</code></em>.</p>
<p>En fait, ça n’est pas tout à fait vrai qu’il faille systématiquement configurer les règles de résolution avec RequireJS : il y a une règle par défaut qui stipule que les module_id sont résolus par rapport à une “baseURL” (qui par défaut est celle du fichier html). Donc si on installe tous les packages au même niveau, ça marche par défaut.
C’est pour cela que bower est souvent utilisé pour les packages front-end en AMD car il installe les fichiers à plat et de cette façon on limite le besoin de configuration.</p>
<h2 id="npm">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#npm">#</a>
      NPM
    </h2><p>A l’opposé de cette approche très flexible, il y a nodeJS avec une <a href="https://github.com/substack/browserify-handbook#how-node_modules-works" >convention simple et statique</a>, qui dit en gros :</p>
<ul>
<li>si c’est une référence relative, il suffit de suivre le chemin</li>
<li>si c’est une référence absolue, il faut chercher dans le dossier <code>node_modules</code> et ceci de façon récursive jusqu’à arriver à la racine</li>
</ul>
<p>Et donc zéro config, puisque ça n’est pas configurable. Ca peut paraître être une limitation mais c’est une force.</p>
<h1 id="conclusion">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#conclusion">#</a>
      Conclusion
    </h1><p>Si tous les packages en AMD utilisaient la règle de résolution par défaut et que l’on utilisait bower pour les installer, on n’aurait rien à configurer. Mais dans la pratique, ça n’est pas le cas et on se retrouve à devoir configurer les règles de résolution non seulement pour ses propres dépendances (<em>pourquoi pas</em>) mais également pour les dépendances de ses dépendances (<em>et là ça ne va plus</em>).
Et il reste toujours le problème des conflits de version liés à l’approche de mettre les dépendances à plat.</p>
<p>D’un autre côté, il y a la convention nodeJS qui impose des règles simples, non modifiables et qui n’a pas de problème de conflit de versions. C’est à dire qu’il suffit de faire <code>npm install mon-package</code> et ça marche. Une convention qui fait l’unanimité pour le backend JS.</p>
<p>Côté front, on lui reproche de charger les dépendances sans les dédoublonner et de le faire en synchrone, ce qui n’est pas adapté quand le chargement des fichiers se fait via un réseau en http et pas directement depuis un disque local comme sur un serveur.</p>
<p>C’est pourquoi a été inventé <a href="http://http://browserify.org/" >browserify</a> qui apporte actuellement <a href="http://putaindecode.fr/posts/js/browserify-all-the-things/" >le meilleur des 2 mondes</a> : toujours zéro config selon la convention nodeJS et un système de bundle/build (via une analyse syntaxique du code JS pour détecter les dépendances) afin d’assembler tous les modules en un seul fichier adapté au navigateur.
On peut lui reprocher la nécessité d’une étape de build et le fait que le code source en débug est en un seul fichier mais :</p>
<ol>
<li>de toute façon pour la prod, il y aura une étape de build et en dév, avec un outillage adapté (par exemple <code>watchify</code> qui rebuild en incrémental) ça n’est pas la mer à boire</li>
<li>avec le support des sources-map dans les navigateurs, on peut maintenant retrouver en debug les mêmes noms de fichiers et les mêmes numéro de ligne que dans les fichiers d’origine et les points d’arrêt fonctionnent.</li>
</ol>
<p>Au final, ça en devient même un avantage, car le code que l’on exécute en dev dans le navigateur est très proche de ce que l’on aura en prod, en tout cas plus proche qu’avec requireJS pour lequel on développe sans build et pour lequel il faut écrire à nouveau une config de build pour la mise en prod.</p>
<h1 id="conclusion-de-la-conclusion">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/#conclusion-de-la-conclusion">#</a>
      Conclusion de la conclusion
    </h1><p>Ma conclusion est que le point crucial pour faciliter la réutilisation de modules, c’est de <strong>minimiser les contraintes sur les utilisateurs</strong> et donc de se rapprocher d’un usage <em>plug and play</em>. Pour cela il faut une convention forte entre le package manager et le loader/builder de modules, afin d’éviter à l’utilisateur de devoir écrire des configs … la plupart du temps.
Bien sûr, la recherche du “zéro config” n’est pas une fin et c’est particulièrement vrai côté front où les contraintes de chargement de fichiers sont fortes. Et si vous voulez diviser votre bundle en plusieurs fichiers ou si vous voulez des règles d’optimisation complexes pour votre build, il est normal de devoir mettre les mains dans le cambouis.
Mais si au moins le cas d’usage le plus fréquent (compiler son appli en un seul fichier qui sera chargé via un tag <code>script</code>) est simplifié au maximum, alors on pourra sûrement voir côté front, le même état d’esprit que côté back. Et je suis plutôt optimiste, <a href="https://medium.com/@trek/last-week-i-had-a-small-meltdown-on-twitter-about-npms-future-plans-around-front-end-packaging-b424dd8d367a" >contrairement à certains</a>.</p>
<p>Utilisateur de la première heure d’<code>AMD</code> et de <code>Dojo loader</code>, puis de <code>bower</code>, je me suis rendu compte de leurs limites et surtout j’ai été régulièrement gêné par la complexité de la configuration… surtout lorsqu’il fallait passer au build. Cela freine la réutilisation de modules tiers et c’est dommage.
Ce n’est pas un problème intrinsèque au format de module et toutes les discussions sur “moi j’aime / j’aime pas la syntaxe AMD” sont secondaires (d’ailleurs <a href="https://www.npmjs.com/package/deamdify" >browserify peut fonctionner avec des bibliothèques en AMD</a>).
Mais dans la pratique, nous migrons vers la solution <code>npm + browserify</code> et c’est vraiment moins compliqué.</p>
<p>J’espère que cet article vous permettra d’y voir plus clair, de dépasser les querelles sur les préférences personnelles de chacun, et de vous aider à faire votre choix.
Je n’estime pas être un expert du sujet, il y a sûrement beaucoup de choses à compléter ou préciser, donc n’hésitez pas à réagir.</p>
<p>Pour aller plus loin et regarder vers le futur que nous amène ES6, il y a cet <a href="https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0" >excellent article</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/etat-lieux-js-modulaire-front/</guid>
            <pubDate>Mon, 15 Dec 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Première application Ember. Suite et fin.]]></title>
            <description><![CDATA[<p>L’<a href="/posts/js/premiere-app-ember" >article précédent</a> vous a accompagné pour la création d’une première application <a href="http://emberjs.com" >Ember</a>. 
Mais il faut bien reconnaître que l’exemple était très simple et que, du coup, le mérite est faible. 
Pour se  rattraper, on va complexifier un peu les choses.</p>
<p>Tout comme dans l’article précédent, nous détaillerons régulièrement les concepts mis en œuvre. Parce que vous le valez bien.</p>
<h2 id="sommaire">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#sommaire">#</a>
      Sommaire
    </h2><ul>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#edition-d-une-serie" >Édition d’une série</a><ul>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#routes-imbriquees" >Routes imbriquées</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#-code-outlets-code-" >Outlets</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#liens-entre-routes" >Liens entre routes</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#enregistrement-des-modifications" >Enregistrement des modifications</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#actions-sur-les-transitions" >Actions sur les transitions</a></li>
</ul>
</li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#relations-avec-ember-data" >Relations avec Ember Data</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#insertion-d-un-gabarit" >Insertion d’un gabarit</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#creation-d-une-nouvelle-serie" >Création d’une nouvelle série</a></li>
<li><a href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#conclusion" >Conclusion</a></li>
</ul>
<h2 id="edition-d-une-serie">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#edition-d-une-serie">#</a>
      Édition d’une série
    </h2><p>On veut pouvoir basculer depuis la fiche d’une série vers son édition en mode <em>in place</em>. C’est-à-dire
en <strong>remplaçant</strong> la zone de visualisation de cette fiche par sa zone d’édition.</p>
<p>On accède à la fiche en mode visualisation à l’URL <code>/series/{id}/</code> et en mode édition à l’URL <code>/series/{id}/edit</code>. Évidemment, 
on reconstruit uniquement la zone de la fiche et non l’application entière (et donc ni l’en-tête ni la liste des séries).</p>
<h3 id="routes-imbriquees">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#routes-imbriquees">#</a>
      Routes imbriquées
    </h3><p>Commençons par définir une nouvelle route <code>edit</code>, sous-route de <code>seriesItem</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'series'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'seriesItem'</span>, { path: <span class="hljs-string">'/:seriesItem_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
    });
  });
});
</code></pre>
<p>Pour que notre nouvelle route affiche la fiche en mode édition, on doit - <a href="/posts/js/debuter-avec-ember/#les-fondamentaux" >rappelez-vous</a> - impérativement suivre les 
<a href="http://emberjs.com/guides/concepts/naming-conventions/" >conventions de nommage</a> et créer un gabarit <code>edit.hbs</code> dans le 
répertoire <code>/app/templates/series/series-item/</code> :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/edit.hbs` --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"cancel"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cancel"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"title"</span>&gt;</span>{{input id="title" type="text" value=title}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Series's first album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"scriptwriter"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"scriptwriter"</span>&gt;</span>Scriptwriter<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="scriptwriter" type="text" value=scriptwriter required="required"}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"illustrator"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"illustrator"</span>&gt;</span>Illustrator<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="illustrator" type="text" value=illustrator}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"publisher"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"publisher"</span>&gt;</span>Publisher<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"control"</span>&gt;</span>{{input id="publisher" type="text" value=publisher}}<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"summary"</span>&gt;</span>{{textarea value=summary rows="10"}}<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
</code></pre>
<p>À ce stade, naviguer sur <code>/series/{@id}/edit</code> ne lève pas d’erreur mais n’a aucun effet. En effet, on a
défini une route imbriquée mais conservé le gabarit <code>/app/templates/series/series-item.hbs</code> inchangé. L’activation de la route <code>series.seriesItem</code> 
affiche donc toujours ce gabarit, même dans le cas d’une sous-route telle que <code>series.seriesItem.edit</code>. </p>
<h3 id="outlets">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#outlets">#</a>
      <code>outlets</code>
    </h3><p>La solution est à aller chercher du côté du concept d’<code>{{outlet}}</code> défini dans l’<a href="/posts/js/premiere-app-ember/#-code-outlet-code-et-routes-imbriquees" >article précédent</a>.
Un <code>{{outlet}}</code> est nécessaire <strong>à chaque fois qu’on définit un niveau d’imbrication.</strong> Mais comme on veut quand même continuer à afficher la série à 
l’URL <code>/series/{@id}/</code>, on va utiliser la <strong>route implicite</strong> <code>series.seriesItem.index</code> (cf. <a href="/posts/js/premiere-app-ember/#routes-et-controleurs-implicites" >article précédent</a>) 
et son gabarit, dans lequel on va copier l’ancien contenu de <code>series-item.hbs</code>.</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/index.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Series's first album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dl</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>scriptwriter<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{scriptwriter}} <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>illustrator<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{illustrator}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>publisher<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{publisher}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">p</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"summary"</span>&gt;</span>
      {{summary}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Le gabarit <code>series-item.hbs</code> est quant à lui modifié car il doit changer en fonction de la sous-route activée.
Et puisqu’on ne veut rien afficher de plus, son contenu se résume à un <code>{{outlet}}</code> :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series-item.hbs --&gt;</span>
{{outlet}}
</code></pre>
<p>Et voilà ! L’affichage de l’URL <code>/series/{@id}/</code> est inchangé alors que l’URL <code>/series/{@id}/edit</code> 
affiche désormais le formulaire d’édition.</p>
<h3 id="liens-entre-routes">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#liens-entre-routes">#</a>
      Liens entre routes
    </h3><p>Pour pouvoir plus facilement basculer en mode édition, on ajoute un lien vers la route correspondante grâce à <code>link-to</code> 
(cf. <a href="http://emberjs.com/guides/templates/links/" >doc officielle</a>).</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/index.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    {{#link-to 'series.seriesItem.edit' id class="edit"}}edit{{/link-to}}
    <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
    ...
</code></pre>
<p>On note que la route vers laquelle le lien pointe est préfixée par <code>series</code> parce qu’on a défini une route et non une resource.
En effet, une ressource réinitialise l’espace de nommage et permet donc des noms de routes plus courts. Pour pouvoir pointer vers <code>seriesItem.edit</code> on aurait donc dû
remplacer <code>this.route(&#39;seriesItem&#39;, ...</code> par <code>this.resource(&#39;seriesItem&#39;, ...</code>.</p>
<p>On peut désormais éditer notre série. On remarque au passage que la modification du titre de la série le met également à jour en temps réel dans la liste des séries grâce
au <em>binding</em> (cf. <a href="/posts/js/premiere-app-ember/#-em-bindings-em-et-mise-a-jour-des-gabarits" >article précédent</a>).</p>
<h3 id="enregistrement-des-modifications">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#enregistrement-des-modifications">#</a>
      Enregistrement des modifications
    </h3><p>Nous allons maintenant rendre opérationnels nos deux boutons d’édition <em>annuler</em> et <em>valider</em>. Pour cela, on commence par associer des actions à nos boutons :</p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item/edit.hbs` --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-details"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">submit</span>"}} <span class="hljs-attribute">class</span>=<span class="hljs-value">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reset"</span> {{<span class="hljs-attribute">action</span> "<span class="hljs-attribute">cancel</span>"}} <span class="hljs-attribute">class</span>=<span class="hljs-value">"cancel"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
...
</code></pre>
<p>Comme il s’agit de manipulations sur le modèle et de transitions entre routes, les actions correspondantes seront traitées par la route.</p>
<pre><code class="lang-js"><span class="hljs-comment">// app/routes/series/series-item/edit.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
  model: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem'</span>);
  },
  actions: {
    submit: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).save().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>);
      }.bind(<span class="hljs-keyword">this</span>));
    },

    cancel: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).rollback();
      <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>);
    }
  }
});
</code></pre>
<p>Quelques mots sur ces quelques lignes : </p>
<ul>
<li>Dans une <code>route</code>, le modèle courant est récupéré via <code>this.modelFor(&#39;nomRoute&#39;)</code>. Ici, on récupère explicitement le modèle chargé automatiquement 
(par convention) par la route mère <code>seriesItem</code>. Notez qu’on aurait pu omettre la récupération du modèle complètement car la route mère s’en occupe pour nous.</li>
<li>Une fois le modèle récupéré, on peut invoquer les méthodes apportées par <a href="https://github.com/emberjs/data" >Ember Data</a>.</li>
<li>Pour un <code>cancel</code>, on invoque <code>rollback()</code> : toutes les modifications effectuées sont annulées et le modèle est réinitialisé.</li>
<li>Pour un <code>submit</code>, on invoque un <code>save()</code> qui enregistre les modifications apportées au modèle dans le <em>magasin</em> 
(<a href="http://emberjs.com/api/data/classes/DS.Store.html" >Store</a>) d’<a href="https://github.com/emberjs/data" >Ember Data</a>.</li>
<li>Les opérations effectuées sur les modèles sont bien souvent asynchrones puisque, dans le cas nominal, elles font 
intervenir des API REST pour enregistrer ou mettre à jour les données depuis un serveur. Dans le cas où l’on souhaite
attendre la fin du traitement pour effectuer une action (comme ici dans le cas du <code>save</code>), il est nécessaire d’utiliser
les <em>promesses</em> (<code>promises</code>) qu’<a href="https://github.com/emberjs/data" >Ember Data</a> renvoie (<code>.then(...)</code>). Dans le cas contraire, le code serait
exécuté avant la fin du traitement et ne permettrait pas de proposer un retour utilisateur propre (gestion des cas d’erreurs notamment).</li>
<li>Les transitions entre routes sont possibles via <code>this.transitionTo(&#39;nomRoute&#39;)</code>.</li>
</ul>
<h3 id="actions-sur-les-transitions">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#actions-sur-les-transitions">#</a>
      Actions sur les transitions
    </h3><p>Mais je voudrais encore ajouter une dernière petite cerise sur ce gâteau : annuler automatiquement toutes les modifications effectuées
sur la série dès que l’on quitte la route. <a href="http://emberjs.com" >Ember</a> prévoit en effet des mécanismes avancés pour travailler sur les transitions entre 
routes (cf. <a href="http://emberjs.com/guides/routing/preventing-and-retrying-transitions/" >doc officielle</a>). En particulier <code>willTransition</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// app/routes/series/series-item/edit.js</span>
  actions: {
    ...
    willTransition: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.seriesItem.edit'</span>).rollback();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
  }
</code></pre>
<p>L’action est très simple ici mais on imagine facilement comment on pourrait ajouter une confirmation et déterminer, en fonction
de la réponse, si l’on doit continuer la transition ou l’abandonner.</p>
<h2 id="relations-avec-ember-data-ember-data">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#relations-avec-ember-data-ember-data">#</a>
      Relations avec <a href="https://github.com/emberjs/data" >Ember Data</a>
    </h2><p><a href="https://github.com/emberjs/data" >Ember Data</a> permet de définir des relations entre nos modèles. Ajoutons donc des albums à nos séries :</p>
<p>On définit d’abord une nouvelle entité <code>Album</code> et ses propriétés et on indique que cet album était associé à une série via la propriété <code>series</code> 
et à la méthode <code>DS.belongsTo</code> (cf. <a href="http://emberjs.com/api/data/#method_belongsTo" >doc officielle</a>). 
Ce qui se traduit plus loin, dans l’initialisation des données par <code>series: 1</code> où 1 est l’identifiant de la 
série en question.</p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/models/album.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">var</span> Album = DS.Model.extend({
  title               : DS.attr(<span class="hljs-string">'string'</span>),
  publicationDate     : DS.attr(<span class="hljs-string">'date'</span>),
  number              : DS.attr(<span class="hljs-string">'number'</span>),
  coverName           : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'default.jpg'</span>}),
  series              : DS.belongsTo(<span class="hljs-string">'seriesItem'</span>),
  coverUrl: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">'/assets/images/albums/covers/'</span> + <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'coverName'</span>);
  }.property(<span class="hljs-string">'coverName'</span>)
});

Album.reopenClass({
  FIXTURES: [{
    id: <span class="hljs-number">1</span>,
    title: <span class="hljs-string">'Somewhere Within the Shadows'</span>,
    publicationDate: <span class="hljs-string">'Nov 2000'</span>,
    number: <span class="hljs-number">1</span>,
    coverName: <span class="hljs-string">'blacksad-1.jpg'</span>,
    series: <span class="hljs-number">1</span>
  }, {
    id: <span class="hljs-number">2</span>,
    title: <span class="hljs-string">'Arctic-Nation'</span>,
    publicationDate: <span class="hljs-string">'Mar 2003'</span>,
    number: <span class="hljs-number">2</span>,
    coverName: <span class="hljs-string">'blacksad-2.jpg'</span>,
    series: <span class="hljs-number">1</span>
  }]
});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Album;
</code></pre>
<p>On modifie ensuite le modèle <code>SeriesItem</code> pour indiquer une relation inverse grâce à la propriété <code>albums</code> et à 
la méthode <code>DS.hasMany</code> (cf. <a href="http://emberjs.com/api/data/#method_hasMany" >doc officielle</a>) puis affecter la liste des 
identifiants des albums à la série via <code>albums: [1, 2]</code> : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/models/series-item.js</span>
<span class="hljs-keyword">import</span> DS <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data'</span>;

<span class="hljs-keyword">var</span> SeriesItem = DS.Model.extend({
    title               : DS.attr(<span class="hljs-string">'string'</span>, {defaultValue: <span class="hljs-string">'New Series'</span>}),
    ...
    albums              : DS.hasMany(<span class="hljs-string">'album'</span>, {<span class="hljs-keyword">async</span>: <span class="hljs-literal">true</span>})
});

SeriesItem.reopenClass({
    FIXTURES: [{
    id: <span class="hljs-number">1</span>,
    ...
    albums: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
    }, ...
]});

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> SeriesItem;
</code></pre>
<h2 id="insertion-d-un-gabarit">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#insertion-d-un-gabarit">#</a>
      Insertion d’un gabarit
    </h2><p>Maintenant qu’on a des albums pour nos séries, on serait bien intéressé de les voir s’afficher. Seulement voilà, on veut juste les
afficher à côté de la visualisation d’une série. On ne veut rien proposer d’autre pour ces albums que le <em>binding</em> des propriétés et
leur affichage. Pas besoin de route ou de contrôleur. On va pour cela utiliser un outil particulier permettant simplement
d’insérer (d’afficher) un gabarit au sein d’une route existante via le <em>helper</em> : <code>render</code> (cf. 
<a href="http://emberjs.com/guides/templates/rendering-with-helpers/#toc_the-code-view-code-helper" >doc officielle</a>).</p>
<p>On modifie donc le gabarit <code>/series/series-item.hbs</code> pour qu’à côté de la fiche d’une série soit affichée la liste de ses albums : </p>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series/series-item.hbs --&gt;</span>

{{outlet}}

<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-albums"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span>&gt;</span>
        {{#each album in albums}}
            {{render 'partials/albumItem' album}}
        {{/each}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/partials/album-item.hbs --&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"album"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">img</span> {{<span class="hljs-attribute">bind-attr</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"coverUrl"</span><span class="hljs-value">}}</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"Album cover"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"cover"</span>/&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"description"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>volume<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{number}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>date<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>{{publicationDate}}<span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
</code></pre>
<h2 id="creation-d-une-nouvelle-serie">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#creation-d-une-nouvelle-serie">#</a>
      Création d’une nouvelle série
    </h2><p>Histoire de terminer en beauté on va ajouter vite fait la création d’une série.</p>
<p>Comme on commence à avoir l’habitude, on fait ça en deux coups de cuillère à pot : </p>
<pre><code class="lang-js"><span class="hljs-comment">// /app/router.js</span>
Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.resource(<span class="hljs-string">'series'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'seriesItem'</span>, { path: <span class="hljs-string">'/:seriesItem_id'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>);
    });
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'create'</span>);
  });
});
</code></pre>
<pre><code class="lang-js"><span class="hljs-comment">// /app/routes/series/create.js</span>
<span class="hljs-keyword">import</span> Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Ember.Route.extend({
  model: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.createRecord(<span class="hljs-string">'seriesItem'</span>);
  },

  renderTemplate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">this</span>.render(<span class="hljs-string">'series.seriesItem.edit'</span>);
  },

  actions: {
    submit: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).save().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series.seriesItem'</span>, <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>));
      }.bind(<span class="hljs-keyword">this</span>));
    },

    cancel: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).rollback();
      <span class="hljs-keyword">this</span>.transitionTo(<span class="hljs-string">'series'</span>);
    },

    willTransition: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.modelFor(<span class="hljs-string">'series.create'</span>).rollback();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
  }
});
</code></pre>
<pre><code class="lang-html"><span class="hljs-comment">&lt;!-- /app/templates/series.hbs --&gt;</span>
    ...
      {{/each}}
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"series-item"</span>&gt;</span>
          {{#link-to 'series.create' class="add"}}add{{/link-to}}
        <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    ...
</code></pre>
<p>Les points importants à noter : </p>
<ul>
<li>Le modèle est, cette fois-ci, créé à l’activation de la route via <code>this.store.createRecord(...)</code>.</li>
<li>Comme on ne souhaite pas proposer de gabarit propre pour cette route, on utilise <code>renderTemplate</code> pour indiquer à <a href="http://emberjs.com" >Ember</a> quel
gabarit il doit utiliser. </li>
<li>Les actions <code>submit</code>, <code>cancel</code> et <code>willTransition</code> sont sensiblement les mêmes que pour l’édition mais travaillent sur un modèle différent et 
renvoient vers d’autres routes.</li>
<li>On note le passage du modèle lors de la transition en cas de <code>submit</code>.</li>
<li>Il serait légitime de se poser la question de réutilisation de code entre ces deux routes, compte tenu des similarités. Ce n’est pas l’objet 
de l’article mais pourrait être envisagé à l’aide d’un <code>mixin</code> partagé (cf. <a href="http://emberjs.com/api/classes/Ember.Mixin.html" >doc officielle</a>).  </li>
</ul>
<h2 id="conclusion">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/js/premiere-app-ember-suite/#conclusion">#</a>
      Conclusion
    </h2><p>Au travers de cet article et des précédents, j’espère vous avoir donné un aperçu du modèle de développement que propose
<a href="http://emberjs.com" >Ember</a>. Vous avez compris, j’espère, qu’<a href="http://emberjs.com" >Ember</a> est un véritable framework avec des opinions fortes et qu’il doit être pris comme
tel ou laissé de côté pour une solution plus légère selon vos besoins.</p>
<p>Mais j’ai également essayé d’aller plus en profondeur sur certains aspects et de montrer des cas d’utilisation concrets. 
Ce dernier article montre qu’il est également possible de fournir à <a href="http://emberjs.com" >Ember</a> 
des configurations explicites afin d’aller plus loin que les conventions par défaut.</p>
<p>Maintenant, vous n’avez plus d’excuses… Vous ne pourrez pas dire que vous ne connaissiez pas. </p>
<p><em>Note: les sources de l’application exemple sont <a href="https://github.com/bmeurant/ember-articles/tree/premiere-app-ember-suite" >disponibles sur github</a>.</em></p>
]]></description>
            <link>http://putaindecode.fr/posts/js/premiere-app-ember-suite/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/js/premiere-app-ember-suite/</guid>
            <pubDate>Tue, 09 Dec 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[L'injection de dépendances en PHP]]></title>
            <description><![CDATA[<p>Salutations ! Aujourd’hui, je suis venu te parler de PHP (sisi), et notamment du mécanisme d’injection de dépendances avec lequel tu n’es peut-être pas familier. Au menu, des objets, des usines et des conteneurs, alors enfile ton bonnet et tes gants, on va bouger du bordel !</p>
<h2 id="l-injection-de-dependances-c-est-quoi-ce-truc">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/php/injection-dependances/#l-injection-de-dependances-c-est-quoi-ce-truc">#</a>
      L’injection de dépendances ? C’est quoi ce truc ?
    </h2><p>Si tu fais de la programmation orientée objet, il est fort probable que ce terme ne te soit pas totalement inconnu. En PHP, on a principalement commencé à nous en rebattre les oreilles avec l’avènement de Symfony, qui est aujourd’hui le framework web majeur pour ce langage. Fabien Potencier, créateur et <em>lead developer</em> de Symfony, cite en exemple sur <a href="http://fabien.potencier.org/article/11/what-is-dependency-injection" >son blog</a> cette définition :</p>
<blockquote>
<p><em>Dependency Injection is where components are given their dependencies through their constructors, methods, or directly into fields.</em></p>
<p>Quelqu’un</p>
</blockquote>
<p>C’est clair, non ? Non ? Bon. Imaginons un bout d’appli PHP, où l’on désire gérer des personnes qui ont chacune une adresse postale. Si tu n’as pas trop dormi à la fac le vendredi matin après ta cuite du jeudi soir, tu devrais pouvoir déterminer tout seul qu’on va avoir besoin d’une classe <code>Person</code> et d’une classe <code>Address</code> :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$number</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$street</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$zipcode</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$city</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;number = <span class="hljs-variable">$number</span>;
        <span class="hljs-variable">$this</span>-&gt;street = <span class="hljs-variable">$street</span>;
        <span class="hljs-variable">$this</span>-&gt;zipcode = <span class="hljs-variable">$zipcode</span>;
        <span class="hljs-variable">$this</span>-&gt;city = <span class="hljs-variable">$city</span>;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;
}
</code></pre>
<p>Tu noteras que je n’ai pas encore écrit le constructeur de la classe <code>Person</code>. Justement. Le développeur naïf procédera de la façon suivante :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-keyword">new</span> Address(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>);
    }
}

<span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">5</span>, <span class="hljs-string">'Allée des Rosiers'</span>, <span class="hljs-number">78670</span>, <span class="hljs-string">'Villennes-sur-Seine'</span>);
</code></pre>
<p>Alors oui, hein, ça marche, et on peut instancier une personne et son adresse en une ligne de code. Le problème est qu’en procédant ainsi, les classes <code>Person</code> et <code>Address</code> deviennent <strong>étroitement couplées</strong> : la classe <code>Person</code> est inutilisable sans la classe <code>Address</code>, et pire, le code interne de la première serait impacté par un changement sur la seconde.</p>
<p>Pas convaincu ? Qu’est-ce qui se passera le jour où on lèvera 10 millions de dollars pour internationaliser l’appli ?</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span>
</span>{
    <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$country</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>)</span>
    </span>{
        <span class="hljs-comment">// ...</span>
        <span class="hljs-variable">$this</span>-&gt;country = <span class="hljs-variable">$country</span>;
    }
}
</code></pre>
<p>Ah bah mince, il faut aussi modifier le constructeur de la classe <code>Person</code> pour y ajouter le nouveau paramètre <code>$country</code> de manière symétrique. C’est ballot.</p>
<p>Dans l’idéal, la classe <code>Person</code> devrait se foutre royalement de la façon dont la classe <code>Address</code> fonctionne. Une personne a toujours besoin d’une adresse, mais ça n’implique certainement pas que ce soit le rôle de cette classe de la forger. Alors, on fait comment ? C’est très simple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Address <span class="hljs-variable">$address</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-variable">$address</span>;
    }
}
</code></pre>
<p>L’injection de dépendances, c’est précisément ça. Si une classe a besoin d’une instance d’une autre classe, que ce soit dans son constructeur ou dans une autre méthode (un <em>setter</em> par exemple), alors elle prend cette instance directement en paramètre et ne s’occupe certainement pas de l’instancier elle-même. Procéder ainsi permet d’écrire du code <strong>découplé</strong>, évitant toute interdépendance entre ses différents composants, ce qui les rend <strong>réutilisables</strong> sans devoir embarquer toute la smala au passage, mais également beaucoup plus <strong>maintenables</strong> puisque chaque classe s’occupe de ses fesses et pas de celles des autres. En PHP, on tire également parti du <em>type hinting</em> d’objets, qui permet de s’assurer d’emblée que notre paramètre est une instance de la classe voulue et non pas n’importe quoi.</p>
<p>Alors oui, je t’entends déjà grommeler :</p>
<blockquote>
<p>Ouais mais du coup je dois instancier une adresse moi-même à chaque fois que je crée une personne, c’est relou ton truc</p>
</blockquote>
<p>Si telle est ton opinion, <del>tu ne mérites pas de vivre</del> je t’invite à poursuivre la lecture de cet article avec l’entrain qui te caractérise.</p>
<h2 id="l-usine-a-la-rescousse">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/php/injection-dependances/#l-usine-a-la-rescousse">#</a>
      L’usine à la rescousse
    </h2><p>Je ne sais pas si tu sais, mais il existe un <em>design pattern</em> assez répandu en programmation orientée objet que l’on nomme <strong>factory</strong> (usine en français, d’où le titre pourrave de cette partie).</p>
<p>En gros, le principe est de créer une classe dont le rôle est d’instancier d’autres classes, précisément dans le cas où une telle tâche demande plusieurs lignes de code, afin justement d’éviter de répéter celles-ci. Pour reprendre notre exemple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>)</span>
    </span>{
        <span class="hljs-variable">$address</span> = <span class="hljs-keyword">new</span> Address(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$zipcode</span>, <span class="hljs-variable">$city</span>, <span class="hljs-variable">$country</span>);

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-variable">$address</span>);
    }
}
</code></pre>
<p>Pour le coup, tu te dis peut-être que je te prends allègrement pour un idiot : pourquoi se prendre le chou à créer une classe qui fait exactement ce qu’on faisait directement dans <code>Person</code> au départ ? Parce que tu n’as pas bien écouté, <del>petit c</del> jeune padawan. L’objectif en utilisant l’injection de dépendances, c’est que nos classes ne soient pas dépendantes (justement) les unes des autres si ce n’est pas justifié. Une personne a beau avoir besoin d’une adresse, on pourrait fort bien imaginer les utiliser l’une sans l’autre (tu comprendras à la partie suivante). Dans le cas de <code>PersonFactory</code>, notre objectif est justement de créer une personne à partir des différents composants d’une adresse en une ligne de code, pour conserver la simplicité du code métier qui te tient tant à coeur (et tu as bien raison, au fond). Seulement, <code>Person</code> et <code>Address</code> restent utilisables avec ou sans <code>PersonFactory</code> : l’objectif est atteint, petit navire.</p>
<p>Tant qu’on en est à se simplifier la vie :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getZipcodeFromDistrict</span><span class="hljs-params">(<span class="hljs-variable">$district</span>)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-number">75000</span> + <span class="hljs-variable">$district</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createParigot</span><span class="hljs-params">(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$district</span>)</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;createPerson(<span class="hljs-variable">$number</span>, <span class="hljs-variable">$street</span>, <span class="hljs-variable">$this</span>-&gt;getZipcodeFromDistrict(<span class="hljs-variable">$district</span>), <span class="hljs-string">'Paris'</span>, <span class="hljs-string">'France'</span>);
    }
}
</code></pre>
<p>Tu t’imagines faire ce genre de chose dans la classe <code>Person</code> ou la classe <code>Address</code> ? J’espère bien que non.</p>
<h2 id="oui-ca-sert-a-quelque-chose-une-interface">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/php/injection-dependances/#oui-ca-sert-a-quelque-chose-une-interface">#</a>
      Oui, ça sert à quelque chose une interface
    </h2><p>Dans tes souvenirs brumeux de vendredis matins étudiants (<em>cf. supra</em>), tu retrouveras peut-être des bribes de cours portant sur les <strong>interfaces</strong>. Si tout ce que tu as retenu, c’est qu’”une classe toute vide ça sert à rien”, lis donc ce qui va suivre.</p>
<p>Une interface, c’est avant tout un contrat. Une classe qui <strong>implémente</strong> une interface s’engage à implémenter toutes les méthodes que celle-ci déclare. Sans même lire le code de ladite classe, on sait donc d’emblée comment on peut jouer avec et comment elle est censée fonctionner.</p>
<p>Poursuivons encore sur notre exemple et imaginons qu’on doive gérer des adresses ne respectant pas le format utilisé jusqu’ici, par exemple une adresse plus basique constituée d’une unique chaîne de caractères :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAddress</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;
}
</code></pre>
<p>Dans l’état actuel des choses, on ne peut pas utiliser une instance de cette classe avec <code>Person</code>, puisque le constructeur de cette dernière attend une instance d’<code>Address</code>. Qu’à cela ne tienne !</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span></span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAddress</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$address</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;address;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AddressInterface</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;number.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;street.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;zipcode.<span class="hljs-string">' '</span>.<span class="hljs-variable">$this</span>-&gt;city.<span class="hljs-string">', '</span>.<span class="hljs-variable">$this</span>-&gt;country;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>
</span>{
    <span class="hljs-comment">// ...</span>

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(AddressInterface <span class="hljs-variable">$address</span>)</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;address = <span class="hljs-variable">$address</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAddress</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;address;
    }
}

<span class="hljs-variable">$address</span> = <span class="hljs-keyword">new</span> BasicAddress(<span class="hljs-string">'test test un deux un deux'</span>);
<span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-variable">$address</span>);

<span class="hljs-variable">$factory</span> = <span class="hljs-keyword">new</span> PersonFactory();
<span class="hljs-variable">$robert</span> = <span class="hljs-variable">$factory</span>-&gt;createParigot(<span class="hljs-number">1</span>, <span class="hljs-string">'Rue de la Paix'</span>, <span class="hljs-number">2</span>);

<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$person</span>-&gt;getAddress()-&gt;getFullAddress()); <span class="hljs-comment">// 'test test un deux un deux'</span>
<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$robert</span>-&gt;getAddress()-&gt;getFullAddress()); <span class="hljs-comment">// '1, rue de la Paix, 75002 Paris, France'</span>
</code></pre>
<p>Tu vois l’idée ? En demandant une instance de n’importe quelle classe implémentant <code>AddressInterface</code> au lieu d’une instance d’<code>Address</code> spécifiquement, on se donne plus de mou et on réduit encore davantage le couplage entre nos classes. Qu’on crée une personne avec une instance d’<code>Address</code> ou de <code>BasicAddress</code>, on pourra dans tous les cas obtenir l’adresse postale de ladite personne de la même façon.</p>
<h2 id="elle-contient-ta-fiancee-hein-mitch">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/php/injection-dependances/#elle-contient-ta-fiancee-hein-mitch">#</a>
      Elle contient ta fiancée, hein Mitch ?
    </h2><p>Tu auras peut-être tiqué sur un détail du dernier exemple : le fait de ne pas faire de <code>PersonFactory</code> une classe statique (beurk) nous oblige à l’instancier pour pouvoir l’utiliser ; ce qui, à n’en pas douter, t’aura mené à te dire “arf, ça va m’en faire des <code>new MachinFactory()</code> pour instancier mes objets”. Là encore, l’injection de dépendances peut nous aider, quoique de manière indirecte : en utilisant un conteneur d’injection de dépendances.</p>
<p>Un conteneur (ça sera plus court) peut <em>grosso modo</em> être comparé à une grosse <em>factory</em> capable d’instancier plusieurs classes. En pratique, afin d’éviter d’écrire et de devoir maintenir une classe monolithique, on en fera plutôt quelque chose qui fait appel aux différentes <em>factories</em>. Poursuivons sur notre exemple :</p>
<pre><code class="lang-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionContainer</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPersonFactory</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PersonFactory();
    }
}
</code></pre>
<p>Mais ça ne s’arrête évidemment pas là. De par le fait d’utiliser l’injection de dépendances à grande échelle, on a souvent besoin d’instancier nous-même les objets dont on a besoin. Dans certains cas, ce seront toujours les mêmes, ce qui vaut pour les <em>factories</em> mais pas que : pense aux différentes librairies qui composent un projet web, par exemple. Ce ne serait pas génial que les différentes instances de ces classes soient accessibles via le conteneur pour pouvoir y accéder à l’envi ?</p>
<pre><code class="lang-php"><span class="hljs-variable">$container</span> = <span class="hljs-keyword">new</span> DependencyInjectionContainer();

<span class="hljs-variable">$container</span>-&gt;getOrm()-&gt;performSomeNaughtyQuery();
<span class="hljs-variable">$container</span>-&gt;getTwig()-&gt;renderUglyTemplate();
<span class="hljs-variable">$container</span>-&gt;getTranslator()-&gt;translate(<span class="hljs-string">'Putain de code !'</span>);
</code></pre>
<p>Les objets ainsi gérés par un tel conteneur deviennent dès lors des <strong>services</strong> dans ton application.</p>
<blockquote>
<p>Mais ça signifie instancier un service à chaque appel ?</p>
</blockquote>
<p>Pas nécessairement ! Il existe des mécanismes permettant de conserver une même instance pour la servir lors des appels suivants. Cela sort un peu du cadre de cet article, mais je t’invite vivement à jeter un oeil à <a href="http://php-di.org/" >PHP-DI</a>, qui est un conteneur d’injection de dépendances très bien fichu que tu peux utiliser dans ton projet si tu le souhaites.</p>
<h2 id="epilogue">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/php/injection-dependances/#epilogue">#</a>
      Épilogue
    </h2><p>Si tu développes en PHP, j’espère t’avoir montré qu’il est possible d’écrire du code plus maintenable et plus élégant en utilisant l’injection de dépendances. Dans le cas contraire, sache que ce concept est très répandu dans les langages orientés objet d’une manière générale - après tout, <a href="https://docs.angularjs.org/guide/di" >on en retrouve même dans Angular</a>.</p>
<p>Bon code, et n’oublie pas, on ne met pas en prod le vendredi, c’est mal. Allez, file !</p>
]]></description>
            <link>http://putaindecode.fr/posts/php/injection-dependances/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/php/injection-dependances/</guid>
            <pubDate>Wed, 05 Nov 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Laissez-vous pousser la barbe, apprenez à écrire des Makefiles]]></title>
            <description><![CDATA[<p>À l’heure où tout le monde se rue sur des outils comme <a href="/posts/js/introduction-gulp/" >Gulp</a>,
<a href="/posts/js/premiers-pas-avec-grunt/" >Grunt</a> ou autres <a href="https://rubygems.org/gems/rake" >Rake</a>, certains irréductibles (dont je
fais partie) ont fait le choix d’employer un des outils les plus standards et
emblématiques dont tout développeur a entendu parler au moins une fois dans sa
vie : <em>Make</em>.</p>
<p>Si de prime abord on a l’impression d’un système assez archaïque (ce qui n’est
pas toujours forcément faux), on se rend rapidement compte que <em>Make</em>, couplé à
une petite dose de scripting shell permet rapidement de mettre en place un moyen
de compiler ses fichiers et de lancer des tâches.</p>
<p>Les fichiers de configuration de <em>Make</em> sont appellés <em>Makefiles</em> (oui, ce sont
eux qui ont donné leurs noms aux <code>(Gulp|Grunt|Rake)files</code>). Les instructions
qu’ils contiennent sont exécutées grâce à la commande <code>make</code> dans votre
terminal.</p>
<h1 id="hello-world">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#hello-world">#</a>
      Hello World
    </h1><p>Je vous propose de commencer en douceur par un classique <em>Hello World</em>. On va
simplement définir une tâche <code>hello-world</code> dont l’action va être d’afficher
<em>“Hello, world”</em> à l’écran (boooring).</p>
<pre><code class="lang-make">hello-world:
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>
</code></pre>
<p>Première remarque importante, les indentations dans un <em>Makefile</em> <strong>doivent</strong>
être faites avec des tabulations. Oui, je sais, c’est moche, on dirait du
Python, mais c’est comme ça.</p>
<p>Voilà le genre d’erreurs qu’on se prend si on met des espaces à la place des
tabulations :</p>
<pre><code>Makefile:2: <span class="hljs-keyword">*</span><span class="hljs-keyword">*</span><span class="hljs-keyword">*</span> séparateur manquant . Arrêt.
</code></pre><p>Pour exécuter notre commande, il nous suffit de lancer <code>make hello-world</code> dans
un terminal :</p>
<pre><code class="lang-console">$ <span class="hljs-keyword">make</span> hello-world
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello, world"</span>
Hello, world
</code></pre>
<p>Décortiquons un peu cette exécution. Pour chaque commande qu’il exécute, <em>Make</em>
affiche la commande complète avant d’afficher la sortie standard de ladite
commande. C’est souvent très pratique car toutes les variables (on va revenir là dessus)
qu’on met dans la commande sont résolues, et on voit clairement ce que <em>Make</em>
exécute. Par contre, dans certains cas on s’en fout un peu, on peut alors
préfixer la ligne à rendre silencieuse par un <code>@</code>, comme ça :</p>
<pre><code class="lang-make">hello-world:
    @ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>make hello-world
<span class="hljs-constant">Hello,</span> world
</code></pre>
<h1 id="regles-cibles-recettes-et-pre-requis">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#regles-cibles-recettes-et-pre-requis">#</a>
      Règles, cibles, recettes et pré-requis
    </h1><p>OK, jusque là c’est génial, on a un super outil pour lancer des commandes qu’on
pourrait déjà stocker dans un bête script shell. Pas super utile finalement.</p>
<p>Bon, on va corser un peu les choses et commencer par définir un peu de
terminologie avant que vous soyez totalement largués.</p>
<p>Un <em>Makefile</em> est une collection de <strong>règles</strong>, chacune étant composée d’une
<strong>cible</strong>, de <strong>pré-requis</strong> (ou pas) et d’une <strong>recette</strong>. Dans notre exemple
précédent, <code>hello-world</code> est la cible et <code>@ echo &quot;Hello, world&quot;</code> est la recette
de la règle. Elle ne spécifie par contre pas de pré-requis.</p>
<p>Relisez trois ou quatre fois le paragraphe précédent jusqu’à ce que ce soit bien
imprimé.</p>
<p>Vous l’aurez compris, on invoque une règle depuis la ligne de commande en
spécifiant le nom de sa cible après la commande <code>make</code>. Si on ne précise rien,
c’est la première règle trouvée qui est exécutée (donc dans notre cas,
<code>hello-world</code>).</p>
<p>Les pré-requis sont déclarés après la cible. On pourrait par exemple ajouter un
<code>sauter-une-ligne</code> comme pré-requis à notre cible <code>hello-world</code> :</p>
<pre><code class="lang-make">hello-world: sauter-une-ligne
    @ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Hello, world"</span>

sauter-une-ligne:
    @ <span class="hljs-built_in">echo</span>
</code></pre>
<pre><code class="lang-console"><span class="hljs-variable">$ </span>make hello-world

<span class="hljs-constant">Hello,</span> world
</code></pre>
<p>Facile, non ? Ok alors on peut <em>vraiment</em> attaquer les choses sérieuses.</p>
<h1 id="construire-des-fichiers">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#construire-des-fichiers">#</a>
      Construire des fichiers
    </h1><p>Les pré-requis sont particulièrement pratiques quand on veut construire un
fichier depuis un autre, ce qui est la principale action d’à peu près tout
processus de compilation (paraît même que c’est grosso modo la définition de la
compilation).</p>
<p>On peut par exemple écrire un <em>Makefile</em> nous permettant de compiler un fichier
<em>Markdown</em> en <em>HTML</em> :</p>
<pre><code class="lang-make"><span class="hljs-tag">article</span><span class="hljs-class">.html</span>: <span class="hljs-tag">article</span><span class="hljs-class">.md</span>
    marked <span class="hljs-tag">article</span><span class="hljs-class">.html</span> &gt; <span class="hljs-tag">article</span>.md
</code></pre>
<p>Cette règle spécifie simplement que pour construire le fichier <code>article.html</code>
j’ai besoin du fichier <code>article.md</code> et que j’utilise la commande
<a href="https://www.npmjs.org/package/marked" ><code>marked</code></a> pour construire le fichier. Essayez, vous verrez, c’est
magique.</p>
<p>Là où ça devient intéressant, c’est que si je lance de nouveau <code>make
article.html</code>, rien ne se passe. Eh oui, <em>Make</em> vérifie les dates de
modification des pré-requis et les compare avec la date de modification de la
cible pour savoir s’il doit où non reconstruire la cible.</p>
<p>On peut bien sûr aller plus loin en ayant des fichiers qui dépendent de
fichiers, qui à leur tour dépendent de fichiers, …</p>
<p><a name="ref-phony-target"></a></p>
<p>On peut aussi avoir une cible factice qui ne représente pas un fichier et qui
elle-même dépend de plusieurs fichiers (<code>website: index.html apropos.html
contact.html</code>).</p>
<h1 id="variables-et-substitutions">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#variables-et-substitutions">#</a>
      Variables et substitutions
    </h1><p>La syntaxe des variables dans un <em>Makefile</em> ressemblent beaucoup aux variables
de votre Shell, <em>mais pas tout à fait</em>.</p>
<pre><code class="lang-make">SOURCE = <span class="hljs-keyword">index</span>.md
DESTINATION = <span class="hljs-keyword">index</span>.html

<span class="hljs-variable">${DESTINATION}</span>: <span class="hljs-variable">${SOURCE}</span>
  marked <span class="hljs-variable">${SOURCE}</span> &gt; <span class="hljs-variable">${DESTINATION}</span>
</code></pre>
<p>On peut aussi utiliser une substitution pour s’éviter de tout retaper. La
syntaxe pour ça est assez simple et se passe d’explications :</p>
<pre><code class="lang-make"><span class="hljs-variable">SOURCE =</span> index.md
<span class="hljs-variable">DESTINATION =</span> ${SOURCE:.<span class="hljs-variable">md=</span>.html}
</code></pre>
<p>Là où ça devient beaucoup plus intéressant c’est qu’on peut stocker des listes
dans une variable. Pour ça, pas vraiment d’effort à faire, il suffit de rajouter
des noms à la suite :</p>
<pre><code class="lang-make">SOURCE = index.<span class="hljs-built_in">md</span> article.<span class="hljs-built_in">md</span>
DESTINATION = ${SOURCE:.<span class="hljs-built_in">md</span>=.html}
</code></pre>
<p>Attention par contre ! En faisant ça si vous utilisez <code>${SOURCE}</code> comme cible
d’une règle, vous allez définir plusieurs règles d’un coup, ce qui n’est peut
être pas ce que vous voulez.</p>
<p>On peut contourner ça assez simplement en utilisant une substitution au niveau
de la règle. La syntaxe est un poil différente :</p>
<pre><code class="lang-make"><span class="hljs-preprocessor">%</span>.html: <span class="hljs-preprocessor">%</span>.md
  [...]
</code></pre>
<p>Vous l’aurez compris, <code>%</code> est identique dans la cible et dans la dépendance,
donc avec cette règle si vous faites un <code>make index.html</code>, <em>Make</em> va tenter de
construire la dépendance <code>index.md</code> avant tout.</p>
<p>Un problème se pose à nous avec cette syntaxe : « Bah merde, comment je récupère
les noms de fichiers là ? »</p>
<h1 id="variables-speciales">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#variables-speciales">#</a>
      Variables spéciales
    </h1><p>Superbe transition étant donné qu’on va parler ici de quelques variables
spéciales bien pratiques !</p>
<ul>
<li><code>$@</code> contient le nom de la cible de la règle en cours d’exécution ;</li>
<li><code>$^</code> contient la liste des dépendances de la règle (la flèche pointe vers la
liste de dépendances) ;</li>
<li><code>$&lt;</code> contient la première dépendance de la règle (la flèche pointe à gauche,
là où est la dépendance).</li>
</ul>
<p>À l’aide de celles-ci on peut du coup compléter notre exemple précédent :</p>
<pre><code class="lang-make"><span class="hljs-variable">%.</span>html: <span class="hljs-variable">%.</span>md
  marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>
  [...]
</code></pre>
<h1 id="fonctions">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#fonctions">#</a>
      Fonctions
    </h1><p>Pour faciliter quelques opérations, <em>Make</em> fournit un ensemble de fonctions de
base. Appeler ces fonctions rappelle un peu la façon dont on lance une commande
dans un sous-shell en Bash : <code>$(fonction argument1 argument2)</code>.</p>
<p>Voici une petite démonstration de <code>wildcard</code>, <code>addsuffix</code> et <code>basename</code> dont
vous vous doutez sans doute les effets :</p>
<pre><code class="lang-make">SOURCES = <span class="hljs-variable">$(</span>wildcard <span class="hljs-variable">*.</span>md)
DESTINATIONS = <span class="hljs-variable">$(</span>addsuffix .html,<span class="hljs-variable">$(</span><span class="hljs-keyword">basename</span> <span class="hljs-variable">${SOURCES}</span>))

all: <span class="hljs-variable">${DESTINATIONS}</span>

<span class="hljs-variable">%.</span>html: <span class="hljs-variable">%.</span>md
  marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>
</code></pre>
<p>L’exemple construit dynamiquement la liste des fichiers HTML à produire à partir
de la liste des fichiers <em>Markdown</em> disponibles puis définit une règle <code>all</code>
permettant de tout construire d’un coup, et une règle définissant compiler
unitairement un fichier <em>Markdown</em> vers HTML.</p>
<p>Vous noterez qu’<code>addsuffix</code>/<code>basename</code> peut être remplacé par une substitution
simple comme on a vu précédemment.</p>
<p>Je vous invite à fouiller
<a href="https://www.gnu.org/software/make/manual/make.html#Functions" >le chapitre sur les fonctions du manuel</a>.</p>
<h1 id="la-cible-phony">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#la-cible-phony">#</a>
      La cible <code>.PHONY</code>
    </h1><p>Dans certains cas la cible d’une règle ne représente pas un fichier (c’était le
cas de notre cible <code>website</code> <a href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#ref-phony-target" >un peu plus haut</a>).</p>
<p>Dans ces cas-là, on va vouloir exécuter la règle quoi qu’il arrive, comme si la
cible était tout le temps périmée.</p>
<p>Une cible particulière existe pour ça : <code>.PHONY</code>. Toutes les dépendances de
cette cible seront marquées comme (traduction pourrie) imposteurs (<em>phony</em>
donc).</p>
<p>Pour reprendre l’exemple précédent, on déclarera donc :</p>
<pre><code class="lang-make"><span class="hljs-class">.PHONY</span>: website

website: index<span class="hljs-class">.html</span> apropos<span class="hljs-class">.html</span> contact<span class="hljs-class">.html</span>
  [...]
</code></pre>
<p>Désormais, chaque appel à <code>make website</code> tentera de construire les dépendances
et exécutera les commandes de la recette de la règle.</p>
<h1 id="un-exemple-complet">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#un-exemple-complet">#</a>
      Un exemple complet
    </h1><p>L’exemple suivant permet de compiler un site Web depuis un ensemble de fichiers
<em>Markdown</em>.</p>
<pre><code class="lang-make"><span class="hljs-constant">SOURCES</span> = <span class="hljs-variable">$(</span>wildcard src/*.md)
<span class="hljs-constant">DESTINATIONS</span> = <span class="hljs-variable">${</span><span class="hljs-constant">SOURCES</span><span class="hljs-symbol">:src/%</span>.md=build/%.html}

<span class="hljs-symbol">all:</span> <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>}

<span class="hljs-symbol">info:</span>
    @ echo <span class="hljs-constant">Will</span> build <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>} from <span class="hljs-variable">${</span><span class="hljs-constant">SOURCES</span>}

<span class="hljs-symbol">clean:</span>
    rm -f <span class="hljs-variable">${</span><span class="hljs-constant">DESTINATIONS</span>}

build/%.<span class="hljs-symbol">html:</span> src/%.md
    mkdir -p build
    marked <span class="hljs-variable">$&lt;</span> &gt; <span class="hljs-variable">$@</span>

.<span class="hljs-constant">PHONY</span><span class="hljs-symbol">:</span> all info clean
</code></pre>
<p>Vous noterez que comme on stocke nos résultats dans le dossier <code>build</code>, il faut
potentiellement le créer quand on compile un fichier dedans.</p>
<h1 id="pour-aller-plus-loin">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/shell/apprendre-les-makefiles/#pour-aller-plus-loin">#</a>
      Pour aller plus loin
    </h1><p>Il existe bien d’autres fonctionnalités dans <em>Make</em> (du moins dans <em>GNU Make</em>),
avec notamment :</p>
<ul>
<li>Les <a href="https://www.gnu.org/software/make/manual/make.html#Canned-Recipes" ><em>canned recipes</em></a> (recettes en boîte), permettant de
définir un bout de règle réutilisable à plusieurs endroits.</li>
<li>Des <a href="https://www.gnu.org/software/make/manual/make.html#Functions" >expressions conditionnelles</a> pour avoir des tests
dans votre <em>Makefile</em> et effectuer des traitements différents selon
l’environnement.</li>
<li>Les <a href="https://www.gnu.org/software/make/manual/make.html##Prerequisite-Types" >règles en <em>order only</em></a> qui permettent d’indiquer une
dépendance dont la date de modification ne doit pas être prise en compte (on
peut s’en servir pour éviter le <code>mkdir</code> dans l’exemple complet).</li>
<li>Et <a href="https://www.gnu.org/software/make/manual/make.html#Functions" >plein d’autres fonctions</a> bien pratiques !</li>
</ul>
<p>Je vous invite aussi à jeter un coup d’œil au <a href="https://github.com/madx/veil/" ><em>Makefile</em> de Veil</a>, un outil que
j’utilise pour générer des sites statiques à partir de fichiers <em>Markdown</em>
(ah bah tiens, comme dans mes exemples, c’est rigolo). Il y a plein de
fonctionnalités de <em>Make</em> utilisées dans ce projet et je pense que ça peut être
source d’idées.</p>
<p>Voilà pour cette premier introduction à <em>Make</em>, j’espère que ça vous a plu et
que vous êtes fin prêts à affronter tous ces bouseux avec leur système de build
à base de streams, de brocolis et autres râteaux.</p>
]]></description>
            <link>http://putaindecode.fr/posts/shell/apprendre-les-makefiles/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/shell/apprendre-les-makefiles/</guid>
            <pubDate>Mon, 03 Nov 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[L'auto-entrepreneuriat : retour d'expériences]]></title>
            <description><![CDATA[<p>L’auto-entreprenariat, voilà la belle idée. Un statut facile qui permet à n’importe qui de créer sa propre entreprise. Une belle opportunité pour se lancer facilement et sans trop de risque à l’indépendance.</p>
<p>Chômeur ? Cela vous permet de créer votre propre travail et de toucher tout de même vos aides sociales (en soustrayant certes vos gains).</p>
<p>En CDI ? Cela permet de vous aventurer en dehors de votre travail principal sur des tâches que vous n’avez pas forcément l’occasion de faire comme gérer un client, effectuer des factures, échanger avec l’administration (ah quel plaisir, ça).</p>
<p>Étudiant(e) ? Cela peut sérieusement vous aider à financer (malheureusement ?) vos études ou à être plus indépendant(e) de vos parents.</p>
<p>Tant de raisons qui peuvent vous pousser à vous ouvrir à l’auto-entreprise. Et pour ça, <a href="http://kud.io/" >_kud</a> et <a href="http://moox.io/" >MoOx</a> ont vécu cette expérience et vous proposent de répondre à quelques questions pour vous faire une petite idée.</p>
<h2 id="pourquoi-avez-vous-cree-votre-entreprise">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#pourquoi-avez-vous-cree-votre-entreprise">#</a>
      Pourquoi avez-vous créé votre entreprise ?
    </h2><h5 id="_kud">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud">#</a>
      <strong>_kud</strong>
    </h5><p>Étant déjà en CDI et étant souvent sollicité pour créer des petits sites à droite à gauche, je voulais m’initier à plusieurs choses comme la création d’entreprise, l’indépendance, me confronter à l’administration et surtout gérer un client.</p>
<p>Et puis bon, cela me permettait aussi d’avoir un petit bonus non désagréable en fin de mois.</p>
<h5 id="moox">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox">#</a>
      <strong>MoOx</strong>
    </h5><p><em>Travailler plus pour gagner plus</em>, au départ ça devait être pour cette raison. Je n’avais pas de quoi frimer à la sortie de l’école, et je pouvais encore moins me payer de la blanche. Il me fallait donc une solution (rires). Plus sérieusement, dans le fond, tout comme Erwann, j’avais sûrement envie de tester un modèle plus indépendant que le CDI, en attendant que <a href="http://revenudebase.info/comprendre-le-revenu-de-base/" >le revenu de base</a> vienne bien démolir le modèle actuel.</p>
<h2 id="comment-s-inscrire">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#comment-s-inscrire">#</a>
      Comment s’inscrire ?
    </h2><p>C’est relativement simple. Il faut aller sur le <a href="http://www.lautoentrepreneur.fr/" >site de l’auto-entrepreneur</a> et remplir le formulaire.</p>
<h5 id="_kud-2">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud-2">#</a>
      <strong>_kud</strong>
    </h5><p>En ce qui me concerne, j’ai choisi “Prestations de services informatiques”, ce qui me permettait d’être plutôt libre sur mes actions :</p>
<ul>
<li>donner des cours d’informatique ;</li>
<li>créer des sites web ;</li>
<li>faire de la réparation (même si ce n’est pas vraiment un cas que je souhaitais envisager).</li>
</ul>
<h5 id="moox-2">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox-2">#</a>
      <strong>MoOx</strong>
    </h5><p>Dans la pratique, l’inscription peut en effet être très rapide. Cela dit, je me rappelle m’être pris la tête avec le choix des mutuelles (choix qui, si tu as déjà un CDI, ne sert pas vraiment à grand-chose à ce que j’ai fini par comprendre).
Pour ce qui est du code, j’avais pris “Programmation informatique” (6201Z)  car je ne regardais pas vraiment plus loin que le bout de mon nez à l’époque (2010). Après, on n’ira pas vous ennuyer avec ça, je pense.</p>
<h2 id="qu-avez-vous-fait-avec">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#qu-avez-vous-fait-avec">#</a>
      Qu’avez vous fait avec ?
    </h2><h5 id="_kud-3">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud-3">#</a>
      <strong>_kud</strong>
    </h5><p>C’est une bonne question.</p>
<p>J’ai passé quelques soirées et week-end à faire des sites en urgence, chose pas forcément agréable car peu d’apprentissage côté technologie… Mais par contre gérer le client était très passionnant.</p>
<p>J’ai aussi, à ma surprise, réussi à donner des cours. Deux fois. Une fois une semaine avec des licences sur le thème de la création de sites mobiles en <em>single page</em> avec du <a href="http://backbonejs.org/" >backbone.js</a> entre autres. Une autre fois à des gens en reconversion. Le but était de leur apprendre à créer leur propre site web (statique) ainsi qu’à comprendre (brièvement) comment marchaient Internet et le Web. J’ai tout bonnement <strong>adoré</strong>.</p>
<p>(Je sens que MoOx va encore dire “pareil qu’Erwann”…)</p>
<h5 id="moox-3">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox-3">#</a>
      <strong>MoOx</strong>
    </h5><p>Pareil qu’Erwann (<strong>_kud</strong>: <em>bingo</em>), au début c’était forfait soir et week-end de temps en temps. J’ai pris quelques petits projets sur mesure ou “du WordPress pour manger” (2 fois seulement je le jure).
Ensuite ça m’a fatigué mine de rien, puis j’avais d’autres priorités même si mon seul salaire en CDI pour nourrir 2 bouches était juste. J’ai donc arrêté un moment, sans pour autant fermer l’AE (étant donné qu’au début, 0 CA = 0 charge).
Mais c’est là où mon expérience avec l’AE est intéressante. J’ai laissé dormir le truc.</p>
<p>Puis par la suite, <a href="http://viserlalune.com/blog/et-si-le-cdi-etait-une-connerie/" >le CDI étant ce qu’il est</a> avec ses bons et surtout ses mauvais côtés, un jour après que le projet sur lequel j’ai été embauché soit jeté à la poubelle et que je doive me rabattre sur d’autres tâches qui ne m’amusaient plus du tout, j’ai décidé de démissionner.
Mais bon, c’était une situation un peu tendue, car je n’avais rien en plan B. Qui dit démission, dit “démerde-toi”. Et à Toulouse, des boulots intéressants dans le web, si tu veux faire autre chose que du PHP, c’est un peu tendu du <code>string</code>.</p>
<p>En cherchant, j’ai découvert un truc sympa : la <a href="http://travail-emploi.gouv.fr/informations-pratiques,89/les-fiches-pratiques-du-droit-du,91/rupture-conventionnelle-du-contrat,1208/la-rupture-conventionnelle-du,8383.html" >rupture conventionnelle</a>.
Pour faire simple, c’est une démission à l’amiable avec ton patron. Il faut son accord et tout le tralala administratif, mais à partir du moment où tu es en bons termes avec ton patron (et s’il n’est pas assez stupide pour dire des choses du genre “si tu veux te barrer, barre-toi, je ne lâcherai pas un sou”), c’est une façon de partir et d’avoir droit aux indemnités chômage (pour peu que tu aies assez cotisé, bien entendu).
Avec cette solution, je pouvais partir, en sachant que mes cotisations pour Pôle Emploi n’étaient pas inutiles.
Clairement, mon but n’était pas de vivre de ça (avec même pas 60 % de mon salaire qui était déjà juste, je vous laisse imaginer la misère) mais c’était plus d’avoir un parachute, pour éviter d’aller pleurer à papa et maman pour pouvoir payer le loyer et le crédit de mon A3 (sans quoi j’aurais été forcé de ne manger que des pâtes achetées par sachet de 20 kg). Blague à part, je partais en ayant une botte de paille en bas de ma chute, histoire de pas me casser toutes les côtes si je ne trouvais rien où m’accrocher au passage.</p>
<p>Je me lance donc dans une recherche effrénée, principalement pour du télétravail (car ça marchait pour moi depuis un moment, même si en France faut s’accrocher pour trouver des entreprises ouvertes à ce mode de travail). Et cette fois-ci (car je démissionnais souvent, par ennui :/), j’ai eu du mal à trouver chaussure à mon pied. Beaucoup de mal. Et j’étais mal.
Mais c’était sans compter que l’Internet, c’est un réseau mondial. Avec un peu de bonne volonté, j’avais trouvé de quoi bénéficier d’une visibilité mondiale (no shit). Une fois via <a href="http://gun.io" >gun.io</a> et une fois via Twitter (pour trouver du boulot en fait c’est pas mal, via quelques tweets et retweets). Finalement, j’ai rapidement pu bosser pour des entreprises situées aux USA (no shit²).</p>
<p>Le fait de ne pas avoir fermé l’AE a simplifié beaucoup de choses : je pouvais faire des factures là, de suite. Puis aux États-Unis, ça ne rigole pas, ça ne paye pas comme en France à 30 ou 45 jours, ça payait tous les 15 jours, le jour où tu envoies la facture. BONHEUR.</p>
<p>Bon, par contre attention, quand tu bosses avec des gens qui considèrent bien ton travail, et qui te mettent sur un piédestal (tu es en position de force cher développeur, je te laisse à l’étymologie du nom de métier) plutôt que de te prendre pour la dernière roue du carrosse, tu vas vite dépasser le plafond imposé par l’AE (no shit³).
<a href="https://gist.github.com/tibastral/8301072" >Et il n’y a pas que mon expérience qui vous le dira</a>.</p>
<p>Pour l’anecdote, je n’ai demandé les indemnités de chômage que deux mois seulement sur près d’un an en situation freestyle (avant que je change pour un vrai statut).</p>
<p>Du coup, pour moi l’AE aura été une bonne transition entre CDI, situation précaire et ma situation actuelle de freelance. J’ai bien entendu changé rapidement de statut depuis (pour passer simplement à l’AE Level 2, l’<a href="http://www.apce.com/pid1628/l-entreprise-individuelle.html?espace=1&amp;tp=1" >entreprise individuelle</a>.</p>
<h2 id="que-deviez-vous-declarer">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#que-deviez-vous-declarer">#</a>
      Que deviez-vous déclarer ?
    </h2><p>Oui, parce que c’est bien beau tout ça mais qui dit statut administratif dit déclaration.</p>
<h5 id="_kud-4">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud-4">#</a>
      <strong>_kud</strong>
    </h5><p>Tous les trimestres, je me devais de <a href="http://www.net-entreprises.fr/" >déclarer</a> ce que je facturais à mes clients et je payais directement mes impôts via le versement libératoire.</p>
<p>Bon, je vous avoue que j’ai mis du temps à comprendre où je devais déclarer car vous avez trois champs à remplir, et quand vous ne comprenez rien au charabia administratif, c’est pas super facile.</p>
<p>Bref, une fois que vous avez déclaré vos revenus, un impôt se calcule automatiquement et vous êtes débité(e) à la date indiquée.</p>
<p>Plutôt simple dans l’idée.</p>
<h5 id="moox-4">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox-4">#</a>
      <strong>MoOx</strong>
    </h5><p>J’avais choisi aussi le versement libératoire, même constat. Il ne faut pas hésiter à prendre le téléphone pour obtenir une réponse pertinente au plus vite sans perdre de temps. Se rendre sur place dans le lieu adéquat est encore une meilleure idée pour être sûr de ne pas se tromper.</p>
<h2 id="avez-vous-eu-des-surprises">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#avez-vous-eu-des-surprises">#</a>
      Avez-vous eu des surprises ?
    </h2><h5 id="_kud-5">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud-5">#</a>
      <strong>_kud</strong>
    </h5><p>Tout d’abord, ce qui est quelque peu déstabilisant, c’est la quantité de courriers reçus. Prévoyances, mutuelles, maaaaaass papiers. En fait, c’est pas tant la quantité qui déstabilise, ce sont plutôt les propos. “Vous avez créé une entreprise, c’est bien. Savez-vous que vous êtes dans l’obligation de souscrire à une mutuelle/prévoyance ?!”.</p>
<p>Si vous n’êtes pas un tant soit peu renseigné(e), vous tomberez dans le piège et vous souscrirez à des choses dont vous n’avez pas du tout besoin.</p>
<p>En effet, lorsque vous vous inscrivez à l’URSSAF, celle-ci met par la suite à disposition son fichier d’entreprises à différents organismes et ces derniers n’hésitent pas à vous mettre le grappin dessus afin que vous souscriviez à leurs formules pour qu’ils se fassent de la thune. Oui, car quand vous avez une entreprise, vous avez la plupart du temps des employés et dans ce cas, vous devez souscrire à certaines obligations pour couvrir vos employés. Sauf que ce que ne précise pas l’URSSAF dans son fichier, c’est que vous êtes une entreprise d’auto-entrepreneur, et ça, ça change tout. Ouaip, vu que vous n’avez pas d’employé(e), vous avez un statut différent des autres boîtes et il n’est pas du tout question de souscrire à quoi que ce soit. Surtout des mutuelles ou prévoyances qui couvrent des employés inexistants. Vous avez tout à fait le droit de souscrire à une mutuelle pour vous mais nullement pour votre entreprise.</p>
<p>Pour ma part, une fois que j’eus compris ceci, j’ai tout jeté à la poubelle. :) (bande de vautours va).</p>
<p>Passons à un autre domaine en terme de surprise : l’impôt sur votre revenu d’auto-entrepreneur.</p>
<p>Moi qui pensais être tranquille en payant directement par versement libératoire, foutaise !</p>
<p>Alors oui, vous payez vos impôts directement dès que vous déclarez ce que vous avez facturé. Ça, okay.</p>
<p>Cependant, la chose que je n’avais pas calculée et dont personne ne m’avait prévenu : il n’est pas du tout pareil d’être auto-entrepreneur sans et avec un travail à côté.</p>
<p>Certes, on vous demandera de déclarer vos revenus annexes sur les impôts sur le revenu seulement <strong>à titre informatif</strong>. Oui, vous ne paierez pas d’impôts dessus en plus. Mais par contre cela fera augmenter votre quotient familial.</p>
<p>Explication. Si vous étiez de base à 10 % sur le revenu en impôts sur votre CDI, le fait que vous soyez en auto-entrepreneur et que vous gagniez de l’argent fait que votre quotient familial sera plus important et donc vous augmenterez le taux d’imposition sur votre CDI qui sera par exemple à 13,5 %, au lieu de 10 % initiaux. Ce qui ne vous fera finalement pas un impôt à 23,5 % sur votre activité d’AE (que vous payez directement chaque trimestre) mais plutôt 30 % du fait d’avoir un travail à côté.</p>
<p>C’est tout à fait normal me direz-vous vu qu’il doit bien y avoir une différence entre une personne qui n’a que l’AE et une personne ayant déjà un job. Mais c’est juste que ce n’était pas du tout prévu dans mes calculs et en connaissance de cause, j’aurais sûrement augmenté mes tarifs AE.</p>
<h5 id="moox-5">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox-5">#</a>
      <strong>MoOx</strong>
    </h5><p>Ce qui m’a le plus surpris aussi c’est l’impression de me transformer en fichier vendu : je me suis aussi retrouvé à recevoir plein de courriers d’entreprise en tout sens. C’est d’un pénible…</p>
<p>J’avais choisi aussi le versement libératoire, et mon faible revenu pour 2 parts à l’époque n’avait pas eu d’impact puisque je ne payais même pas d’impôts.</p>
<h2 id="si-vous-l-avez-arrete-pourquoi">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#si-vous-l-avez-arrete-pourquoi">#</a>
      Si vous l’avez arrêté, pourquoi ?
    </h2><h5 id="_kud-6">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#_kud-6">#</a>
      <strong>_kud</strong>
    </h5><p>Je n’avais plus assez de temps pour moi. Les démarches m’ont un peu saoulé (même s’il y en avait vraiment pas beaucoup mais devoir constamment déclarer même si vous êtes à 0 € sous peine d’avoir une amende, ça fait chier).</p>
<p>Je n’ai pas non plus apprécié voir mon taux d’impôts sur le revenu augmenter, c’était pas ce qui était “vendu” lorsque ce statut m’a été présenté.</p>
<p>Et puis, je risquais de payer <a href="http://vosdroits.service-public.fr/professionnels-entreprises/F23547.xhtml" >la taxe CFE</a> d’ici l’année prochaine. Chose d’ailleurs qui n’est toujours pas claire d’après ce que je peux lire sur Internet : les AE ne savent toujours pas si la CFE va devoir être payée ou non.</p>
<p>J’ai surtout constaté que je souhaitais avant tout donner des cours et à ce sujet, on m’a proposé une offre plus avantageuse que le statut d’AE, donc…</p>
<h5 id="moox-6">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#moox-6">#</a>
      <strong>MoOx</strong>
    </h5><p>Comme indiqué plus tôt, j’ai été limité par le plafond, j’ai donc passé la vitesse supérieure via une EI !</p>
<h2 id="comment-arreter">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#comment-arreter">#</a>
      Comment arrêter
    </h2><p>Aller sur le site de l’<a href="https://www.cfe.urssaf.fr/autoentrepreneur/CFE_Bienvenue" >AE</a> puis cliquer sur “Cesser définitivement votre activité” tout en bas. Un formulaire vous sera proposé où vous rentrerez vos informations puis il vous sera demandé de l’imprimer. Signez-le et envoyez-le à l’adresse uniquement (avec accusé de réception vivement conseillé).</p>
<p>Vous recevrez dans les jours suivants un courrier de l’URSSAF vous indiquant que vous avez bien été radié(e).</p>
<p>Oh et vous recevrez aussi du courrier de mutuelles ou prévoyances, comme d’habitude, à jeter. Du début à la fin, ils vous feront chier.</p>
<h2 id="conclusion">
      <a class="putainde-Title-anchor" href="http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/#conclusion">#</a>
      Conclusion
    </h2><p>L’AE reste un très bon moyen de s’initier au freelance, à la création d’entreprise sans trop de risque. Les démarches sont plutôt simples, vous n’avez pas besoin de comptable, et l’impôt est de l’ordre de 23 % à 35 % en fonction de votre situation professionnelle initiale, ce qui est tout reste tout de même bien moins important que freelance ou une “vraie” entreprise.</p>
<p>N’hésitez pas à vous en servir pour sortir de votre zone de confort !</p>
<p>Dans tous les cas, si vous souhaitez en savoir plus, n’hésitez pas à aller sur <a href="http://www.economie.gouv.fr/cedef/auto-entrepreneur" >le site du gouvernement</a>.</p>
]]></description>
            <link>http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/</link>
            <guid isPermaLink="true">http://putaindecode.fr/posts/entreprendre/auto-entrepreneuriat-retour-experiences/</guid>
            <pubDate>Thu, 30 Oct 2014 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>